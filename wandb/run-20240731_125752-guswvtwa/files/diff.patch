diff --git a/.DS_Store b/.DS_Store
index c01bf45..6d7b227 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..f3f2746
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,11 @@
+# don't include out files and directories
+# don't include .DS_Store files
+# don't include .idea files
+# don't include .gradle files
+# dont include .pyc files
+*.out
+*.DS_Store
+.idea/
+.gradle/
+*.pyc
+*.zip 
\ No newline at end of file
diff --git a/games/__pycache__/__init__.cpython-310.pyc b/games/__pycache__/__init__.cpython-310.pyc
index 1b00a1b..347bbb7 100644
Binary files a/games/__pycache__/__init__.cpython-310.pyc and b/games/__pycache__/__init__.cpython-310.pyc differ
diff --git a/games/encoder/GraphEncoder.py b/games/encoder/GraphEncoder.py
index 7e34464..a0dbe69 100644
--- a/games/encoder/GraphEncoder.py
+++ b/games/encoder/GraphEncoder.py
@@ -286,51 +286,171 @@ class HeteroGNNEncoderPongProximity:
 #         return data_list 
 
 
+# class GraphEncoderFreeway:
+#     def __init__(self, obj_type_id: str = "obj"):
+#         self.obj_type_id = obj_type_id
+
+#     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
+#         batch_size, num_nodes, object_feature_length = batch_node_features.shape
+#         batch_data = []
+
+#         # Precompute node types for all batches
+#         chicken_mask = batch_node_features[:, :, -3] == 1
+#         lane_mask = batch_node_features[:, :, -2] == 1
+#         car_mask = batch_node_features[:, :, -1] == 1
+
+#         for b in range(batch_size):
+#             node_features = batch_node_features[b]
+#             graph = nx.Graph()
+
+#             # Add object nodes (vectorized)
+#             graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
+
+#             chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
+#             lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
+#             car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
+
+#             # Convert to sets for faster lookups
+#             chicken_set = set(chicken_indices)
+#             lane_set = set(lane_indices)
+#             car_set = set(car_indices)
+
+#             atom_index = num_nodes
+
+#             # Add atoms and edges (can be further optimized with matrix operations)
+#             for i in range(num_nodes):
+#                 if i in chicken_set or i in car_set:
+#                     for j in lane_set:
+#                         if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+#                             atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
+#                             graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
+#                             graph.add_edge(i, atom_index, position=0)
+#                             graph.add_edge(j, atom_index, position=1)
+#                             atom_index += 1
+
+#             # Add LaneNextToLane atoms and edges
+#             for i in range(len(lane_indices) - 1):
+#                 graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
+#                 graph.add_edge(lane_indices[i], atom_index, position=0)
+#                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
+#                 atom_index += 1
+
+#             batch_data.append(graph)
+
+#         return Batch.from_data_list(self.to_pyg_data(batch_data))
+
+#     def to_pyg_data(self, batch_graphs: List[nx.Graph]) -> List[HeteroData]:
+#         data_list = []
+
+#         for graph in batch_graphs:
+#             data = HeteroData()
+#             node_index_mapping = defaultdict(dict)
+#             obj_features = []
+#             atom_features_dict = defaultdict(list)
+#             edge_dict = defaultdict(list)
+
+#             current_obj_features = []
+#             current_atom_features_dict = defaultdict(list)
+
+#             for node, attrs in graph.nodes(data=True):
+#                 node_type = attrs['type']
+#                 features = attrs['features']
+#                 if node_type == self.obj_type_id:
+#                     node_index_mapping[node_type][node] = len(current_obj_features)
+#                     current_obj_features.append(features)
+#                 else:
+#                     node_index_mapping[node_type][node] = len(current_atom_features_dict[node_type])
+#                     current_atom_features_dict[node_type].append(features)
+
+#             if current_obj_features:
+#                 obj_features.append(torch.stack(current_obj_features))
+
+#             for node_type, features_list in current_atom_features_dict.items():
+#                 if features_list:
+#                     # Flatten the features if necessary
+#                     flattened_features = [f.view(-1) for f in features_list]
+#                     atom_features_dict[node_type].append(torch.stack(flattened_features))
+
+#             if obj_features:
+#                 data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
+
+#             for node_type, features_list in atom_features_dict.items():
+#                 if features_list:
+#                     data[node_type].x = torch.cat(features_list, dim=0)
+
+#             for src, dst, attr in graph.edges(data=True):
+#                 src_type = graph.nodes[src]['type']
+#                 dst_type = graph.nodes[dst]['type']
+#                 pos = str(attr['position'])
+#                 edge_type = (src_type, pos, dst_type)
+
+#                 src_idx = node_index_mapping[src_type][src]
+#                 dst_idx = node_index_mapping[dst_type][dst]
+#                 edge_dict[edge_type].append((src_idx, dst_idx))
+#                 # Add reverse edges for bidirectionality
+#                 reverse_edge_type = (dst_type, pos, src_type)
+#                 edge_dict[reverse_edge_type].append((dst_idx, src_idx))
+
+#             for edge_type, edges in edge_dict.items():
+#                 edge_tensor = torch.tensor(edges, dtype=torch.long).t().contiguous()
+#                 data[edge_type].edge_index = edge_tensor
+
+#             data_list.append(data)
+
+#         return data_list
+
 class GraphEncoderFreeway:
     def __init__(self, obj_type_id: str = "obj"):
         self.obj_type_id = obj_type_id
 
     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
-        batch_size, num_nodes, object_feature_length = batch_node_features.shape
+        # remove the values from batch_node_features that have all zeros in the vector
+        # batch_node_features = batch_node_features[~torch.all(batch_node_features == 0, dim=1)]
         batch_data = []
-
-        # Precompute node types for all batches
-        chicken_mask = batch_node_features[:, :, -3] == 1
-        lane_mask = batch_node_features[:, :, -2] == 1
-        car_mask = batch_node_features[:, :, -1] == 1
+        batch_size = batch_node_features.size(0)
 
         for b in range(batch_size):
             node_features = batch_node_features[b]
+            num_nodes = node_features.size(0)
             graph = nx.Graph()
 
-            # Add object nodes (vectorized)
-            graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
-
-            chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
-            lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
-            car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
+            object_feature_length = node_features.size(1)
 
-            # Convert to sets for faster lookups
-            chicken_set = set(chicken_indices)
-            lane_set = set(lane_indices)
-            car_set = set(car_indices)
+            # Add object nodes
+            for i in range(num_nodes):
+                graph.add_node(i, type=self.obj_type_id, features=node_features[i].tolist())
 
             atom_index = num_nodes
 
-            # Add atoms and edges (can be further optimized with matrix operations)
-            for i in range(num_nodes):
-                if i in chicken_set or i in car_set:
-                    for j in lane_set:
-                        if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
-                            atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
-                            graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
-                            graph.add_edge(i, atom_index, position=0)
-                            graph.add_edge(j, atom_index, position=1)
-                            atom_index += 1
+            # Add ChickenOnLane atoms and edges
+            chicken_indices = [i for i in range(num_nodes) if node_features[i, -3] == 1]
+            lane_indices = [i for i in range(num_nodes) if node_features[i, -2] == 1]
+
+            for i in chicken_indices:
+                for j in lane_indices:
+                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+                        atom_features = torch.zeros((2, object_feature_length)).tolist()
+                        graph.add_node(atom_index, type="ChickenOnLane", features=atom_features)
+                        graph.add_edge(i, atom_index, position=0)
+                        graph.add_edge(j, atom_index, position=1)
+                        atom_index += 1
+
+            # Add CarOnLane atoms and edges
+            car_indices = [i for i in range(num_nodes) if node_features[i, -1] == 1]
+
+            for i in car_indices:
+                for j in lane_indices:
+                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+                        atom_features = torch.zeros((2, object_feature_length)).tolist()
+                        graph.add_node(atom_index, type="CarOnLane", features=atom_features)
+                        graph.add_edge(i, atom_index, position=0)
+                        graph.add_edge(j, atom_index, position=1)
+                        atom_index += 1
 
             # Add LaneNextToLane atoms and edges
             for i in range(len(lane_indices) - 1):
-                graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
+                atom_features = torch.zeros((2, object_feature_length)).tolist()
+                graph.add_node(atom_index, type="LaneNextToLane", features=atom_features)
                 graph.add_edge(lane_indices[i], atom_index, position=0)
                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
                 atom_index += 1
@@ -354,7 +474,7 @@ class GraphEncoderFreeway:
 
             for node, attrs in graph.nodes(data=True):
                 node_type = attrs['type']
-                features = attrs['features']
+                features = torch.tensor(attrs['features'])
                 if node_type == self.obj_type_id:
                     node_index_mapping[node_type][node] = len(current_obj_features)
                     current_obj_features.append(features)
@@ -364,19 +484,16 @@ class GraphEncoderFreeway:
 
             if current_obj_features:
                 obj_features.append(torch.stack(current_obj_features))
-
             for node_type, features_list in current_atom_features_dict.items():
                 if features_list:
-                    # Flatten the features if necessary
                     flattened_features = [f.view(-1) for f in features_list]
                     atom_features_dict[node_type].append(torch.stack(flattened_features))
 
             if obj_features:
-                data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
-
+                data[self.obj_type_id].x = torch.cat(obj_features)
             for node_type, features_list in atom_features_dict.items():
                 if features_list:
-                    data[node_type].x = torch.cat(features_list, dim=0)
+                    data[node_type].x = torch.cat(features_list)
 
             for src, dst, attr in graph.edges(data=True):
                 src_type = graph.nodes[src]['type']
@@ -398,8 +515,6 @@ class GraphEncoderFreeway:
             data_list.append(data)
 
         return data_list
-
-    
 class GraphEncoderFreewayProximity:
     def __init__(self, obj_type_id: str = "obj"):
         self.obj_type_id = obj_type_id
diff --git a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc
index 7f7cf70..b9ee24e 100644
Binary files a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc and b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc differ
diff --git a/games/encoder/__pycache__/__init__.cpython-310.pyc b/games/encoder/__pycache__/__init__.cpython-310.pyc
index e4059e9..7335618 100644
Binary files a/games/encoder/__pycache__/__init__.cpython-310.pyc and b/games/encoder/__pycache__/__init__.cpython-310.pyc differ
diff --git a/games/freeway/__pycache__/__init__.cpython-310.pyc b/games/freeway/__pycache__/__init__.cpython-310.pyc
index 8f6a241..ee44eda 100644
Binary files a/games/freeway/__pycache__/__init__.cpython-310.pyc and b/games/freeway/__pycache__/__init__.cpython-310.pyc differ
diff --git a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc
index b518fb6..28a5e67 100644
Binary files a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc and b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc differ
diff --git a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc
index 5560abe..9bc8995 100644
Binary files a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc and b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc differ
diff --git a/games/freeway/freeway_envs/freeway_env.py b/games/freeway/freeway_envs/freeway_env.py
index 9bed93d..4203f04 100644
--- a/games/freeway/freeway_envs/freeway_env.py
+++ b/games/freeway/freeway_envs/freeway_env.py
@@ -724,8 +724,8 @@ class FreewayEnvConstant(gym.Env):
         self.frame_stack = frame_stack
 
         self.lanes = [100, 200, 300, 400, 500, 600, 700]
-        self.lanes = [50,80,120]
-        self.max_cars = 10
+        self.lanes = [50,100]
+        self.max_cars = 5
         # Define action and observation space
         # Actions: 0 - Stay, 1 - Move Up, 2 - Move Down
         self.action_space = spaces.Discrete(3)
@@ -733,8 +733,7 @@ class FreewayEnvConstant(gym.Env):
         if observation_type == "pixel":
             self.observation_space = spaces.Box(low=0, high=255, shape=(self.frame_stack, 84, 84), dtype=np.uint8)
         else:
-            self.max_objects = self.max_cars_init + 4
-            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.max_objects, 7), dtype=np.float32)
+            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.max_cars+ len(self.lanes)+1, 7), dtype=np.float32)
 
         self.window = pygame.display.set_mode((self.window_width, self.window_height))
         self.background_image = pygame.image.load("games/images/Atari - background.png")
@@ -744,10 +743,9 @@ class FreewayEnvConstant(gym.Env):
         self.car_image = pygame.image.load("games/images/car2.png").convert_alpha()
         self.car_image = pygame.transform.scale(self.car_image, (self.car_width, self.car_height))
         self.frame_buffer = np.zeros((self.frame_stack, 84, 84), dtype=np.uint8)
-        self.player_speed = 0
+        self.current_step = 0
         self.clock = pygame.time.Clock()
         self.reset()
-
     def seed(self, seed=None):
         self.np_random, seed = gym.utils.seeding.np_random(seed)
         random.seed(seed)
@@ -762,36 +760,31 @@ class FreewayEnvConstant(gym.Env):
                                        self.window_height - self.player_height - 10,
                                        self.player_width, self.player_height)
         self.score = 0
-        lane_combinations = [[50,80,120],[50,80],[50,120],[80,120]]
-        number_cars = [10,15,20]
-        car_speeds = [1,2,3]
-        self.lanes = random.choice(lane_combinations)
-        self.max_cars = random.choice(number_cars)
-        self.car_speed = random.choice(car_speeds)
         self.cars = [{'x': random.randint(0, self.window_width - self.car_width),
                       'lane': random.choice(self.lanes),
-                      'speed': self.car_speed} for car in range(self.max_cars)]
+                      'speed': random.randint(1, 2)} for _ in range(self.max_cars)]
         self.done = False
+        self.current_step = 0
         self.episode_start_time = pygame.time.get_ticks()
         self.frame_buffer = np.zeros((self.frame_stack, 84, 84), dtype=np.uint8)
-        self.player_speed = 0
         if self.observation_type == "pixel":
             for _ in range(self.frame_stack):
-                self.frame_buffer.append(self._get_obs())
-            return np.array(self.frame_buffer), {}
+                self.update_frame_buffer()
+            return self.get_observation(), {}
         else:
             return self.get_object_data(), {}
 
     def step(self, action):
+        reward = 0
         reward = -0.5
+        self.current_step += 1
+        # if self.current_step % 3000 == 0:
+        #     self.done = True
         current_time = pygame.time.get_ticks()
-        previous_y = self.player_rect.y
-
         if action == 1:  # Up
             self.player_rect.y = max(0, self.player_rect.y - 5)
         elif action == 2:  # Down
             self.player_rect.y = min(self.window_height - self.player_height, self.player_rect.y + 5)
-        self.player_speed = self.player_rect.y - previous_y
 
         for car in self.cars:
             car['x'] += car['speed']
@@ -799,40 +792,38 @@ class FreewayEnvConstant(gym.Env):
                 car['x'] = -random.randint(100, 300)
                 car['speed'] = random.randint(1,2)
 
+        # Collision detection
         hit = any(self.player_rect.colliderect(pygame.Rect(car['x'], car['lane'], self.car_width, self.car_height)) for car in self.cars)
         if hit:
+            #self.score = -1
             self.player_rect.y = self.window_height - self.player_height - 10
+        
             self.last_time = current_time
-        done = False
-       
-
+        if current_time - self.episode_start_time >= 60000:  # 60000 milliseconds = 1 minute
+            self.done = True
+            
         if self.player_rect.y <= 0:  # Reached top
-            self.score += 1
-            reward += 10 * (len(self.lanes))
+            self.score +=1
+            reward += 10*(len(self.lanes))
+
             self.player_rect.y = self.window_height - self.player_height - 10
-        truncated = False
-        info = {}  
+
         if self.observation_type == "pixel":
+            self.update_frame_buffer()
             observation = self.get_observation()
-            return np.array(self.frame_buffer), reward, done, truncated, info
         else:
-            return self.get_object_data(), reward, done, truncated, info
-
+            observation = self.get_object_data()
 
+        return observation, reward, self.done, False, {}
 
-    def _get_obs(self):
+    def update_frame_buffer(self):
         frame = self.render_to_array()
-    
-        # Convert to grayscale
-        grayscale = rgb2gray(frame)
-        
-        # Normalize the grayscale image to enhance contrast
-        normalized_frame = (grayscale - grayscale.min()) / (grayscale.max() - grayscale.min())
-        
-        # Resize the frame
-        resized_frame = resize(normalized_frame, (84, 84), anti_aliasing=True, mode='reflect', preserve_range=True)
-        
-        return resized_frame
+        grayscale = np.dot(frame[..., :3], [0.2989, 0.5870, 0.1140]).astype(np.uint8)  # Convert to grayscale
+        resized_frame = pygame.transform.scale(pygame.surfarray.make_surface(grayscale), (84, 84))
+        frame_array = pygame.surfarray.array3d(resized_frame).transpose(1, 0, 2)[:, :, 0]
+
+        self.frame_buffer = np.roll(self.frame_buffer, shift=-1, axis=0)
+        self.frame_buffer[-1] = frame_array
 
     def render_to_array(self):
         self.window.blit(self.background_image, (0, 0))
@@ -846,18 +837,18 @@ class FreewayEnvConstant(gym.Env):
 
     def get_object_data(self):
         objects = [
-            [self.player_rect.x, self.player_rect.y, self.player_speed, 0, 1, 0, 0],  # Player
+            [self.player_rect.x, self.player_rect.y, 0, 0, 1, 0, 0],  # Player
             
         ] 
         # add lanes
         for lane in self.lanes:
-            objects.append([self.window_width // 2, lane, 0, 0, 0, 1, 0])
+            objects.append([self.window_width//2, lane, 0, 0, 0, 1, 0])
 
-        for car in self.cars:
+        for i, car in enumerate(self.cars):
             objects.append([car['x'], car['lane'], car['speed'], 0, 0, 0, 1])
 
-        while len(objects) < self.max_objects:
-            objects.append([0, 0, 0, 0, 0, 0, 0])
+        # while len(objects) < self.max_cars + 10:  # Ensure the list has a constant length
+        #     objects.append([0, 0, 0, 0, 0, 0, 0])
 
         return torch.tensor(objects, dtype=torch.float32)
 
@@ -867,19 +858,16 @@ class FreewayEnvConstant(gym.Env):
             self.window.blit(self.car_image, (car['x'], car['lane']))
         self.window.blit(self.player_image, (self.player_rect.x, self.player_rect.y))
         pygame.display.update()
-        self.clock.tick(60)
 
     def close(self):
         pygame.quit()
 
-
 if __name__=="__main__":
     env = FreewayEnvConstant(render_mode='human', observation_type='graph')
 
-    #model = PPO.load("best_model")
     #model = PPO.load("ppo_freeway_pixel")
-    #model = PPO.load("logs/Freeway-GNN-training/best_model.zip")
-    model = PPO.load("ppo_custom_heterognn")
+    #model = PPO.load("ppo_custom_heterognn")
+    model = PPO.load("logs/Freeway-GNN-training/best_model.zip")
 
     # # Evaluate the agent
     # mean_reward, std_reward = evaluate_policy(model, env, n_eval_episodes=1, render=True)
@@ -888,19 +876,12 @@ if __name__=="__main__":
     obs,_ = env.reset()
     done = False
     total_reward = 0
-    n_episodes = 10
-    for i in range(n_episodes):
-        while not done:
-            action, _ = model.predict(obs)
-            #action = env.action_space.sample()
-            obs, reward, done, _,_ = env.step(action)
-            total_reward += reward
-            pygame.time.delay(50)
-            env.render()
-
-        print(f"Episode {i+1}/{n_episodes}: Total reward = {total_reward}")
-        total_reward = 0
-        obs,_ = env.reset()
-        done = False
+    while not done:
+        action, _ = model.predict(obs)
+        #action = env.action_space.sample()
+        obs, reward, done, _,_ = env.step(action)
+        total_reward += reward
+        pygame.time.delay(50)
+        env.render()
 
     print(f"Total reward: {total_reward}")
\ No newline at end of file
diff --git a/games/freeway/run_supervised_gnn.py b/games/freeway/run_supervised_gnn.py
index 2689c59..bbfa980 100644
--- a/games/freeway/run_supervised_gnn.py
+++ b/games/freeway/run_supervised_gnn.py
@@ -157,7 +157,7 @@
 
 # # #env = FreewayEnv(render_mode='human', observation_type='graph')
 # # #env = make_vec_env(lambda: env, n_envs=8, vec_env_cls=SubprocVecEnv)
-# # envs = SubprocVecEnv([make_env([50, 80, 120], 10, 2, rank=i) for i in range(16)])
+# # 
 # # # policy_kwargs = dict(
 # # #     features_extractor_class=CustomCNN,
 # # #     features_extractor_kwargs=dict(features_dim=128),
@@ -189,7 +189,62 @@ from wandb.integration.sb3 import WandbCallback
 from games.freeway.freeway_envs.freeway_env import FreewayEnvConstant
 from games.model.policy import CustomCNN, CustomHeteroGNN
 import pygame
-# #Initialize wandb
+from stable_baselines3.common.callbacks import BaseCallback
+import os
+import numpy as np
+from stable_baselines3.common.vec_env import DummyVecEnv
+from stable_baselines3.common.monitor import Monitor
+from stable_baselines3.common.callbacks import EvalCallback
+from stable_baselines3.common.monitor import load_results
+from stable_baselines3.common.results_plotter import ts2xy
+#Initialize wandb
+class SaveOnBestTrainingRewardCallback(BaseCallback):
+    def __init__(self, check_freq, log_dir, verbose=1):
+        super(SaveOnBestTrainingRewardCallback, self).__init__(verbose)
+        self.check_freq = check_freq
+        self.log_dir = log_dir
+        self.save_path = os.path.join(log_dir, "best_model")
+        self.best_mean_reward = -np.inf
+
+    def _init_callback(self) -> None:
+        if self.save_path is not None:
+            os.makedirs(self.save_path, exist_ok=True)
+
+    def _on_step(self) -> bool:
+        if self.n_calls % self.check_freq == 0:
+            x, y = ts2xy(load_results(self.log_dir), "timesteps")
+            if len(x) > 0:
+                mean_reward = np.mean(y[-10:])
+                if self.verbose > 0:
+                    print(f"Num timesteps: {self.num_timesteps}")
+                    print(f"Best mean reward: {self.best_mean_reward:.2f} - Last mean reward per episode: {mean_reward:.2f}")
+                if mean_reward > self.best_mean_reward:
+                    self.best_mean_reward = mean_reward
+                    if self.verbose > 0:
+                        print(f"Saving new best model at {x[-1]} timesteps")
+                        print(f"Saving new best model to {self.save_path}.zip")
+                    self.model.save(self.save_path)
+                #wandb.log({"mean_reward": mean_reward, "timesteps": self.num_timesteps})
+            else:
+                device = "cpu"
+                if self.verbose > 0:
+                    print("No data available for logging.")
+                #wandb.log({"timesteps": self.num_timesteps})
+        return True 
+log_dir = "./logs/Freeway-GNN-training/"
+
+def make_env(lanes, max_cars, car_speed, seed=0, rank=None):
+    def _init():
+        env = FreewayEnvConstant( render_mode='human', observation_type='graph')
+        monitor_path = os.path.join(log_dir, f"monitor_{rank}.csv")
+        os.makedirs(log_dir, exist_ok=True)  # Create log directory if it doesn't exist
+        env = Monitor(env, filename=monitor_path, allow_early_resets=True)
+        env.seed(seed + rank)
+        return env
+    return _init 
+envs = DummyVecEnv([make_env([50, 80, 120], 10, 2, rank=i) for i in range(1)])
+
+
 wandb.init(
     project="gnn_atari_freeway",  # Replace with your project name
     sync_tensorboard=True,        # Automatically sync SB3 logs with wandb
@@ -210,7 +265,9 @@ env = FreewayEnvConstant(render_mode='human', observation_type='graph')
 # policy_kwargs = dict(
 #     features_extractor_class=CustomCNN,
 #     features_extractor_kwargs=dict(features_dim=128),
-# )
+# ) 
+
+save_callback = SaveOnBestTrainingRewardCallback(check_freq=1000, log_dir=log_dir)
 
 policy_kwargs = dict(
     features_extractor_class=CustomHeteroGNN,
@@ -225,8 +282,11 @@ policy_kwargs = dict(
 )
 
 # # Create the PPO model with the custom feature extractor
-model = PPO('MlpPolicy', env, policy_kwargs=policy_kwargs, verbose=2)
+model = PPO('MlpPolicy', envs, policy_kwargs=policy_kwargs, verbose=2)
+#model = PPO.load("logs/Freeway-GNN-training/best_model.zip") 
+#model.set_env(env)
+
 # # Train the model with WandbCallback
-model.learn(total_timesteps=100000, callback=WandbCallback() )
+model.learn(total_timesteps=1000000, callback=[WandbCallback(), save_callback]) 
 # # Save the model
 model.save("ppo_custom_heterognn")
diff --git a/games/model/__pycache__/cnn_model.cpython-310.pyc b/games/model/__pycache__/cnn_model.cpython-310.pyc
index aaea007..8ce27a0 100644
Binary files a/games/model/__pycache__/cnn_model.cpython-310.pyc and b/games/model/__pycache__/cnn_model.cpython-310.pyc differ
diff --git a/games/model/__pycache__/hetero_gnn.cpython-310.pyc b/games/model/__pycache__/hetero_gnn.cpython-310.pyc
index fae3973..212315f 100644
Binary files a/games/model/__pycache__/hetero_gnn.cpython-310.pyc and b/games/model/__pycache__/hetero_gnn.cpython-310.pyc differ
diff --git a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc
index 8b8b9a9..8b90800 100644
Binary files a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc and b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc differ
diff --git a/games/model/__pycache__/policy.cpython-310.pyc b/games/model/__pycache__/policy.cpython-310.pyc
index 57471c6..9044bb9 100644
Binary files a/games/model/__pycache__/policy.cpython-310.pyc and b/games/model/__pycache__/policy.cpython-310.pyc differ
diff --git a/games/model/hetero_gnn.py b/games/model/hetero_gnn.py
index 141ee67..c1d824c 100644
--- a/games/model/hetero_gnn.py
+++ b/games/model/hetero_gnn.py
@@ -11,14 +11,6 @@ from torch_geometric.typing import Adj
 
 from games.model.hetero_message_passing import FanInMP, FanOutMP
 from torch_geometric.nn import GCNConv, GATConv
-import torch
-import torch_geometric as pyg
-from torch import Tensor
-from torch.nn import ModuleDict
-from typing import Dict, Optional, List, Tuple, Union
-from collections import defaultdict
-from torch_geometric.data import Batch, HeteroData
-from torch_geometric.nn import global_add_pool
 
 class HeteroGNN(torch.nn.Module):
     def __init__(
@@ -129,122 +121,22 @@ class HeteroGNN(torch.nn.Module):
         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
 
 
+class HeteroGCN(torch.nn.Module):
+    def __init__(self, in_channels_dict, out_channels):
+        super(HeteroGCN, self).__init__()
+        self.convs = torch.nn.ModuleDict()
+        for obj_type, in_channels in in_channels_dict.items():
+            self.convs[obj_type] = GCNConv(in_channels, out_channels)
 
+    def forward(self, data):
+        for obj_type in data.node_types:
+            x = data[obj_type].x
+            edge_index = data[obj_type, 'to', obj_type].edge_index
+            x = self.convs[obj_type](x, edge_index)
+            x = F.relu(x)
+            data[obj_type].x = x
 
-# class HeteroGNN(torch.nn.Module):
-#     def __init__(
-#         self,
-#         hidden_size: int,
-#         num_layer: int,
-#         obj_type_id: str,
-#         arity_dict: Dict[str, int],
-#         input_size: int = 7,  # Assuming initial input size is 7 for obj nodes
-#         aggr: Optional[Union[str, pyg.nn.aggr.Aggregation]] = "sum",
-#     ):
-#         """
-#         :param hidden_size: The size of object embeddings.
-#         :param num_layer: Total number of message exchange iterations.
-#         :param aggr: Aggregation function to be used for message passing.
-#         :param obj_type_id: The type identifier of objects in the x_dict.
-#         :param arity_dict: A dictionary mapping predicate names to their arity.
-#         Creates one MLP for each predicate.
-#         Note that predicates as well as goal-predicates are meant.
-#         """
-#         super().__init__()
-
-#         self.hidden_size: int = hidden_size
-#         self.num_layer: int = num_layer
-#         self.obj_type_id: str = obj_type_id
-
-#         # Initialize Linear layers for each node type based on arity
-#         self.linear_layers = torch.nn.ModuleDict()
-#         self.linear_layers[obj_type_id] = torch.nn.Linear(input_size, hidden_size)
-#         for pred, arity in arity_dict.items():
-#             if arity > 0:
-#                 self.linear_layers[pred] = torch.nn.Linear(input_size * arity, hidden_size * arity)
-
-#         # Initialize MLPs for each predicate
-#         mlp_dict = {
-#             pred: HeteroGNN.mlp(hidden_size * arity, hidden_size * arity, hidden_size * arity)
-#             for pred, arity in arity_dict.items()
-#             if arity > 0
-#         }
-
-#         self.obj_to_atom = FanOutMP(mlp_dict, src_name=obj_type_id)
-
-#         self.obj_update = HeteroGNN.mlp(
-#             in_size=(hidden_size + hidden_size), hidden_size=(hidden_size + hidden_size) * 2, out_size=hidden_size
-#         )
-
-#         self.atom_to_obj = FanInMP(
-#             hidden_size=hidden_size,
-#             dst_name=obj_type_id,
-#             aggr=aggr,
-#         )
-
-#         #self.readout = HeteroGNN.mlp(hidden_size, 2 * hidden_size, 1)
-
-#     def encode(self, x_dict: Dict[str, Tensor], device: torch.device) -> Dict[str, Tensor]:
-#         # Apply linear transformation to all node types based on their arity
-#         for k, v in x_dict.items():
-#             arity = 1 if k == self.obj_type_id else v.size(1) // self.hidden_size
-#             x_dict[k] = self.linear_layers[k](v.view(v.size(0), -1)).to(device)
-#         return x_dict
-
-#     def layer(self, x_dict, edge_index_dict):
-#         out = self.obj_to_atom(x_dict, edge_index_dict)
-#         x_dict.update(out)
-#         out = self.atom_to_obj(x_dict, edge_index_dict)
-#         obj_emb = torch.cat([x_dict[self.obj_type_id], out[self.obj_type_id]], dim=1)
-#         obj_emb = self.obj_update(obj_emb)
-#         x_dict[self.obj_type_id] = obj_emb
-        
-
-#     def forward(
-#         self,
-#         x_dict: Dict[str, Tensor],
-#         edge_index_dict: Dict[str, Adj],
-#         batch_dict: Optional[Dict[str, Tensor]] = None,
-#     ):
-#         device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
-#         x_dict = {k: v.to(device) for k, v in x_dict.items() if v.numel() != 0}
-#         edge_index_dict = {k: v.to(device) for k, v in edge_index_dict.items() if v.numel() != 0}
-
-#         x_dict = self.encode(x_dict, device)  # Encode to hidden size
-
-#         for _ in range(self.num_layer):
-#             self.layer(x_dict, edge_index_dict)
-
-#         obj_emb = x_dict[self.obj_type_id]
-#         batch = (
-#             batch_dict[self.obj_type_id].to(device)
-#             if batch_dict is not None
-#             else torch.zeros(obj_emb.shape[0], dtype=torch.long, device=obj_emb.device)
-#         )
-#         aggr = pyg.nn.global_add_pool(obj_emb, batch)
-#         return aggr
-
-#     @staticmethod
-#     def mlp(in_size: int, hidden_size: int, out_size: int):
-#         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
-
-
-# class HeteroGCN(torch.nn.Module):
-#     def __init__(self, in_channels_dict, out_channels):
-#         super(HeteroGCN, self).__init__()
-#         self.convs = torch.nn.ModuleDict()
-#         for obj_type, in_channels in in_channels_dict.items():
-#             self.convs[obj_type] = GCNConv(in_channels, out_channels)
-
-#     def forward(self, data):
-#         for obj_type in data.node_types:
-#             x = data[obj_type].x
-#             edge_index = data[obj_type, 'to', obj_type].edge_index
-#             x = self.convs[obj_type](x, edge_index)
-#             x = F.relu(x)
-#             data[obj_type].x = x
-
-#         return data
+        return data
 
 class HeteroGAT(torch.nn.Module):
     def __init__(self, in_channels_dict, out_channels):
diff --git a/games/model/hetero_message_passing.py b/games/model/hetero_message_passing.py
index 0b4020c..230410f 100644
--- a/games/model/hetero_message_passing.py
+++ b/games/model/hetero_message_passing.py
@@ -1,183 +1,3 @@
-# import abc
-# from typing import Any, Dict, List, Optional, Union
-
-# import torch
-# import torch_geometric as pyg
-# from torch import Tensor
-# from torch_geometric.nn import Aggregation, SimpleConv
-# from torch_geometric.nn.conv.hetero_conv import group
-# from torch_geometric.nn.module_dict import ModuleDict
-# from torch_geometric.typing import Adj, EdgeType, OptPairTensor
-
-
-# class HeteroRouting(torch.nn.Module):
-#     """
-#     Handles heterogeneous message passing very similar to pyg.nn.HeteroConv.
-#     Instead of specifying a convolution for each EdgeType more generic rules can be used.
-#     """
-
-#     def __init__(self, aggr: Optional[str | Aggregation] = None) -> None:
-#         super().__init__()
-#         self.aggr = aggr
-
-#     @abc.abstractmethod
-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
-#         pass
-
-#     @abc.abstractmethod
-#     def _internal_forward(self, x, edges_index, edge_type: EdgeType):
-#         pass
-
-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
-#         aggregated: Dict[str, Tensor] = {}
-#         for key, value in out_dict.items():
-#             # hetero_conv.group does not yet support Aggregation modules
-#             if isinstance(self.aggr, Aggregation):
-#                 out = torch.stack(value, dim=0)
-#                 out = self.aggr(out, dim=0)
-#                 if out.dim() == 3 and out.shape[0] == 1:
-#                     out = out[0]  # TODO Why does Softmax return one dim to much
-#             else:
-#                 out = group(value, self.aggr)
-#             aggregated[key] = out
-#         return aggregated
-
-#     def forward(self, x_dict, edge_index_dict):
-#         """
-#         Apply message passing to each edge_index key if the edge-type is accepted.
-#         Calls the internal forward with a normal homogenous signature of x, edge_index
-#         :param x_dict: Dictionary with a feature matrix for each node type
-#         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
-#         :return: Dictionary with each processed dst as key and their updated embedding as value.
-#         """
-       
-#         out_dict: Dict[str, Any] = {}
-#         for edge_type in edge_index_dict.keys():
-#             src, rel, dst = edge_type
-
-#             if not self._accept_edge(src, rel, dst):
-#                 continue
-
-#             if src == dst and src in x_dict:
-#                 x = x_dict[src]
-#             elif src in x_dict or dst in x_dict:
-#                 x = (
-#                     x_dict.get(src, None),
-#                     x_dict.get(dst, None),
-#                 )
-#             else:
-#                 raise ValueError(
-#                     f"Neither src ({src}) nor destination ({dst})"
-#                     + f" found in x_dict ({x_dict})"
-#                 )
-
-#             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
-#             if dst not in out_dict:
-#                 out_dict[dst] = [out]
-#             else:
-#                 out_dict[dst].append(out)
-
-#         return self._group_out(out_dict)
-
-
-# class FanOutMP(HeteroRouting):
-#     """
-#      Accepts EdgeTypes with the defined src_name.
-#     1. For each destination concatenate all embeddings of the source.
-#     2. Run the destination specific MLP on the concatenated embeddings.
-#     3. Save the new embedding under the destination key.
-#     FanOut should be aggregation free in theory.
-#     Every atom gets only as many messages as the arity of its predicate.
-#     :param update_mlp_by_dst: An MLP for each possible destination.
-#         Needs the degree of incoming edges as input and output dimension
-#     :param src_name: The node-type for which outgoing edges should be accepted.
-#     """
-
-#     def __init__(
-#         self,
-#         update_mlp_by_dst: Dict[str, torch.nn.Module],
-#         src_name: str,
-#     ) -> None:
-#         """ """
-#         super().__init__()
-#         self.update_mlp_by_dst = ModuleDict(update_mlp_by_dst)
-#         self.simple = SimpleConv()
-#         self.src_name = src_name
-
-#     def _accept_edge(self, src, rel, dst) -> bool:
-#         return src == self.src_name
-
-#     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
-#         position = int(edge_type[1])
-        
-#         # Debug: Print edge index and node features
-
-#         # Ensure edge indices are within bounds
-#         max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
-#         if edge_index.max() >= max_index:
-#             raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
-        
-
-#         out = self.simple(x, edge_index)
-#         return position, out
-
-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
-#         for dst, value in out_dict.items():
-#             sorted_out = sorted(value, key=lambda tpl: tpl[0])
-#             stacked = torch.cat([out for _, out in sorted_out], dim=1)
-#             out_dict[dst] = self.update_mlp_by_dst[dst](stacked)
-
-#         return out_dict
-
-
-# class FanInMP(HeteroRouting):
-
-#     def __init__(
-#         self,
-#         hidden_size: int,
-#         dst_name: str,
-#         aggr: Optional[Union[str, Aggregation]] = "sum",
-#     ) -> None:
-#         super().__init__(aggr)
-#         self.select = SelectMP(hidden_size)
-#         self.dst_name = dst_name
-
-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
-#         return dst == self.dst_name
-
-#     def _internal_forward(self, x, edges_index, edge_type):
-#         return self.select(x, edges_index, int(edge_type[1]))
-
-
-# class SelectMP(pyg.nn.MessagePassing):
-
-#     def __init__(
-#         self,
-#         hidden_size: int,
-#         aggr: Optional[str | List[str]] = "sum",
-#         aggr_kwargs: Optional[Dict[str, Any]] = None,
-#     ) -> None:
-#         super().__init__(
-#             aggr,
-#             aggr_kwargs=aggr_kwargs,
-#         )
-#         self.hidden = hidden_size
-
-#     def forward(
-#         self, x: Union[Tensor, OptPairTensor], edge_index: Adj, position: int
-#     ) -> Tensor:
-#         if isinstance(x, Tensor):
-#             x = (x, x)
-#         return self.propagate(edge_index, x=x, position=position)
-
-#     def message(self, x_j: Tensor, position: int) -> Tensor:
-#         # Take the i-th hidden-number of elements from the last dimension
-#         # e.g from [1, 2, 3, 4, 5, 6] with hidden=2 and position=1 -> [3, 4]
-#         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
-#         #               split[self.position]
-#         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
-#         return sliced
-
 import abc
 from typing import Any, Dict, List, Optional, Union
 
@@ -230,6 +50,7 @@ class HeteroRouting(torch.nn.Module):
         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
         :return: Dictionary with each processed dst as key and their updated embedding as value.
         """
+       
         out_dict: Dict[str, Any] = {}
         for edge_type in edge_index_dict.keys():
             src, rel, dst = edge_type
@@ -251,7 +72,6 @@ class HeteroRouting(torch.nn.Module):
                 )
 
             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
-
             if dst not in out_dict:
                 out_dict[dst] = [out]
             else:
@@ -289,6 +109,15 @@ class FanOutMP(HeteroRouting):
 
     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
         position = int(edge_type[1])
+        
+        # Debug: Print edge index and node features
+
+        # Ensure edge indices are within bounds
+        max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
+        if edge_index.max() >= max_index:
+            raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
+        
+
         out = self.simple(x, edge_index)
         return position, out
 
@@ -347,4 +176,4 @@ class SelectMP(pyg.nn.MessagePassing):
         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
         #               split[self.position]
         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
-        return sliced
+        return sliced
\ No newline at end of file
diff --git a/games/model/policy.py b/games/model/policy.py
index 7119db4..2d9ea67 100644
--- a/games/model/policy.py
+++ b/games/model/policy.py
@@ -1,5 +1,3 @@
-import pstats
-import time
 import torch as th
 import torch.nn as nn
 import gymnasium as gym
@@ -7,53 +5,48 @@ from stable_baselines3.common.policies import ActorCriticPolicy
 from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
 from games.model.hetero_gnn import HeteroGNN
 from typing import Dict
-from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
+from games.encoder.GraphEncoder import HeteroGNNEncoderPong
 from gymnasium import spaces
+import torch
+import torch.nn as nn
+from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
+from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
+from games.model.hetero_gnn import HeteroGNN
 import torch_geometric as pyg
 from games.model.cnn_model import CNNgame
-
+import time
 class CustomHeteroGNN(BaseFeaturesExtractor):
     def __init__(self, observation_space, features_dim=64, hidden_size=64, num_layer=2, obj_type_id='obj', arity_dict={'atom': 2}, game = 'pong'):
         super().__init__(observation_space, features_dim=hidden_size)
         if game == 'pong':
             self.encoder = HeteroGNNEncoderPong()
         elif game == 'freeway':
-            self.encoder = GraphEncoderFreeway()
+            self.encoder = GraphEncoderFreeway() 
         elif game == 'pacman':
             self.encoder = GraphEncoderPacman()
             self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=8)
         elif game == 'breakout':
             self.encoder = GraphEncoderBreakout()
         
-        self.counter = 0
-
         # set device to mps if available
-        # self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
+        #self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
         self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
-        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict).to(self.device)
+        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=7).to(self.device)
+
 
     def forward(self, observations):
         # Encode observations to a graph using the encoder
-        self.counter+=1
-        
         start = time.time()
         pyg_data = self.encoder.encode(observations)
-
         # if observations.shape[0] >1:
         #     print(f"Time to encode: {time.time() - start}")
 
-        #pyg_data = pyg_data.to(self.device) 
+        pyg_data = pyg_data.to(self.device) 
         obj_emb = self.model(pyg_data.x_dict, pyg_data.edge_index_dict, pyg_data.batch_dict)
         # Flatten or pool the embeddings if necessary to match the expected features_dim
-        #print(f"Time to encode: {time.time() - start}")
-        #total_time += 
-        if self.counter % 2048/64 == 0:
-            print(f"time to encode step size is: {time.time() - start}")
-
         return obj_emb
 
 
-# Additional classes for the rest of the code remain unchanged
 
 import torch
 import torch.nn as nn
@@ -101,5 +94,4 @@ class CustomCNN(BaseFeaturesExtractor):
         
         cnn_output = self.cnn(observations)
         final_output = self.adjust_to_features_dim(cnn_output)
-        return final_output
-
+        return final_output
\ No newline at end of file
diff --git a/logs/Freeway-GNN-training/best_model.zip b/logs/Freeway-GNN-training/best_model.zip
index b4e5ca7..f1e92ee 100644
Binary files a/logs/Freeway-GNN-training/best_model.zip and b/logs/Freeway-GNN-training/best_model.zip differ
diff --git a/logs/Freeway-GNN-training/monitor_0.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_0.csv.monitor.csv
index 548da19..4e89375 100644
--- a/logs/Freeway-GNN-training/monitor_0.csv.monitor.csv
+++ b/logs/Freeway-GNN-training/monitor_0.csv.monitor.csv
@@ -1,56 +1,2 @@
-<<<<<<< HEAD
-#{"t_start": 1722263082.483683, "env_id": "None"}
+#{"t_start": 1722423470.717927, "env_id": "None"}
 r,l,t
--2048.5,4097,101.314796
--1958.0,3916,161.31896
--1024.0,2228,251.244339
--1418.0,4096,353.052892
--578.0,4096,450.195446
--8.0,4096,549.572934
-322.0,4096,646.894854
-412.0,4096,753.012263
-643.0,3934,813.016459
-215.0,2210,901.607931
-562.0,4096,1000.400098
-592.0,4096,1098.610637
-472.0,4096,1200.006564
-356.0,3188,1260.011257
-472.0,2956,1361.124322
-352.0,4096,1464.418093
-422.0,2876,1524.484477
-586.0,3268,1628.837805
-453.5,3473,1688.856514
-314.5,2671,1781.829841
-502.0,4096,1881.154485
-473.0,2954,1941.159391
-407.5,2605,2001.161051
-423.5,2633,2106.213584
-532.0,4096,2206.523507
-622.0,4096,2303.941201
-562.0,4096,2406.126723
-442.0,4096,2507.956189
-772.0,4096,2599.055137
-712.0,4096,2696.839709
-646.5,3927,2756.845287
-421.5,2217,2860.093648
-646.5,3447,2920.096781
-451.5,2697,3016.118671
-375.0,2310,3076.125597
-427.5,3045,3136.131946
-501.5,2837,3241.82993
-777.0,3726,3301.834271
-441.0,2418,3398.348427
-832.0,4096,3498.809017
-694.0,2932,3558.800011
-198.0,1164,3841.730237
-408.0,2064,6487.607474
-611.0,3338,6547.609052
-405.0,2790,6646.301228
-397.5,2385,6706.305576
-635.0,3710,6766.308905
-421.5,2097,6859.866502
-490.0,2560,6919.872842
-=======
-#{"t_start": 1721027785.3644965, "env_id": "None"}
-r,l,t
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
diff --git a/logs/Freeway-GNN-training/monitor_1.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_1.csv.monitor.csv
deleted file mode 100644
index 70c9a46..0000000
--- a/logs/Freeway-GNN-training/monitor_1.csv.monitor.csv
+++ /dev/null
@@ -1,11 +0,0 @@
-<<<<<<< HEAD
-#{"t_start": 1721832235.578424, "env_id": "None"}
-r,l,t
--500.0,1000,7.976909
--500.0,1000,68.716898
--500.0,1000,133.446655
--500.0,1000,196.987768
-=======
-#{"t_start": 1721027785.4076815, "env_id": "None"}
-r,l,t
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
diff --git a/logs/Freeway-GNN-training/monitor_10.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_10.csv.monitor.csv
deleted file mode 100644
index 21abcb5..0000000
--- a/logs/Freeway-GNN-training/monitor_10.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.389009, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_11.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_11.csv.monitor.csv
deleted file mode 100644
index df5cd25..0000000
--- a/logs/Freeway-GNN-training/monitor_11.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3974922, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_12.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_12.csv.monitor.csv
deleted file mode 100644
index 3861aaf..0000000
--- a/logs/Freeway-GNN-training/monitor_12.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3701518, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_13.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_13.csv.monitor.csv
deleted file mode 100644
index 5cf3e0f..0000000
--- a/logs/Freeway-GNN-training/monitor_13.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3992622, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_14.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_14.csv.monitor.csv
deleted file mode 100644
index 5a49d38..0000000
--- a/logs/Freeway-GNN-training/monitor_14.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.2835705, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_15.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_15.csv.monitor.csv
deleted file mode 100644
index f4f1b16..0000000
--- a/logs/Freeway-GNN-training/monitor_15.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3964603, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_16.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_16.csv.monitor.csv
deleted file mode 100644
index 980a4ea..0000000
--- a/logs/Freeway-GNN-training/monitor_16.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3818138, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_17.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_17.csv.monitor.csv
deleted file mode 100644
index b32b04c..0000000
--- a/logs/Freeway-GNN-training/monitor_17.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.326564, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_18.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_18.csv.monitor.csv
deleted file mode 100644
index 0bd782c..0000000
--- a/logs/Freeway-GNN-training/monitor_18.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3939683, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_19.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_19.csv.monitor.csv
deleted file mode 100644
index 6549d6a..0000000
--- a/logs/Freeway-GNN-training/monitor_19.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.387127, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_2.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_2.csv.monitor.csv
deleted file mode 100644
index a49446f..0000000
--- a/logs/Freeway-GNN-training/monitor_2.csv.monitor.csv
+++ /dev/null
@@ -1,43 +0,0 @@
-<<<<<<< HEAD
-#{"t_start": 1721061754.133406, "env_id": "None"}
-r,l,t
--1500.0,3000,231.712129
--1500.0,3000,435.902628
--1500.0,3000,462.388904
--1500.0,3000,712.984182
--270.0,3000,914.873974
--1220.0,3000,948.051451
--1360.0,3000,1180.868708
-210.0,3000,1383.53507
--360.0,3000,1411.814341
--660.0,3000,1651.982467
--940.0,3000,1837.886363
--380.0,3000,1864.097823
--940.0,3000,2062.317057
--380.0,3000,2260.248708
--1220.0,3000,2289.631779
--620.0,3000,2498.089565
--1500.0,3000,2691.431883
-120.0,3000,2722.778334
-210.0,3000,2979.548341
--1500.0,3000,3162.390131
--940.0,3000,3190.008693
--1500.0,3000,3391.088196
--1500.0,3000,3595.079236
--1020.0,3000,3619.817687
--680.0,3000,3854.844826
--1500.0,3000,4069.850832
--360.0,3000,4097.707555
--1220.0,3000,4319.13185
--660.0,3000,4487.213594
--660.0,3000,4510.730657
--940.0,3000,4747.323802
--940.0,3000,4930.832289
--1220.0,3000,4961.178454
--940.0,3000,5214.063943
--660.0,3000,5384.867368
-1020.0,3000,5407.479188
-=======
-#{"t_start": 1721027785.404569, "env_id": "None"}
-r,l,t
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
diff --git a/logs/Freeway-GNN-training/monitor_20.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_20.csv.monitor.csv
deleted file mode 100644
index 56c01df..0000000
--- a/logs/Freeway-GNN-training/monitor_20.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.2845752, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_21.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_21.csv.monitor.csv
deleted file mode 100644
index 51e3b2c..0000000
--- a/logs/Freeway-GNN-training/monitor_21.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3603427, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_22.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_22.csv.monitor.csv
deleted file mode 100644
index 6c2f5ad..0000000
--- a/logs/Freeway-GNN-training/monitor_22.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3834717, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_23.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_23.csv.monitor.csv
deleted file mode 100644
index e7a15c1..0000000
--- a/logs/Freeway-GNN-training/monitor_23.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3498402, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_24.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_24.csv.monitor.csv
deleted file mode 100644
index 307f135..0000000
--- a/logs/Freeway-GNN-training/monitor_24.csv.monitor.csv
+++ /dev/null
@@ -1,6 +0,0 @@
-<<<<<<< HEAD
-#{"t_start": 1720999897.987811, "env_id": "None"}
-=======
-#{"t_start": 1721027785.405881, "env_id": "None"}
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_25.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_25.csv.monitor.csv
deleted file mode 100644
index c4f9c1e..0000000
--- a/logs/Freeway-GNN-training/monitor_25.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3785017, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_26.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_26.csv.monitor.csv
deleted file mode 100644
index 8db1d47..0000000
--- a/logs/Freeway-GNN-training/monitor_26.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3901594, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_27.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_27.csv.monitor.csv
deleted file mode 100644
index ad42293..0000000
--- a/logs/Freeway-GNN-training/monitor_27.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3937159, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_28.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_28.csv.monitor.csv
deleted file mode 100644
index bb38dc6..0000000
--- a/logs/Freeway-GNN-training/monitor_28.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3766198, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_29.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_29.csv.monitor.csv
deleted file mode 100644
index fbef4a5..0000000
--- a/logs/Freeway-GNN-training/monitor_29.csv.monitor.csv
+++ /dev/null
@@ -1,6 +0,0 @@
-<<<<<<< HEAD
-#{"t_start": 1720999897.99036, "env_id": "None"}
-=======
-#{"t_start": 1721027785.3984606, "env_id": "None"}
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_3.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_3.csv.monitor.csv
deleted file mode 100644
index 9fec825..0000000
--- a/logs/Freeway-GNN-training/monitor_3.csv.monitor.csv
+++ /dev/null
@@ -1,6 +0,0 @@
-<<<<<<< HEAD
-#{"t_start": 1721028805.740145, "env_id": "None"}
-=======
-#{"t_start": 1721027785.4053879, "env_id": "None"}
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_30.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_30.csv.monitor.csv
deleted file mode 100644
index e3bae1f..0000000
--- a/logs/Freeway-GNN-training/monitor_30.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.3891506, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_31.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_31.csv.monitor.csv
deleted file mode 100644
index 08459be..0000000
--- a/logs/Freeway-GNN-training/monitor_31.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.4105062, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_4.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_4.csv.monitor.csv
deleted file mode 100644
index e9bd79f..0000000
--- a/logs/Freeway-GNN-training/monitor_4.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.39271, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_5.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_5.csv.monitor.csv
deleted file mode 100644
index 6cfd118..0000000
--- a/logs/Freeway-GNN-training/monitor_5.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.2461398, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_6.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_6.csv.monitor.csv
deleted file mode 100644
index 19ef824..0000000
--- a/logs/Freeway-GNN-training/monitor_6.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.396688, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_7.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_7.csv.monitor.csv
deleted file mode 100644
index 5a456da..0000000
--- a/logs/Freeway-GNN-training/monitor_7.csv.monitor.csv
+++ /dev/null
@@ -1,6 +0,0 @@
-<<<<<<< HEAD
-#{"t_start": 1721027935.6454458, "env_id": "None"}
-=======
-#{"t_start": 1721027785.4095068, "env_id": "None"}
->>>>>>> f4b09ff18e8df98f9e304ab8fef5654d59756602
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_8.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_8.csv.monitor.csv
deleted file mode 100644
index 8476fc1..0000000
--- a/logs/Freeway-GNN-training/monitor_8.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.392467, "env_id": "None"}
-r,l,t
diff --git a/logs/Freeway-GNN-training/monitor_9.csv.monitor.csv b/logs/Freeway-GNN-training/monitor_9.csv.monitor.csv
deleted file mode 100644
index 4bfd9e1..0000000
--- a/logs/Freeway-GNN-training/monitor_9.csv.monitor.csv
+++ /dev/null
@@ -1,2 +0,0 @@
-#{"t_start": 1721027785.4230204, "env_id": "None"}
-r,l,t
diff --git a/ppo_custom_heterognn_Freeway.zip b/ppo_custom_heterognn_Freeway.zip
index 2ab5bea..4df678f 100644
Binary files a/ppo_custom_heterognn_Freeway.zip and b/ppo_custom_heterognn_Freeway.zip differ
diff --git a/ppo_pacman_pixel.zip b/ppo_pacman_pixel.zip
index d9eb022..deaa2cb 100644
Binary files a/ppo_pacman_pixel.zip and b/ppo_pacman_pixel.zip differ
diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
index 45c0c79..b55eb0d 120000
--- a/wandb/debug-internal.log
+++ b/wandb/debug-internal.log
@@ -1 +1 @@
-run-20240729_191107-3eokwam7/logs/debug-internal.log
\ No newline at end of file
+run-20240731_125752-guswvtwa/logs/debug-internal.log
\ No newline at end of file
diff --git a/wandb/debug.log b/wandb/debug.log
index a5e6cab..4e6b43c 120000
--- a/wandb/debug.log
+++ b/wandb/debug.log
@@ -1 +1 @@
-run-20240729_191107-3eokwam7/logs/debug.log
\ No newline at end of file
+run-20240731_125752-guswvtwa/logs/debug.log
\ No newline at end of file
diff --git a/wandb/latest-run b/wandb/latest-run
deleted file mode 100644
index 043386e..0000000
--- a/wandb/latest-run
+++ /dev/null
@@ -1 +0,0 @@
-run-20240715_125454-7cw9smqu
\ No newline at end of file
diff --git a/wandb/latest-run b/wandb/latest-run
new file mode 120000
index 0000000..e2aaded
--- /dev/null
+++ b/wandb/latest-run
@@ -0,0 +1 @@
+run-20240731_125752-guswvtwa
\ No newline at end of file
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml b/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml
new file mode 100644
index 0000000..2d5ad15
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml
@@ -0,0 +1,103 @@
+name: games
+channels:
+  - http://conda.anaconda.org/gurobi
+  - apple
+  - conda-forge
+  - defaults
+dependencies:
+  - bzip2=1.0.8=h93a5062_5
+  - ca-certificates=2024.2.2=hf0a4a13_0
+  - libffi=3.4.2=h3422bc3_5
+  - libsqlite=3.45.3=h091b4b1_0
+  - libzlib=1.2.13=h53f4e23_5
+  - ncurses=6.5=hb89a1cb_0
+  - openssl=3.3.0=hfb2fe0b_3
+  - pip=23.3.1=pyhd8ed1ab_0
+  - python=3.10.14=h2469fbe_0_cpython
+  - readline=8.2=h92ec313_1
+  - setuptools=68.2.2=pyhd8ed1ab_0
+  - tk=8.6.13=h5083fa2_1
+  - wheel=0.42.0=pyhd8ed1ab_0
+  - xz=5.2.6=h57fd34a_0
+  - pip:
+      - absl-py==2.1.0
+      - aiohttp==3.9.5
+      - aiosignal==1.3.1
+      - ale-py==0.8.1
+      - async-timeout==4.0.3
+      - atari-py==0.2.5
+      - attrs==23.2.0
+      - autorom==0.4.2
+      - autorom-accept-rom-license==0.6.1
+      - certifi==2024.2.2
+      - charset-normalizer==3.3.2
+      - click==8.1.7
+      - cloudpickle==3.0.0
+      - contourpy==1.2.1
+      - cycler==0.12.1
+      - docker-pycreds==0.4.0
+      - farama-notifications==0.0.4
+      - filelock==3.14.0
+      - fonttools==4.52.4
+      - frozenlist==1.4.1
+      - fsspec==2024.5.0
+      - gitdb==4.0.11
+      - gitpython==3.1.43
+      - grpcio==1.64.0
+      - gymnasium==0.29.1
+      - idna==3.7
+      - imageio==2.34.1
+      - importlib-resources==6.4.0
+      - jinja2==3.1.4
+      - joblib==1.4.2
+      - kiwisolver==1.4.5
+      - lazy-loader==0.4
+      - lightning==2.2.5
+      - lightning-utilities==0.11.2
+      - markdown==3.6
+      - markupsafe==2.1.5
+      - matplotlib==3.9.0
+      - mpmath==1.3.0
+      - multidict==6.0.5
+      - networkx==3.3
+      - numpy==1.26.4
+      - opencv-python==4.10.0.84
+      - packaging==24.0
+      - pandas==2.2.2
+      - pillow==10.3.0
+      - platformdirs==4.2.2
+      - protobuf==4.25.3
+      - psutil==5.9.8
+      - pygame==2.5.2
+      - pyparsing==3.1.2
+      - python-dateutil==2.9.0.post0
+      - pytorch-lightning==2.2.5
+      - pytz==2024.1
+      - pyyaml==6.0.1
+      - requests==2.32.2
+      - sb3-contrib==2.3.0
+      - scikit-image==0.23.2
+      - scikit-learn==1.5.0
+      - scipy==1.13.1
+      - sentry-sdk==2.3.1
+      - setproctitle==1.3.3
+      - shimmy==0.2.1
+      - six==1.16.0
+      - smmap==5.0.1
+      - stable-baselines3==2.3.2
+      - sympy==1.12
+      - tensorboard==2.16.2
+      - tensorboard-data-server==0.7.2
+      - threadpoolctl==3.5.0
+      - tifffile==2024.5.22
+      - torch==2.3.0
+      - torch-geometric==2.5.3
+      - torchmetrics==1.4.0.post0
+      - tqdm==4.66.4
+      - typing-extensions==4.12.0
+      - tzdata==2024.1
+      - urllib3==2.2.1
+      - wandb==0.17.0
+      - werkzeug==3.0.3
+      - yarl==1.9.4
+prefix: /Users/rishubbhatia/miniforge3/envs/games
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/config.yaml b/wandb/run-20240729_231335-y13kgdr9/files/config.yaml
new file mode 100644
index 0000000..40ace60
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/config.yaml
@@ -0,0 +1,217 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    python_version: 3.10.14
+    cli_version: 0.17.0
+    framework: torch
+    is_jupyter_run: false
+    is_kaggle_kernel: false
+    start_time: 1722287615
+    t:
+      1:
+      - 1
+      - 55
+      - 77
+      2:
+      - 1
+      - 55
+      - 77
+      3:
+      - 22
+      - 23
+      - 24
+      - 34
+      - 35
+      4: 3.10.14
+      5: 0.17.0
+      8:
+      - 4
+      - 5
+      13: darwin-arm64
+algo:
+  desc: null
+  value: PPO
+policy_class:
+  desc: null
+  value: <class 'stable_baselines3.common.policies.ActorCriticPolicy'>
+device:
+  desc: null
+  value: cpu
+verbose:
+  desc: null
+  value: 2
+policy_kwargs:
+  desc: null
+  value: '{''features_extractor_class'': <class ''games.model.policy.CustomHeteroGNN''>,
+    ''features_extractor_kwargs'': {''features_dim'': 64, ''hidden_size'': 64, ''num_layer'':
+    2, ''obj_type_id'': ''obj'', ''arity_dict'': {''ChickenOnLane'': 2, ''CarOnLane'':
+    2, ''LaneNextToLane'': 2}, ''game'': ''freeway''}}'
+num_timesteps:
+  desc: null
+  value: 0
+_total_timesteps:
+  desc: null
+  value: 1000000
+_num_timesteps_at_start:
+  desc: null
+  value: 0
+seed:
+  desc: null
+  value: None
+action_noise:
+  desc: null
+  value: None
+start_time:
+  desc: null
+  value: 1722287626235599000
+learning_rate:
+  desc: null
+  value: 0.0003
+tensorboard_log:
+  desc: null
+  value: None
+_last_obs:
+  desc: null
+  value: "[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.\
+    \   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [105. 150.   0.   0.   0. \
+    \  1.   0.]\n  [ 58.  50.   2.   0.   0.   0.   1.]\n  [ 87. 150.   2.   0.  \
+    \ 0.   0.   1.]\n  [148.  50.   2.   0.   0.   0.   1.]\n  [121. 100.   1.   0.\
+    \   0.   0.   1.]\n  [178. 100.   1.   0.   0.   0.   1.]\n  [ 34.  50.   1. \
+    \  0.   0.   0.   1.]\n  [ 60.  50.   2.   0.   0.   0.   1.]\n  [111. 100.  \
+    \ 1.   0.   0.   0.   1.]\n  [112. 150.   1.   0.   0.   0.   1.]\n  [157. 150.\
+    \   2.   0.   0.   0.   1.]]]"
+_last_episode_starts:
+  desc: null
+  value: '[ True]'
+_last_original_obs:
+  desc: null
+  value: None
+_episode_num:
+  desc: null
+  value: 0
+use_sde:
+  desc: null
+  value: 'False'
+sde_sample_freq:
+  desc: null
+  value: -1
+_current_progress_remaining:
+  desc: null
+  value: 1.0
+_stats_window_size:
+  desc: null
+  value: 100
+ep_info_buffer:
+  desc: null
+  value: deque([], maxlen=100)
+ep_success_buffer:
+  desc: null
+  value: deque([], maxlen=100)
+_n_updates:
+  desc: null
+  value: 0
+_custom_logger:
+  desc: null
+  value: 'False'
+env:
+  desc: null
+  value: <stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x292587e20>
+_vec_normalize_env:
+  desc: null
+  value: None
+observation_space:
+  desc: null
+  value: Box(-inf, inf, (14, 7), float32)
+action_space:
+  desc: null
+  value: Discrete(3)
+n_envs:
+  desc: null
+  value: 1
+n_steps:
+  desc: null
+  value: 2048
+gamma:
+  desc: null
+  value: 0.99
+gae_lambda:
+  desc: null
+  value: 0.95
+ent_coef:
+  desc: null
+  value: 0.0
+vf_coef:
+  desc: null
+  value: 0.5
+max_grad_norm:
+  desc: null
+  value: 0.5
+rollout_buffer_class:
+  desc: null
+  value: <class 'stable_baselines3.common.buffers.RolloutBuffer'>
+rollout_buffer_kwargs:
+  desc: null
+  value: '{}'
+batch_size:
+  desc: null
+  value: 64
+n_epochs:
+  desc: null
+  value: 10
+clip_range:
+  desc: null
+  value: <function get_schedule_fn.<locals>.<lambda> at 0x17fea2440>
+clip_range_vf:
+  desc: null
+  value: None
+normalize_advantage:
+  desc: null
+  value: 'True'
+target_kl:
+  desc: null
+  value: None
+lr_schedule:
+  desc: null
+  value: <function get_schedule_fn.<locals>.<lambda> at 0x17fea36d0>
+rollout_buffer:
+  desc: null
+  value: <stable_baselines3.common.buffers.RolloutBuffer object at 0x17fecc190>
+policy:
+  desc: null
+  value: "ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model):\
+    \ HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n\
+    \        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128,\
+    \ 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n\
+    \    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7,\
+    \ 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14,\
+    \ 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n\
+    \    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7,\
+    \ 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14,\
+    \ 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net):\
+    \ Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n\
+    \      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n\
+    \      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64,\
+    \ out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64,\
+    \ out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net):\
+    \ Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64,\
+    \ out_features=1, bias=True)\n)"
+_logger:
+  desc: null
+  value: <stable_baselines3.common.logger.Logger object at 0x17ff5db10>
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/diff.patch b/wandb/run-20240729_231335-y13kgdr9/files/diff.patch
new file mode 100644
index 0000000..24dea74
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/diff.patch
@@ -0,0 +1,6624 @@
+diff --git a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc
+index 3dc7f23..8490ed7 100644
+Binary files a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc and b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc
+index 01b141a..51befcb 100644
+Binary files a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc and b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc
+index cf3f63c..6886c20 100644
+Binary files a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc and b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_gnn.cpython-310.pyc b/games/model/__pycache__/hetero_gnn.cpython-310.pyc
+index 7853617..6848b80 100644
+Binary files a/games/model/__pycache__/hetero_gnn.cpython-310.pyc and b/games/model/__pycache__/hetero_gnn.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc
+index 243e3b4..7b29371 100644
+Binary files a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc and b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/policy.cpython-310.pyc b/games/model/__pycache__/policy.cpython-310.pyc
+index 18a2c62..27f7950 100644
+Binary files a/games/model/__pycache__/policy.cpython-310.pyc and b/games/model/__pycache__/policy.cpython-310.pyc differ
+Submodule games/pacman contains modified content
+diff --git a/games/pacman/config.py b/games/pacman/config.py
+deleted file mode 100644
+index 73568ce..0000000
+--- a/games/pacman/config.py
++++ /dev/null
+@@ -1,40 +0,0 @@
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]+"/games/pacman"
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-# set up the colors 
+-ghostcolor = {}
+-ghostcolor[0] = (255, 0, 0, 255)
+-ghostcolor[1] = (255, 128, 255, 255)
+-ghostcolor[2] = (128, 255, 255, 255)
+-ghostcolor[3] = (255, 128, 0, 255)
+-ghostcolor[4] = (50, 50, 255, 255) # blue, vulnerable ghost
+-ghostcolor[5] = (255, 255, 255, 255) # white, flashing ghost
+\ No newline at end of file
+diff --git a/games/pacman/fruit.py b/games/pacman/fruit.py
+deleted file mode 100644
+index 51e2b1c..0000000
+--- a/games/pacman/fruit.py
++++ /dev/null
+@@ -1,112 +0,0 @@
+-from games.pacman.config import *
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        #self.thisGame = thisGame
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self, thisGame):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            #snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+diff --git a/games/pacman/game.py b/games/pacman/game.py
+deleted file mode 100644
+index 334c813..0000000
+--- a/games/pacman/game.py
++++ /dev/null
+@@ -1,214 +0,0 @@
+-from games.pacman.config import *
+-import os
+-import pygame
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self, thisFruit, player, screen):
+-        self.player = player
+-        self.screen = screen
+-        self.thisFruit = thisFruit
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 4 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self, thisLevel, tileID, tileIDImage, tileIDName):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 1 )
+-        thisLevel.LoadLevel( self.GetLevelNum(), tileID, tileIDImage , tileIDName)
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                #snd_extralife.play()
+-                self.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (self.thisFruit.imFruit[ self.thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self, thisLevel):
+-            
+-        possibleScreenX = self.player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = self.player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        self.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        self.thisLevel.LoadLevel( self.thisGame.GetLevelNum() )
+-        
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+\ No newline at end of file
+diff --git a/games/pacman/ghost.py b/games/pacman/ghost.py
+deleted file mode 100644
+index 628eb75..0000000
+--- a/games/pacman/ghost.py
++++ /dev/null
+@@ -1,174 +0,0 @@
+-from games.pacman.config import *
+-
+-class ghost ():
+-    def __init__ (self, ghostID, path, screen, player):
+-        self.player = player
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.ghostTimer = 0
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self, thisGame, tileID, tileIDImage, ghosts):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if self.player.x > self.x and self.player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif self.player.x < self.x and self.player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif self.player.x > self.x and self.player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif self.player.x < self.x and self.player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            self.screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            self.screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self, thisLevel, tileID):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay(thisLevel, tileID)
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = self.path.FindPath( (self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol) )
+-                self.FollowNextPathWay(thisLevel, tileID)
+-            
+-    def FollowNextPathWay(self, thisLevel, tileID, counter=0, max_recursion_depth=900):
+-        # Stop recursion if the maximum depth is reached
+-        if counter >= max_recursion_depth:
+-            return
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-            else:
+-                # this ghost has reached his destination!!
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1) 
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID['pellet'] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (randRow, randCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1)
+\ No newline at end of file
+diff --git a/games/pacman/images/blue.png b/games/pacman/images/blue.png
+deleted file mode 100644
+index c633636..0000000
+Binary files a/games/pacman/images/blue.png and /dev/null differ
+diff --git a/games/pacman/images/pacman.png b/games/pacman/images/pacman.png
+deleted file mode 100644
+index d005d4d..0000000
+Binary files a/games/pacman/images/pacman.png and /dev/null differ
+diff --git a/games/pacman/images/pink.png b/games/pacman/images/pink.png
+deleted file mode 100644
+index 9614f58..0000000
+Binary files a/games/pacman/images/pink.png and /dev/null differ
+diff --git a/games/pacman/images/play.png b/games/pacman/images/play.png
+deleted file mode 100644
+index 05842b1..0000000
+Binary files a/games/pacman/images/play.png and /dev/null differ
+diff --git a/games/pacman/images/red.png b/games/pacman/images/red.png
+deleted file mode 100644
+index 5c5ea84..0000000
+Binary files a/games/pacman/images/red.png and /dev/null differ
+diff --git a/games/pacman/images/win.png b/games/pacman/images/win.png
+deleted file mode 100644
+index 728ccdf..0000000
+Binary files a/games/pacman/images/win.png and /dev/null differ
+diff --git a/games/pacman/images/yellow.png b/games/pacman/images/yellow.png
+deleted file mode 100644
+index 8db5a0a..0000000
+Binary files a/games/pacman/images/yellow.png and /dev/null differ
+diff --git a/games/pacman/level.py b/games/pacman/level.py
+deleted file mode 100644
+index b5153ee..0000000
+--- a/games/pacman/level.py
++++ /dev/null
+@@ -1,471 +0,0 @@
+-from games.pacman.config import *
+-
+-class level ():
+-    
+-    def __init__ (self, game, player, ghosts, path, Fruit, screen):
+-        self.player = player
+-        self.ghosts = ghosts
+-        self.path = path
+-        self.thisFruit = Fruit
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        self.thisLevel = level
+-        # self.snd_pellet = snd_pellet
+-        # self.snd_powerpellet = snd_powerpellet
+-        self.map = {}
+-        self.thisGame = game
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        self.screen = screen
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > self.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > self.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = self.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-    def GetWallLocations(self):
+-        wallLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.IsWall(row, col):
+-                    wallLocations.append((row, col))
+-        return wallLocations 
+-    
+-    def GetPelletLocations(self):
+-        pelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 2:
+-                    pelletLocations.append((row*16, col*16))
+-        return pelletLocations
+-    
+-    def GetPowerPelletLocations(self):
+-        powerPelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 3:
+-                    powerPelletLocations.append((row, col))
+-        return powerPelletLocations
+-    
+-
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-        
+-    # check if player has hit a pellet, powerpellet or a wall
+-    def CheckIfHit(self, playerX, playerY, row, col, tileID):
+-        
+-            for iRow in range(row - 1, row + 2, 1):
+-                for iCol in range(col - 1, col + 2, 1):
+-                
+-                    if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                        # check the offending tile ID
+-                        result = self.GetMapTile(iRow, iCol)
+-            
+-                        if result == tileID:
+-                            return True   
+-                        elif result >= 100 and result <= 199:
+-                            return True
+-                        else:
+-                            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col, tileID):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = self.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_pellet[self.player.pelletSndNum].play()
+-                        self.player.pelletSndNum = 1 - self.player.pelletSndNum
+-                        
+-                        self.pellets -= 1
+-                        
+-                        self.thisGame.AddToScore(10)
+-                        
+-                        if self.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            self.thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_powerpellet.play()
+-                        
+-                        self.thisGame.AddToScore(100)
+-                        self.thisGame.ghostValue = 200
+-                        
+-                        self.thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if self.ghosts[i].state == 1:
+-                                self.ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, self.thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if self.thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    self.player.x = i * 16
+-                                    
+-                                    if self.player.velX > 0:
+-                                        self.player.x += 16
+-                                    else:
+-                                        self.player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, self.thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if self.thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    self.player.y = i * 16
+-                                    
+-                                    if self.player.velY > 0:
+-                                        self.player.y += 16
+-                                    else:
+-                                        self.player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self, tileID):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self,  tileID):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if self.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if self.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self, tileID, tileIDImage):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, self.thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, self.thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = self.thisGame.screenNearestTilePos[0] + row
+-                actualCol = self.thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        self.screen.blit (self.thisGame.imLogo, (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                        self.screen.blit(self.thisGame.imHiscores,(col*16-self.thisGame.screenPixelOffset[0],row*16-self.thisGame.screenPixelOffset[1]))
+-                    
+-              
+-                    else:
+-                        self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-    
+-    
+-    def GetCrossRef(self, tileIDName, tileID, tileIDImage):
+-        for key, value in tileIDName.items():
+-            thisID = key
+-            if thisID not in NO_GIF_TILES:
+-                tileIDImage[thisID] = pygame.image.load(os.path.join(SCRIPT_PATH, "res", "tiles", value + ".gif")).convert()
+-            else:
+-                tileIDImage[thisID] = pygame.Surface((16, 16))
+-
+-            # Change colors in tileIDImage to match maze colors
+-            for y in range(16):
+-                for x in range(16):
+-                    current_color = tileIDImage[thisID].get_at((x, y))
+-                    if current_color == (255, 206, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeLightColor)
+-                    elif current_color == (132, 0, 132, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.fillColor)
+-                    elif current_color == (255, 0, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeShadowColor)
+-                    elif current_color == (128, 0, 128, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.pelletColor)
+-
+-
+-
+-    def LoadLevel (self, levelNum, tileID, tileIDImage, tileIDName):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    self.thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            self.player.homeX = k * 16
+-                            self.player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the self.ghosts
+-                            
+-                            self.ghosts[thisID - 10].homeX = k * 16
+-                            self.ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        self.GetCrossRef(tileIDName, tileID, tileIDImage)
+-
+-        # load map into the pathfinder object
+-        self.path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, self.path.size[0], 1):
+-            for col in range(0, self.path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    self.path.SetType( row, col, 1 )
+-                else:
+-                    self.path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart(tileID)
+-        
+-    def Restart (self, tileID):
+-        
+-        for i in range(0, 4, 1):
+-            # move self.ghosts back to home
+-
+-            self.ghosts[i].x = self.ghosts[i].homeX
+-            self.ghosts[i].y = self.ghosts[i].homeY
+-            self.ghosts[i].velX = 0
+-            self.ghosts[i].velY = 0
+-            self.ghosts[i].state = 1
+-            self.ghosts[i].speed = 1
+-            self.ghosts[i].Move(self, tileID)
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            self.ghosts[i].currentPath = self.path.FindPath( (self.ghosts[i].nearestRow, self.ghosts[i].nearestCol), (randRow, randCol) )
+-            self.ghosts[i].FollowNextPathWay(self, tileID)
+-            
+-        self.thisFruit.active = False
+-            
+-        self.thisGame.fruitTimer = 0
+-
+-        self.player.x = self.player.homeX
+-        self.player.y = self.player.homeY
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        self.player.animFrame = 3
+-
+-
+diff --git a/games/pacman/pacman.py b/games/pacman/pacman.py
+deleted file mode 100644
+index 70436f3..0000000
+--- a/games/pacman/pacman.py
++++ /dev/null
+@@ -1,686 +0,0 @@
+-import random
+-import pygame
+-import numpy as np
+-from pygame.math import Vector2
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-        # create a 2d grid numpy array of 20x20
+-
+-
+-
+-    
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-        self.ghost_eating = False
+-        self.position = Vector2(x, y)  # Current position as a vector
+-        self.goal = Vector2()  # Goal position initialized to zero vector
+-        self.directions = {
+-            'up': Vector2(0, -1),
+-            'down': Vector2(0, 1),
+-            'left': Vector2(-1, 0),
+-            'right': Vector2(1, 0)
+-        }
+-
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-   
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-    
+-
+-
+-class Ghost(Player):
+-    """
+-    Class to handle ghosts, inheriting from Player.
+-    """
+-    def __init__(self, x, y, filename, game):
+-        super().__init__(x, y, filename)
+-        self.game = game
+-
+-    def update_behavior(self, pacman):
+-        self.mode = "flee" if pacman.ghost_eating else "chase"
+-
+-    def move(self, pacman):
+-        self.update_behavior(pacman)
+-        direction = self.chase_pacman() if self.mode == "chase" else self.run_away_from_pacman()
+-        if direction:
+-            movement = self.calculate_movement(direction)
+-            self.change_speed(*movement)
+-
+-    def chase_pacman(self):
+-        return self.goal_direction(self.game.game_map)
+-
+-    def run_away_from_pacman(self):
+-        furthest_point = self.find_furthest_point()
+-        self.set_goal(*furthest_point)
+-        return self.goal_direction(self.game.game_map)
+-
+-    def find_furthest_point(self):
+-        max_distance = 0
+-        furthest_point = (self.rect.x, self.rect.y)
+-        for y in range(self.game.path_finder.size[0]):
+-            for x in range(self.game.path_finder.size[1]):
+-                if self.game.game_map[y][x] == 0:
+-                    distance = (Vector2(x, y) - self.position).length_squared()
+-                    if distance > max_distance:
+-                        max_distance = distance
+-                        furthest_point = (x, y)
+-        return furthest_point
+-
+-    def goal_direction(self, game_map):
+-        TILEWIDTH = 30
+-        distances = []
+-        directions = list(self.directions.keys())
+-        for direction in directions:
+-            next_position = self.position + self.directions[direction] * TILEWIDTH
+-            if game_map[int(next_position.y // TILEWIDTH)][int(next_position.x // TILEWIDTH)] == 1:
+-                distances.append(float('inf'))
+-            else:
+-                vec = next_position - self.goal
+-                distances.append(vec.length_squared())
+-        if min(distances) == float('inf'):
+-            return None
+-        else:
+-            index = distances.index(min(distances))
+-            return directions[index]
+-
+-    def calculate_movement(self, direction):
+-        movement_map = {
+-            'up': (0, -30),
+-            'down': (0, 30),
+-            'left': (-30, 0),
+-         'right': (30, 0)
+-        }
+-        return movement_map.get(direction, (0, 0)) 
+-    
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.cell_size = 30
+-        self.grid_width = 20
+-        self.grid_height = 20
+-        #self.path_finder = path_finder()
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-       
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        self.block_list = pygame.sprite.RenderPlain()
+-        self.ghost_list = pygame.sprite.RenderPlain()
+-        self.pacman_collide = pygame.sprite.RenderPlain()
+-        self.wall_list = self.setup_walls()
+-
+-        self.gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        self.pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(self.pacman)
+-        self.pacman_collide.add(self.pacman)
+-
+-        self.ghost_two = Ghost(w, b_h, 'images/red.png', self)
+-        self.ghost_list.add(self.ghost_two)
+-        self.all_sprites_list.add(self.ghost_two)
+-
+-        self.ghost_one = Ghost(w, m_h, 'images/pink.png', self)
+-        self.ghost_list.add(self.ghost_one)
+-        self.all_sprites_list.add(self.ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png',self)
+-        self.ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png',self)
+-        self.ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-        grid = [[0 for _ in range(19)] for _ in range(19)]
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, self.wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, self.pacman_collide, False)
+-                    if b_collide:
+-                        grid[row][column] = 1
+-
+-                        continue
+-
+-                    elif p_collide:
+-                        grid[row][column] = 0
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        grid[row][column] = 0
+-                        self.block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # create new grid which is 20x20 with edges as 1 from grid
+-        
+-        new_grid = [[1 if i == 0 or i == 19 or j == 0 or j == 19 else grid[i-1][j-1] for j in range(20)] for i in range(20)] 
+-        self.game_map = new_grid
+-        self.path_finder.ResizeMap(20, 20)
+-        self.update_path_finder_with_walls(new_grid)
+-        blocks = list(self.block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-        self.power_pellet_list = pygame.sprite.RenderPlain()
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            self.power_pellet_list.add(power_pellet)
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        self.bll = len(self.block_list)
+-
+-
+-   
+-
+-    def update_path_finder_with_walls(self, grid):
+-        for i in range(len(grid[0])):
+-            for j in range(len(grid[1])):
+-                self.path_finder.SetType(i,j, grid[i][j])
+-
+-
+-
+-    def get_maze_size(self):
+-        max_width = 0
+-        max_height = 0
+-
+-        for wall in self.walls:
+-            x, y, width, height = wall
+-            # Calculate the furthest extents of the walls
+-            max_width = max(max_width, x + width)
+-            max_height = max(max_height, y + height)
+-
+-        return max_width, max_height
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate 
+-    
+-
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-
+-
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-       
+-
+-        
+-                
+-       
+-
+-        # Get the unique row indices
+-
+-        
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, -30)
+-
+-            self.pacman.update(self.wall_list, self.gate) 
+-
+-            # Assuming new_grid is your grid
+-            
+-
+-            # Check if the two grids are the same
+-            # print(f"new_grid_np: {new_grid_np}")
+-            # print(f"path_finder_grid: {path_finder_grid}")
+-            # print(f"Are the grids equal? {are_grids_equal}")
+-        # whic
+-            #self.ghost_one.move(self.pacman)
+-            self.ghost_two.move(self.pacman)
+-            # ghost_three.move(pacman)
+-            # ghost_four.move(pacman)
+-
+-            # ghost_one.update(wall_list, None)
+-            self.ghost_two.update(self.wall_list, None)
+-            print(f"Ghost Two position: {self.ghost_two.rect.x}, {self.ghost_two.rect.y}")
+-            print("Is Ghost Two in all_sprites_list?", self.ghost_two in self.all_sprites_list)
+-            print("Is Ghost Two in ghost_list?", self.ghost_two in self.ghost_list)
+-            # ghost_three.update(wall_list, None)
+-            # ghost_four.update(wall_list, None)
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(self.pacman, self.block_list, True) 
+-            power_pellets_hit_list = pygame.sprite.spritecollide(self.pacman, self.power_pellet_list, True)
+-            # check if pacman hits any power pellet
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            self.wall_list.draw(self.screen)
+-            self.gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            self.ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(self.bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == self.bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(self.pacman, self.ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_env.py b/games/pacman/pacman_env.py
+deleted file mode 100644
+index e185f02..0000000
+--- a/games/pacman/pacman_env.py
++++ /dev/null
+@@ -1,370 +0,0 @@
+-import gym
+-from gym import spaces
+-import pygame
+-import numpy as np
+-import os
+-import sys
+-from pygame.locals import *
+-import time
+-# Import your game modules
+-from games.pacman.player import pacman
+-from games.pacman.ghost import ghost
+-from games.pacman.path import path_finder
+-from games.pacman.level import level
+-from games.pacman.game import game
+-from games.pacman.fruit import fruit
+-from games.pacman.config import *
+-import networkx as nx
+-from games.encoder.GraphEncoder import GraphConverter
+-
+-class PacmanEnv(gym.Env):
+-    metadata = {'render.modes': ['human', 'rgb_array']}
+-    def __init__(self):
+-        super(PacmanEnv, self).__init__()
+-
+-        # Action space (4 directions)
+-        self.action_space = spaces.Discrete(4)  # [Up, Down, Left, Right]
+-
+-        # Observation space (Assuming a RGB image of the screen)
+-        self.observation_space = spaces.Box(low=0, high=255,
+-                                            shape=(self.window_height, self.window_width, 3 * self.frame_stack),
+-                                            dtype=np.uint8)
+-        # Initialize the game
+-        pygame.init()
+-        self.window = pygame.display.set_mode((1, 1))
+-        img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-        pygame.display.set_caption("Pacman")
+-        self.screen = pygame.display.get_surface()
+-        self.tileID = {}
+-        self.tileIDName = {}
+-        self.tileIDImage = {}
+-        self.NO_GIF_TILES = set()
+-        self.path = path_finder()
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen)
+-        self.frame_stack = 4 
+-        self.window_width = 336
+-        self.window_height = 400
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        self.load_resources()
+-
+-
+-    def load_resources(self):
+-        lineNum = 0
+-        self.SCRIPT_PATH = os.path.dirname(__file__)
+-        res_path = os.path.join(self.SCRIPT_PATH, "res")
+-        # Load background images
+-        self.img_Background = pygame.image.load(os.path.join(res_path, "backgrounds", "1.gif")).convert()
+-        
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-
+-        # Load tile images and other assets by initializing the cross-reference data structures
+-          # Define this properly based on your game's requirements
+-
+-        # Assume crossref.txt has the mappings from tile ID to tile names and their associated images
+-        for i in f.readlines():
+-            # print " ========= Line " + str(lineNum) + " ============ "
+-            while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-            while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-            str_splitBySpace = i.split(' ')
+-            
+-            j = str_splitBySpace[0]
+-                
+-            if (j == "'" or j == "" or j == "#"):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-            else:
+-                # print str(wordNum) + ". " + j
+-                useLine = True
+-            
+-            if useLine == True:
+-                self.tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-                self.tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-                
+-                thisID = int(str_splitBySpace[0])
+-                if not thisID in NO_GIF_TILES:
+-                    self.tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-                else:
+-                        self.tileIDImage[ thisID ] = pygame.Surface((16,16))
+-                
+-                # change colors in tileIDImage to match maze colors
+-                for y in range(0, 16, 1):
+-                    for x in range(0, 16, 1):
+-                    
+-                        if self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                            # wall edge
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeLightColor )
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                            # wall fill
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.fillColor ) 
+-
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeShadowColor )   
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.pelletColor )   
+-                    
+-                # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-            lineNum += 1
+-    
+-    def reset(self):
+-        # Reset the game
+-                # Load resources
+-        #self.load_resources()
+-        
+-        # Game components
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen) 
+-        self.load_resources()
+-        #self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.clock = pygame.time.Clock()
+-        self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.level.LoadLevel( self.game.GetLevelNum(), self.tileID, self.tileIDImage, self.tileIDName )
+-        self.window = pygame.display.set_mode( self.game.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def step(self, action):
+-        reward = 0
+-        done = False
+-        # Map action to game controls
+-        #print(self.game.mode)
+-        if self.game.mode == 1:
+-            if action == 0:
+-                if not self.level.CheckIfHitWall(self.player.x + self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = self.player.speed
+-                    self.player.velY = 0
+-                    
+-            elif action == 1:
+-                if not self.level.CheckIfHitWall(self.player.x - self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = -self.player.speed
+-                    self.player.velY = 0
+-                
+-            elif action == 2:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.speed, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = 0
+-                    self.player.velY = self.player.speed
+-                
+-            elif action == 3:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.speed, self.player.nearestRow, self.player.nearestCol):
+-                    self.player.velX = 0
+-                    self.player.velY = -self.player.speed
+-            # Game logic
+-            
+-            score = self.game.score
+-            self.game.modeTimer += 1
+-            self.player.Move(self.game, self.level, self.ghosts, self.fruit, self.tileID)
+-            for ghost in self.ghosts.values():
+-                ghost.Move(self.level, self.tileID)
+-           
+-            new_score = self.game.score
+-            reward = new_score - score  # Reward for eating pellets
+-            #reward = eaten_pellets * 10  # Reward for eating pellets
+-
+-        elif self.game.mode == 2:
+-                reward = -100
+-                self.game.modeTimer += 1
+-        
+-                if self.game.modeTimer == 90:
+-                    self.level.Restart(self.tileID)
+-                #self.level.Restart(self.tileID)
+-                self.game.lives -= 1
+-                if self.game.lives == -1:
+-                    done = True
+-            
+-        elif self.game.mode == 5:
+-            reward = 100
+-            self.game.mode = 1
+-        
+-        elif self.game.mode == 6:
+-            reward = 1000
+-            done = True
+-
+-
+-        info = self.get_graph_data()  # Additional data, not used now but required by Gym's API
+-
+-            # Get observation
+-        observation = self._get_observation()
+-
+-        return observation, reward, done, info
+-
+-      # Return initial state
+-    def _get_observation(self):
+-        # You can also choose to return other representations of the game state
+-        frame = pygame.surfarray.array3d(pygame.display.get_surface())
+-        frame = frame.transpose((1, 0, 2))  # Correct the shape to (height, width, channels)
+-        # Update frame buffer
+-        self.frame_buffer = np.roll(self.frame_buffer, -3, axis=2)
+-        self.frame_buffer[:, :, -3:] = frame
+-        return self.frame_buffer
+-
+-    
+-    def get_graph_data(self):
+-        # Initialize a NetworkX graph
+-        graph = nx.Graph()
+-
+-        # Define object features and add nodes
+-        pacman_features = [self.player.x, self.player.y, self.player.velX, self.player.velY, 1, 0, 0, 0]
+-        graph.add_node("pacman", type="object", features=pacman_features)
+-
+-        ghost_features = [[ghost.x, ghost.y, ghost.velX, ghost.velY,0,1,0,0] for ghost in self.ghosts.values()]
+-        for i, features in enumerate(ghost_features):
+-            graph.add_node(f"ghost_{i}", type="object", features=features)
+-
+-        pellet_features = [[pellet[0], pellet[1],0,0,0,0,1,0] for pellet in self.level.GetPelletLocations()]
+-        for i, features in enumerate(pellet_features):
+-            graph.add_node(f"pellet_{i}", type="object", features=features)
+-
+-        power_pellet_features = [[pellet[0], pellet[1],0,0,0,0,0,1] for pellet in self.level.GetPowerPelletLocations()]
+-        for i, features in enumerate(power_pellet_features):
+-            graph.add_node(f"power_pellet_{i}", type="object", features=features)
+-
+-        # Combine object positions
+-        object_positions = {
+-            "pacman": pacman_features[:2],
+-        }
+-        for i, ghost in enumerate(self.ghosts.values()):
+-            object_positions[f"ghost_{i}"] = ghost_features[i][:2]
+-        for i, pellet in enumerate(self.level.GetPelletLocations()):
+-            object_positions[f"pellet_{i}"] = pellet_features[i][:2]
+-        for i, power_pellet in enumerate(self.level.GetPowerPelletLocations()):
+-            object_positions[f"power_pellet_{i}"] = power_pellet_features[i][:2]
+-
+-        # Proximity threshold for creating atoms
+-        #proximity_threshold = self.proximity_threshold
+-
+-        # Create atom nodes and edges based on proximity
+-        atom_index = len(object_positions)  # Start indexing atoms after all objects
+-
+-        # Determine wall proximity around Pac-Man
+-        walls = {
+-            'up': self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.velY, self.player.y - 1, self.player.x),
+-            'down': self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.velY, self.player.y + 1, self.player.x),
+-            'left': self.level.CheckIfHitWall(self.player.x - self.player.velX, self.player.y, self.player.y, self.player.x - 1),
+-            'right': self.level.CheckIfHitWall(self.player.x + self.player.velX, self.player.y, self.player.y, self.player.x + 1)
+-        }
+-
+-        standard_feature_vector_size = len(pacman_features)
+-        empty_feature_vector = [0] *(2* standard_feature_vector_size)
+-
+-        # Add wall direction atoms and edges for Pac-Man
+-        for direction, hit in walls.items():
+-            if hit:
+-                atom_node = f"Wall{direction.capitalize()}_{atom_index}"
+-                graph.add_node(atom_node, type="atom", features=empty_feature_vector, predicate=f"Wall{direction.capitalize()}")
+-                graph.add_edge("pacman", atom_node, position=0)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for ghosts
+-        for i, ghost_pos in enumerate(ghost_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(ghost_pos[:2]))
+-            direction = np.array(pacman_features[:2]) - np.array(ghost_pos[:2])
+-            
+-            atom_node_distance = f"Distance_Pacman_Ghost_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"ghost_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-            if pacman_features[0] == ghost_pos[0]:
+-                atom_node_same_row = f"SameRow_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_row, features=empty_feature_vector,type="atom", predicate="SameRow")
+-                graph.add_edge("pacman", atom_node_same_row, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_row, position=1)
+-                atom_index += 1
+-
+-            if pacman_features[1] == ghost_pos[1]:
+-                atom_node_same_column = f"SameColumn_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_column, features=empty_feature_vector, type="atom", predicate="SameColumn")
+-                graph.add_edge("pacman", atom_node_same_column, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_column, position=1)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for pellets
+-        for i, pellet_pos in enumerate(pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_Pellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance, features=empty_feature_vector,type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Add distance and direction atoms and edges for power pellets
+-        for i, power_pellet_pos in enumerate(power_pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(power_pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_PowerPellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"power_pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Create a GraphConverter object
+-        converter = GraphConverter()
+-
+-        # Convert the NetworkX graph to a PyG Data object
+-        data = converter.to_pyg_data(graph)
+-        return data
+-    
+-
+-    
+-    def render(self, mode='human'):
+-        self.screen.blit(self.img_Background, (0, 0))
+-        self.level.DrawMap(self.tileID, self.tileIDImage)
+-        
+-        if self.game.fruitScoreTimer > 0:
+-            if self.game.modeTimer % 2 == 0:
+-                self.game.DrawNumber (2500, self.fruit.x - self.game.screenPixelPos[0] - 16, self.fruit.y - self.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            self.ghosts[i].Draw(self.game,self.tileID, self.tileIDImage, self.ghosts)
+-        self.fruit.Draw(self.game)
+-        self.player.Draw(self.game)
+-        if mode == 'human':
+-            
+-            pygame.display.flip()
+-        elif mode == 'rgb_array':
+-            return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def close(self):
+-        pygame.quit()
+-
+-# Usage Example
+-if __name__ == "__main__":
+-    env = PacmanEnv()
+-    obs = env.reset()
+-    done = False
+-
+-    while not done:
+-        #env.render()  # Ensure the environment is rendered every loop
+-        action = env.action_space.sample()
+-        
+-        obs, reward, done, info = env.step(action)
+-        if reward<0:
+-            print("Ghost collision")
+-        #print(f"Action: {action}, Reward: {reward}")
+-        #time.sleep(0.1)  # Add a delay to make changes observable
+-
+-        if done:
+-            print("Game Over. Restarting...")
+-            obs = env.reset()
+-            done = False
+-            time.sleep(2)  # Pause before restarting
+-
+-    env.close()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_new.py b/games/pacman/pacman_new.py
+deleted file mode 100644
+index 1baea23..0000000
+--- a/games/pacman/pacman_new.py
++++ /dev/null
+@@ -1,1583 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self):
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 3 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                snd_extralife.play()
+-                thisGame.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (thisFruit.imFruit[ thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self):
+-            
+-        possibleScreenX = player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        thisGame.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-        
+-        player.velX = 0
+-        player.velY = 0
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    def draw (self):
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-            
+-                thisTile = self.GetType((row, col))
+-                screen.blit (tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+-class ghost ():
+-    def __init__ (self, ghostID):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if player.x > self.x and player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif player.x < self.x and player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif player.x > self.x and player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif player.x < self.x and player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay()
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                self.FollowNextPathWay()
+-            
+-    def FollowNextPathWay (self):
+-        
+-        # print "Ghost " + str(self.id) + " rem: " + self.currentPath
+-        
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-                    
+-            else:
+-                # this ghost has reached his destination!!
+-                
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                    self.FollowNextPathWay()
+-                
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-                    
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (randRow, randCol) )
+-                    self.FollowNextPathWay()
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-
+-class pacman ():
+-    
+-    def __init__ (self):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self):
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos()[0]+1, thisLevel.GetGhostBoxPos()[1]) )
+-                        ghosts[i].FollowNextPathWay()
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos()
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+-class level ():
+-    
+-    def __init__ (self):
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > thisLevel.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > thisLevel.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = thisLevel.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = thisLevel.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_pellet[player.pelletSndNum].play()
+-                        player.pelletSndNum = 1 - player.pelletSndNum
+-                        
+-                        thisLevel.pellets -= 1
+-                        
+-                        thisGame.AddToScore(10)
+-                        
+-                        if thisLevel.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_powerpellet.play()
+-                        
+-                        thisGame.AddToScore(100)
+-                        thisGame.ghostValue = 200
+-                        
+-                        thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if ghosts[i].state == 1:
+-                                ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    player.x = i * 16
+-                                    
+-                                    if player.velX > 0:
+-                                        player.x += 16
+-                                    else:
+-                                        player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    player.y = i * 16
+-                                    
+-                                    if player.velY > 0:
+-                                        player.y += 16
+-                                    else:
+-                                        player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if thisLevel.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if thisLevel.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = thisGame.screenNearestTilePos[0] + row
+-                actualCol = thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        screen.blit (thisGame.imLogo, (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                            screen.blit(thisGame.imHiscores,(col*16-thisGame.screenPixelOffset[0],row*16-thisGame.screenPixelOffset[1]))
+-                    
+-                    else:
+-                        screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-        
+-    def LoadLevel (self, levelNum):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            player.homeX = k * 16
+-                            player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the ghosts
+-                            
+-                            ghosts[thisID - 10].homeX = k * 16
+-                            ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        GetCrossRef()
+-
+-        # load map into the pathfinder object
+-        path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, path.size[0], 1):
+-            for col in range(0, path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    path.SetType( row, col, 1 )
+-                else:
+-                    path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart()
+-        
+-    def Restart (self):
+-        
+-        for i in range(0, 4, 1):
+-            # move ghosts back to home
+-
+-            ghosts[i].x = ghosts[i].homeX
+-            ghosts[i].y = ghosts[i].homeY
+-            ghosts[i].velX = 0
+-            ghosts[i].velY = 0
+-            ghosts[i].state = 1
+-            ghosts[i].speed = 1
+-            ghosts[i].Move()
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (randRow, randCol) )
+-            ghosts[i].FollowNextPathWay()
+-            
+-        thisFruit.active = False
+-            
+-        thisGame.fruitTimer = 0
+-
+-        player.x = player.homeX
+-        player.y = player.homeY
+-        player.velX = 0
+-        player.velY = 0
+-        
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        player.animFrame = 3
+-
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 3:
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame()
+-            
+-
+-    
+-#      _____________________________________________
+-# ___/  function: Get ID-Tilename Cross References  \______________________________________ 
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-
+-# create the pacman
+-player = pacman()
+-
+-# create a path_finder object
+-path = path_finder()
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i)
+-    
+-# create piece of fruit
+-thisFruit = fruit()
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-# create game and level objects and load first level
+-thisGame = game()
+-thisLevel = level()
+-thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move()
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move()
+-        thisFruit.Move()
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisLevel.Restart()
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen()
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap()
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw()
+-        thisFruit.Draw()
+-        player.Draw()
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+\ No newline at end of file
+diff --git a/games/pacman/pacman_old.py b/games/pacman/pacman_old.py
+deleted file mode 100644
+index fc711fe..0000000
+--- a/games/pacman/pacman_old.py
++++ /dev/null
+@@ -1,970 +0,0 @@
+-import pygame
+-import random
+-import numpy as np
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-
+-
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    
+-        
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-
+-
+-class Ghost(Player):
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor Function
+-        """
+-        super().__init__(x, y, filename)
+-        self.ghost_eating = False 
+-        self.goal = None
+-    """
+-    Class to handle ghosts
+-    """
+-    def flee_or_chase(self, player):
+-        """
+-        Determine if the ghost should flee from or chase the player
+-        :param player: the player character, Pacman
+-        """
+-        if player.ghost_eating:
+-            self.run_away_from_pacman(player)
+-        else:
+-            self.chase_pacman(player)
+-
+-    def run_away_from_pacman(self, player):
+-        """
+-        Set direction away from Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost moves in the opposite direction of Pacman
+-        self.change_x = -5 if dx > 0 else 5
+-        self.change_y = -5 if dy > 0 else 5
+-
+-    def chase_pacman(self, player):
+-        """
+-        Set direction towards Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost reduces the distance to Pacman
+-        self.change_x = 5 if dx > 0 else -5
+-        self.change_y = 5 if dy > 0 else -5
+-
+-    def ghost_change_speed(self, direction_list, ghost, turn, steps, l):
+-        """
+-        Change the speed of the ghost
+-        :param direction_list: 
+-        :type direction_list: 
+-        :param ghost: 
+-        :type ghost: 
+-        :param turn: 
+-        :type turn: 
+-        :param steps: 
+-        :type steps: 
+-        :param l: 
+-        :type l: 
+-        :return: 
+-        :rtype: 
+-        """
+-        try:
+-            z = direction_list[turn][2]
+-            if steps < z:
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps += 1
+-            else:
+-                if turn < l:
+-                    turn += 1
+-                elif ghost == 'ghost_four':
+-                    turn = 2
+-                else:
+-                    turn = 0
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps = 0
+-            return [turn, steps]
+-        except IndexError:
+-            return [0, 0]
+-
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-        self.ghost_one_directions = [
+-            [0, -30, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [-15, 0, 23],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 19],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 7],
+-            [0, 15, 3],
+-            [-15, 0, 19],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.ghost_two_directions = [
+-            [0, -15, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, -15, 15],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 7],
+-            [0, -15, 3],
+-            [15, 0, 15],
+-            [0, 15, 15],
+-            [-15, 0, 3],
+-            [0, 15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 5],
+-        ]
+-
+-        self.ghost_three_directions = [
+-            [30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 10],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 15],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, 15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [-15, 0, 11],
+-            [0, 15, 7],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 15],
+-            [15, 0, 15],
+-            [0, 15, 3],
+-            [-15, 0, 15],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 1],
+-        ]
+-
+-        self.ghost_four_directions = [
+-            [-30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 5],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 7],
+-            [0, 15, 15],
+-            [15, 0, 15],
+-            [0, -15, 3],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-        pl = len(self.ghost_one_directions) - 1
+-        bl = len(self.ghost_two_directions) - 1
+-        il = len(self.ghost_three_directions) - 1
+-        cl = len(self.ghost_four_directions) - 1
+-
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        block_list = pygame.sprite.RenderPlain()
+-        ghost_list = pygame.sprite.RenderPlain()
+-        pacman_collide = pygame.sprite.RenderPlain()
+-        wall_list = self.setup_walls()
+-
+-        gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(pacman)
+-        pacman_collide.add(pacman)
+-
+-        ghost_two = Ghost(w, b_h, 'images/red.png')
+-        ghost_list.add(ghost_two)
+-        self.all_sprites_list.add(ghost_two)
+-
+-        ghost_one = Ghost(w, m_h, 'images/pink.png')
+-        ghost_list.add(ghost_one)
+-        self.all_sprites_list.add(ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png')
+-        ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png')
+-        ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, pacman_collide, False)
+-                    if b_collide:
+-                        continue
+-                    elif p_collide:
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # Randomly select four blocks
+-        blocks = list(block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        bll = len(block_list)
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, -30)
+-
+-            pacman.update(wall_list, gate)
+-            returned = ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            p_turn = returned[0]
+-            p_steps = returned[1]
+-            ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            ghost_one.update(wall_list, False)
+-
+-            returned = ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            b_turn = returned[0]
+-            b_steps = returned[1]
+-            ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            ghost_two.update(wall_list, False)
+-
+-            returned = ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            i_turn = returned[0]
+-            i_steps = returned[1]
+-            ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            ghost_three.update(wall_list, False)
+-
+-            returned = ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            c_turn = returned[0]
+-            c_steps = returned[1]
+-            ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            ghost_four.update(wall_list, False)
+-
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(pacman, block_list, True) 
+-            # check if pacman hits any power pellet
+-            pellet_hit_list = pygame.sprite.spritecollide(pacman, self.power_pellets,True)
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            wall_list.draw(self.screen)
+-            gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(pacman, ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_test.py b/games/pacman/pacman_test.py
+deleted file mode 100644
+index dab7b16..0000000
+--- a/games/pacman/pacman_test.py
++++ /dev/null
+@@ -1,366 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-from player import pacman
+-from ghost import ghost
+-from path import path_finder
+-from level import level
+-from game import game
+-from fruit import fruit
+-from config import *
+-
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 4 :
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame(thisLevel, tileID, tileIDImage, tileIDName)
+-            
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-    
+-#      _____________________________
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-# create a path_finder object
+-
+-f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-# ANDY -- edit
+-#fileOutput = f.read()
+-#str_splitByLine = fileOutput.split('\n')
+-
+-lineNum = 0
+-useLine = False
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-
+-path = path_finder()
+-
+-# create pacman object
+-player = pacman(path, screen)
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i, path, screen, player)
+-    
+-# create piece of fruit
+-thisFruit = fruit() 
+-
+-
+-
+-
+-
+-# create game and level objects and load first level
+-thisGame = game(thisFruit, player, screen)
+-thisLevel = level( thisGame, player, ghosts, path, thisFruit, screen)
+-for i in f.readlines():
+-    # print " ========= Line " + str(lineNum) + " ============ "
+-    while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-    while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-    str_splitBySpace = i.split(' ')
+-    
+-    j = str_splitBySpace[0]
+-        
+-    if (j == "'" or j == "" or j == "#"):
+-        # comment / whitespace line
+-        # print " ignoring comment line.. "
+-        useLine = False
+-    else:
+-        # print str(wordNum) + ". " + j
+-        useLine = True
+-    
+-    if useLine == True:
+-        tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-        tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-        
+-        thisID = int(str_splitBySpace[0])
+-        if not thisID in NO_GIF_TILES:
+-            tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-        else:
+-                tileIDImage[ thisID ] = pygame.Surface((16,16))
+-        
+-        # change colors in tileIDImage to match maze colors
+-        for y in range(0, 16, 1):
+-            for x in range(0, 16, 1):
+-            
+-                if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                    # wall edge
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                    # wall fill
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-            
+-        # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-    lineNum += 1
+-thisLevel.LoadLevel( thisGame.GetLevelNum(), tileID, tileIDImage, tileIDName )
+-thisGame.StartNewGame( thisLevel, tileID, tileIDImage, tileIDName )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-print(tileID)
+-
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move(thisGame, thisLevel, ghosts, thisFruit, tileID)
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move(thisLevel, tileID)
+-        thisFruit.Move(thisGame)
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            # close the game
+-            #pygame.quit()
+-            thisLevel.Restart(tileID)
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        print("Game Over")
+-        running = False
+-        #pygame.quit()
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        print("Waiting to start")
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen(thisLevel)
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap(tileID, tileIDImage)
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw(thisGame, tileID, tileIDImage, ghosts)
+-        thisFruit.Draw(thisGame)
+-        player.Draw(thisGame)
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+-
+diff --git a/games/pacman/path.py b/games/pacman/path.py
+deleted file mode 100644
+index bd3d8a6..0000000
+--- a/games/pacman/path.py
++++ /dev/null
+@@ -1,238 +0,0 @@
+-from games.pacman.config import *
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self,):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    # def draw (self):
+-    #     for row in range(0, self.size[0], 1):
+-    #         for col in range(0, self.size[1], 1):
+-            
+-    #             thisTile = self.GetType((row, col))
+-    #             screen.blit (self.tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+\ No newline at end of file
+diff --git a/games/pacman/player.py b/games/pacman/player.py
+deleted file mode 100644
+index 6ddd81e..0000000
+--- a/games/pacman/player.py
++++ /dev/null
+@@ -1,153 +0,0 @@
+-import pygame 
+-import os
+-from games.pacman.config import SCRIPT_PATH
+-class pacman ():
+-    
+-    def __init__ (self, path, screen):
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self, thisGame, thisLevel, ghosts, thisFruit, tileID):   
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol, tileID)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        #snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = self.path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos(tileID)[0]+1, thisLevel.GetGhostBoxPos(tileID)[1]) )
+-                        ghosts[i].FollowNextPathWay(thisLevel, tileID)
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    #snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos(tileID)
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = self.path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        self.screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+\ No newline at end of file
+diff --git a/games/pacman/res/VeraMoBd.ttf b/games/pacman/res/VeraMoBd.ttf
+deleted file mode 100644
+index 9be6547..0000000
+Binary files a/games/pacman/res/VeraMoBd.ttf and /dev/null differ
+diff --git a/games/pacman/res/backgrounds/1.gif b/games/pacman/res/backgrounds/1.gif
+deleted file mode 100644
+index fddeb90..0000000
+Binary files a/games/pacman/res/backgrounds/1.gif and /dev/null differ
+diff --git a/games/pacman/res/crossref.txt b/games/pacman/res/crossref.txt
+deleted file mode 100644
+index bfb3780..0000000
+--- a/games/pacman/res/crossref.txt
++++ /dev/null
+@@ -1,68 +0,0 @@
+-'    ____                  ____             ____
+-'   / __/_ _____  ___ ____/ __/__________  / / /
+-'  _\ \/ // / _ \/ -_) __/\ \/ __/ __/ _ \/ / / 
+-' /___/\_,_/ .__/\__/_/ /___/\__/_/  \___/_/_/  
+-'         /_/                  game engine
+-'
+-' Cross-reference for tiles and sprites.
+-'
+-' Syntax for each line is:
+-'      [number] [tilename] [tile description]
+-' Ex.  5130 wirecornerul upper-left corner of wire path
+-'
+-' Tile numbers may go from 1-32767. (Tile 0 is empty space.)
+-' Tiles 9000-9999 are invisible during gameplay.
+-'
+-' Commands:
+-'      # tiles              < tile declarations start here
+-'      # sprites            < sprite descriptions start here
+-' __________________________________________________________
+-
+-
+-# tiles
+-
+-1 ghost-door wall of the ghost box
+-2 pellet a normal pellet (required)
+-3 pellet-power a power pellet (makes pac-man invincible)
+-4 start the starting position for pac-man
+-
+-10 ghost-blinky blinky
+-11 ghost-pinky pinky
+-12 ghost-inky inky
+-13 ghost-sue sue
+-
+-20 door-h horizontal door (flip to other side of maze)
+-21 door-v vertical door (flip to other side of maze)
+-22 showlogo causes the logo to be drawn
+-23 hiscores generate and draw a hi-score list
+-
+-100 wall-straight-horiz a horizontal wall
+-101 wall-straight-vert a vertical wall
+-
+-105 wall-corner-ll lower-left corner of a wall
+-106 wall-corner-lr lower-right corner of a wall
+-107 wall-corner-ul upper-left corner of a wall
+-108 wall-corner-ur upper-right corner of a wall
+-
+-110 wall-end-b bottom end of a wall
+-111 wall-end-l left end of a wall
+-112 wall-end-r right end of a wall
+-113 wall-end-t top end of a wall
+-
+-120 wall-nub a one-tile "nub" wall
+-
+-130 wall-t-bottom a "T"-shaped wall, bottom-orientation
+-131 wall-t-left a "T"-shaped wall, left-orientation
+-132 wall-t-right a "T"-shaped wall, right-orientation
+-133 wall-t-top a "T"-shaped wall, top-orientation
+-
+-140 wall-x a four-way wall
+-
+-300 glasses ghost glasses
+-
+-500 x-paintwall use this tile to paint walls automatically
+-
+-
+-
+-# sprites
+-
+diff --git a/games/pacman/res/hiscore.txt b/games/pacman/res/hiscore.txt
+deleted file mode 100644
+index 48bdfbf..0000000
+--- a/games/pacman/res/hiscore.txt
++++ /dev/null
+@@ -1,6 +0,0 @@
+-135260 David
+-100000 David
+-80000 Andy
+-60000 Count Pacula
+-40000 Cleopacra
+-24790 User
+diff --git a/games/pacman/res/levels/0.txt b/games/pacman/res/levels/0.txt
+deleted file mode 100644
+index cd90d89..0000000
+--- a/games/pacman/res/levels/0.txt
++++ /dev/null
+@@ -1,48 +0,0 @@
+-# lvlwidth 35
+-# lvlheight 35
+-# bgcolor 0 0 0
+-# edgelightcolor 0 0 255
+-# edgeshadowcolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 107 100 100 100 100 100 100 100 108 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 100 100 100 100 100 100 106 2 0 0 0 0 0 2 105 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-20 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 4 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 20 
+-120 0 111 100 100 100 100 100 100 100 100 100 100 108 2 0 0 0 0 0 2 107 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 100 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 107 112 1 111 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 101 11 12 13 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/1.txt b/games/pacman/res/levels/1.txt
+deleted file mode 100644
+index f6a84e6..0000000
+--- a/games/pacman/res/levels/1.txt
++++ /dev/null
+@@ -1,37 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgecolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 3 120 2 113 2 111 100 108 2 107 100 112 2 113 2 120 3 101 0 
+-0 101 2 2 2 101 2 2 2 101 2 101 2 2 2 101 2 2 2 101 0 
+-0 101 2 111 100 106 2 113 2 110 2 110 2 113 2 105 100 112 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 120 2 111 100 130 100 112 2 111 100 130 100 112 2 120 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 113 2 111 100 100 100 100 100 112 2 113 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 0 0 10 0 0 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 105 112 2 107 112 1 111 108 2 111 106 2 105 100 100 112 
+-20 0 0 0 2 0 0 2 101 11 12 13 101 2 0 0 2 0 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 0 0 2 0 0 0 0 0 2 0 0 2 2 2 101 0 
+-0 101 2 120 2 107 112 2 111 100 100 100 112 2 111 108 2 120 2 101 0 
+-0 101 2 2 2 101 2 2 0 0 4 0 0 2 2 101 2 2 2 101 0 
+-0 105 133 112 2 110 2 111 100 100 133 100 100 112 2 110 2 111 133 106 0 
+-0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 0 0 
+-0 0 101 2 111 112 2 111 108 2 101 2 107 112 2 111 112 2 101 0 0 
+-107 100 106 2 2 2 2 2 101 2 101 2 101 2 2 2 2 2 105 100 108 
+-101 2 2 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 2 2 101 
+-101 3 120 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 120 3 101 
+-101 2 2 2 107 100 100 100 100 108 0 107 100 100 100 100 108 2 2 2 101 
+-105 100 100 100 106 0 0 0 0 110 21 110 0 0 0 0 105 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/10.txt b/games/pacman/res/levels/10.txt
+deleted file mode 100644
+index e254045..0000000
+--- a/games/pacman/res/levels/10.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 128 0 64
+-# fillcolor 215 0 107
+-# pelletcolor 0 255 0
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 120 2 111 100 108 2 111 100 112 2 107 100 112 2 120 3 105 112 
+-20 0 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 0 20 
+-111 100 100 112 2 120 2 110 2 113 2 113 2 110 2 120 2 111 100 100 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-111 108 0 120 2 113 2 111 100 106 2 105 100 112 2 113 2 120 0 107 112 
+-0 101 2 2 2 101 2 0 0 0 10 0 0 0 2 101 2 2 2 101 0 
+-0 101 2 111 100 130 112 2 107 112 1 111 108 2 111 130 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 2 101 0 
+-0 101 2 111 133 100 112 2 105 100 100 100 106 2 111 100 133 112 2 101 0 
+-0 101 2 2 101 2 2 2 0 0 0 0 0 2 2 2 101 2 2 101 0 
+-0 131 112 2 110 2 107 100 112 0 113 0 111 100 108 2 110 2 111 132 0 
+-0 101 2 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 2 101 0 
+-111 106 2 120 0 111 106 2 120 2 101 2 120 2 105 112 0 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 20 
+-111 100 100 112 2 111 108 2 111 100 130 100 112 2 107 112 2 111 100 100 112 
+-20 0 2 2 2 2 101 2 2 2 4 2 2 2 101 2 2 2 2 0 20 
+-111 108 3 111 112 2 105 100 112 2 120 2 111 100 106 2 111 112 3 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/11.txt b/games/pacman/res/levels/11.txt
+deleted file mode 100644
+index c546ac7..0000000
+--- a/games/pacman/res/levels/11.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 203 211 44
+-# edgeshadowcolor 0 64 0
+-# fillcolor 0 0 0
+-# pelletcolor 255 0 0
+-# fruittype 1
+-
+-# startleveldata
+-113 21 107 100 100 100 100 100 100 100 133 100 100 100 100 100 100 100 108 21 113 
+-101 0 110 0 0 2 2 2 2 2 110 2 2 2 2 2 0 0 110 0 101 
+-101 0 0 0 113 2 113 2 113 2 2 2 113 2 113 2 113 0 0 0 101 
+-131 100 100 100 106 3 110 2 110 2 113 2 110 2 110 3 105 100 100 100 132 
+-101 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 100 112 2 113 0 111 100 140 100 112 0 113 2 111 100 108 2 101 
+-101 2 101 2 2 2 101 0 0 0 101 0 0 0 101 2 2 2 101 2 101 
+-101 2 110 2 111 100 130 100 112 0 110 0 111 100 130 100 112 2 110 2 101 
+-101 2 2 2 0 0 0 0 0 0 10 0 0 0 0 0 0 2 2 2 101 
+-101 2 111 100 100 100 108 0 107 112 1 111 108 0 107 100 100 100 112 2 101 
+-101 2 2 2 2 2 110 0 101 11 12 13 101 0 110 2 2 2 2 2 101 
+-105 100 100 100 112 2 2 2 131 100 100 100 132 2 2 2 111 100 100 100 106 
+-20 0 0 0 0 0 113 2 110 0 0 0 110 2 113 0 0 0 0 0 20 
+-107 100 100 100 100 100 106 2 0 0 113 0 0 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 111 100 140 100 112 2 2 2 2 2 2 2 101 
+-101 2 113 2 107 100 108 0 0 0 101 0 0 0 107 100 108 2 113 2 101 
+-101 2 101 2 110 0 105 100 112 0 110 0 111 100 106 0 110 2 101 2 101 
+-101 2 101 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 101 2 101 
+-101 2 110 2 120 2 111 100 108 2 113 2 107 100 112 2 120 2 110 2 101 
+-101 2 2 2 3 2 2 2 101 2 101 2 101 2 2 2 3 2 2 2 101 
+-101 0 113 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 113 0 101 
+-101 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 101 
+-110 21 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/12.txt b/games/pacman/res/levels/12.txt
+deleted file mode 100644
+index 137aad1..0000000
+--- a/games/pacman/res/levels/12.txt
++++ /dev/null
+@@ -1,40 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 27
+-# bgcolor 0 0 0
+-# edgelightcolor 52 61 139
+-# edgeshadowcolor 35 41 95
+-# fillcolor 0 0 0
+-# pelletcolor 238 183 128
+-# fruittype 3
+-
+-# startleveldata
+-111 112 21 111 100 100 100 100 100 100 100 100 100 100 100 100 100 112 21 111 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 107 100 100 100 100 100 100 100 100 100 100 100 100 100 108 2 107 112 
+-0 101 2 101 22 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-0 101 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-111 106 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 105 112 
+-20 0 2 105 100 100 133 100 100 100 133 100 100 100 133 100 100 106 2 0 20 
+-111 108 2 2 2 2 110 2 2 2 110 2 2 2 110 2 2 2 2 107 112 
+-0 101 2 111 108 2 2 2 113 0 10 0 113 2 2 2 107 112 2 101 0 
+-0 101 2 2 110 0 120 0 131 112 1 111 132 0 120 0 110 2 2 101 0 
+-0 131 108 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 107 132 0 
+-111 130 106 2 111 100 112 2 105 100 100 100 106 2 111 100 112 2 105 130 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 113 2 120 2 113 2 120 0 120 2 113 2 120 2 113 2 107 112 
+-0 101 2 101 2 2 2 101 2 2 4 2 2 101 2 2 2 101 2 101 0 
+-0 101 2 110 2 111 100 130 100 112 0 111 100 130 100 112 2 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 2 120 3 120 2 120 2 113 2 113 2 120 2 120 3 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 2 0 20 
+-111 108 2 111 100 112 2 111 100 106 2 105 100 112 2 111 100 112 2 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 100 133 100 100 100 100 100 100 108 0 0 0 
+-0 107 100 106 2 2 2 2 2 2 110 2 2 2 2 2 2 105 100 108 0 
+-0 101 2 2 2 107 100 100 108 2 2 2 107 100 100 108 2 2 2 101 0 
+-0 110 21 111 100 106 0 0 105 100 100 100 106 0 0 105 100 112 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/2.txt b/games/pacman/res/levels/2.txt
+deleted file mode 100644
+index b65a9eb..0000000
+--- a/games/pacman/res/levels/2.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 33
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 85 0 170
+-# fillcolor 128 0 255
+-# pelletcolor 255 255 255
+-# fruittype 2
+-
+-# startleveldata
+-0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 
+-0 101 0 105 100 100 100 100 100 100 133 100 100 100 100 106 0 105 100 100 100 100 133 100 100 100 100 100 100 106 0 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 111 112 2 113 2 113 2 110 2 111 100 100 100 133 100 100 100 112 2 110 2 113 2 113 2 111 112 3 105 112 
+-20 0 2 2 2 2 101 2 101 0 0 2 2 2 2 2 101 2 2 2 2 2 0 0 101 2 101 2 2 2 2 0 20 
+-111 108 0 111 100 100 106 2 105 100 112 2 111 100 108 0 101 0 107 100 112 2 111 100 106 2 105 100 100 112 0 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 0 0 110 0 110 0 110 0 0 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 131 100 100 112 2 111 100 108 2 107 100 112 0 0 0 10 0 0 0 111 100 108 2 107 100 112 2 111 100 100 132 0 
+-0 101 2 2 2 2 2 2 110 2 110 0 0 0 107 112 1 111 108 0 0 0 110 2 110 2 2 2 2 2 2 101 0 
+-0 101 2 120 0 111 112 2 2 2 2 2 113 0 101 11 12 13 101 0 113 2 2 2 2 2 111 112 0 120 2 101 0 
+-0 101 2 2 2 2 2 2 120 0 111 100 132 2 105 100 100 100 106 2 131 100 112 0 120 2 2 2 2 2 2 101 0 
+-0 101 2 111 100 100 112 2 2 2 3 2 110 2 2 2 2 2 2 2 110 2 3 2 2 2 111 100 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 113 0 113 2 2 2 113 2 113 2 113 2 2 2 113 0 113 2 2 2 2 2 2 101 0 
+-0 101 2 111 112 0 120 2 110 0 110 2 111 100 106 2 110 2 105 100 112 2 110 0 110 2 120 0 111 112 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 107 112 0 111 100 100 100 112 0 111 100 133 100 112 0 111 100 100 100 112 0 111 108 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 101 2 113 2 111 133 100 100 100 108 2 110 2 107 100 100 100 133 112 2 113 2 101 2 105 100 100 112 
+-20 0 0 0 2 101 2 101 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 101 2 101 2 0 0 0 20 
+-111 108 0 120 3 110 2 105 112 2 110 2 113 2 110 2 120 2 110 2 113 2 110 2 111 106 2 110 3 120 0 107 112 
+-0 101 0 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 0 101 0 
+-0 101 0 107 100 100 100 100 100 100 100 100 130 100 100 108 0 107 100 100 130 100 100 100 100 100 100 100 100 108 0 101 0 
+-0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/3.txt b/games/pacman/res/levels/3.txt
+deleted file mode 100644
+index e72d1c4..0000000
+--- a/games/pacman/res/levels/3.txt
++++ /dev/null
+@@ -1,38 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgelightcolor 251 233 130
+-# edgeshadowcolor 124 70 16
+-# fillcolor 225 151 51
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 108 0 101 0 101 0 107 100 100 100 100 100 100 112 
+-20 0 3 2 2 2 2 101 0 101 0 101 0 101 2 2 2 2 3 0 20 
+-111 108 2 107 100 108 2 101 0 101 0 101 0 101 2 107 100 108 2 107 112 
+-0 101 2 101 0 101 2 105 100 106 0 105 100 106 2 101 0 101 2 101 0 
+-0 101 2 101 0 101 2 2 2 2 2 2 2 2 2 101 0 101 2 101 0 
+-0 101 2 101 0 131 133 133 133 133 133 133 133 133 133 132 0 101 2 101 0 
+-0 101 2 131 133 140 140 130 130 130 130 130 130 130 140 140 133 132 2 101 0 
+-0 101 2 105 130 130 106 2 2 2 10 2 2 2 105 130 130 106 2 101 0 
+-0 101 0 2 2 0 0 2 107 112 1 111 108 2 0 0 2 2 0 101 0 
+-0 105 100 108 2 107 108 2 101 11 12 13 101 2 107 108 2 107 100 106 0 
+-0 0 0 101 2 105 106 2 105 100 100 100 106 2 105 106 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 113 2 107 100 100 100 100 100 108 2 113 2 101 0 0 0 
+-0 0 0 101 0 101 2 110 0 0 4 0 0 110 2 101 0 101 0 0 0 
+-0 107 100 106 0 101 2 2 2 111 133 112 2 2 2 101 0 105 100 108 0 
+-0 101 2 2 2 110 2 113 2 2 101 2 2 113 2 110 2 2 2 101 0 
+-0 101 2 113 0 0 2 131 108 2 101 2 107 132 2 0 0 113 2 101 0 
+-111 106 2 105 100 108 2 105 106 2 110 2 105 106 2 107 100 106 2 105 112 
+-20 0 3 2 2 101 2 2 2 2 0 2 2 2 2 101 2 2 3 0 20 
+-111 100 100 108 2 110 2 111 100 100 133 100 100 112 2 110 2 107 100 100 112 
+-0 0 0 101 0 2 2 2 2 2 110 2 2 2 2 2 0 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 2 2 2 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 105 108 0 107 106 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/4.txt b/games/pacman/res/levels/4.txt
+deleted file mode 100644
+index 11394c2..0000000
+--- a/games/pacman/res/levels/4.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 128 255 0
+-# edgeshadowcolor 128 255 0
+-# fillcolor 0 128 0
+-# pelletcolor 0 255 255
+-# fruittype 4
+-
+-# startleveldata
+-107 100 100 100 108 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-101 3 2 2 105 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-101 2 113 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-101 2 105 133 100 108 2 111 100 108 2 107 100 112 2 107 100 108 2 101 0 
+-101 2 2 101 0 101 2 2 2 101 2 101 2 2 2 101 0 101 2 101 0 
+-105 108 2 105 100 106 2 113 2 110 2 110 2 113 2 105 100 106 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 113 2 111 100 130 100 112 2 111 100 130 100 112 2 113 2 101 0 
+-0 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 
+-0 101 2 110 2 113 2 111 100 100 100 100 100 112 2 113 2 110 2 101 0 
+-0 101 3 2 2 101 2 2 0 0 10 0 0 2 2 101 2 2 3 101 0 
+-111 130 100 112 2 105 112 2 107 112 1 111 108 2 111 106 2 111 100 130 112 
+-20 0 0 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 113 0 107 112 2 111 100 100 100 112 2 111 108 0 113 2 101 0 
+-0 101 2 101 0 101 2 2 0 0 4 0 0 2 2 101 0 101 2 101 0 
+-0 101 2 110 0 110 2 111 100 100 133 100 100 112 2 110 0 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 120 2 120 2 111 112 2 110 2 111 112 2 120 2 120 2 101 0 
+-0 101 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-0 105 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/5.txt b/games/pacman/res/levels/5.txt
+deleted file mode 100644
+index 74a735a..0000000
+--- a/games/pacman/res/levels/5.txt
++++ /dev/null
+@@ -1,78 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 65
+-# bgcolor 0 0 0
+-# edgelightcolor 255 0 128
+-# edgeshadowcolor 0 0 0
+-# fillcolor 0 0 0
+-# pelletcolor 0 0 255
+-# fruittype 4
+-
+-# startleveldata
+-113 21 113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 113 21 113 
+-101 0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 101 
+-101 0 0 0 2 2 2 2 2 0 0 0 2 2 2 2 2 0 0 0 101 
+-131 100 100 112 3 120 2 113 2 111 100 112 2 113 2 120 3 111 100 100 132 
+-101 2 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 2 101 
+-101 2 111 108 2 111 100 140 100 112 2 111 100 140 100 112 2 107 112 2 101 
+-101 2 2 101 2 2 2 101 2 2 2 2 2 101 2 2 2 101 2 2 101 
+-131 112 2 101 2 113 2 110 2 111 133 112 2 110 2 113 2 101 2 111 132 
+-101 2 2 101 2 101 2 2 2 2 101 2 2 2 2 101 2 101 2 2 101 
+-101 2 111 132 2 105 100 100 112 2 110 2 111 100 100 106 2 131 112 2 101 
+-101 2 2 101 2 2 2 2 2 2 0 2 2 2 2 2 2 101 2 2 101 
+-105 108 2 110 2 113 2 120 2 111 100 112 2 120 2 113 2 110 2 107 106 
+-0 101 2 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 2 101 0 
+-111 130 100 112 2 105 100 100 100 108 2 107 100 100 100 106 2 111 100 130 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-107 100 100 100 100 100 100 112 2 110 2 110 2 111 100 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 108 3 120 0 113 0 111 133 112 0 113 0 120 3 107 108 2 101 
+-101 2 131 132 2 0 0 101 0 0 101 0 0 101 0 0 2 131 132 2 101 
+-101 2 131 132 2 111 100 130 112 0 101 0 111 130 100 112 2 131 132 2 101 
+-101 2 131 132 2 2 2 2 2 2 101 2 2 2 2 2 2 131 132 2 101 
+-101 2 131 132 2 107 112 2 113 2 110 2 113 2 111 108 2 131 132 2 101 
+-101 2 131 132 2 110 2 2 101 2 2 2 101 2 2 110 2 131 132 2 101 
+-101 2 131 132 2 0 2 111 132 0 120 0 131 112 2 0 2 131 132 2 101 
+-101 2 131 132 2 113 2 2 101 0 0 0 101 2 2 113 2 131 132 2 101 
+-101 2 131 106 2 105 112 2 110 0 113 0 110 2 111 106 2 105 132 2 101 
+-110 2 101 0 2 2 2 2 2 2 101 2 2 2 2 2 2 0 101 2 110 
+-20 2 101 0 111 112 2 107 112 2 101 2 111 108 2 111 112 0 101 2 20 
+-113 2 101 2 2 2 2 101 2 2 101 2 2 101 2 2 2 2 101 2 113 
+-101 2 101 2 113 2 111 106 2 111 130 112 2 105 112 2 113 2 101 2 101 
+-101 2 101 2 101 2 2 2 2 0 0 0 2 2 2 2 101 2 101 2 101 
+-101 2 101 2 105 100 100 100 112 0 113 0 111 100 100 100 106 2 101 2 101 
+-101 2 101 2 2 2 2 0 0 0 101 0 0 0 2 2 2 2 101 2 101 
+-101 2 101 3 111 112 2 111 100 100 130 100 100 112 2 111 112 3 101 2 101 
+-101 2 101 2 2 2 2 2 0 0 10 0 0 2 2 2 2 2 101 2 101 
+-101 2 131 133 133 133 108 2 107 112 1 111 108 2 107 133 133 133 132 2 101 
+-101 2 105 130 130 130 106 2 101 11 12 13 101 2 105 130 130 130 106 2 101 
+-101 2 2 2 2 2 2 2 105 100 100 100 106 2 2 2 2 2 2 2 101 
+-131 133 133 133 133 133 108 0 0 0 0 0 0 0 107 133 133 133 133 133 132 
+-131 140 140 130 130 130 130 100 100 108 2 107 100 100 130 130 130 130 140 140 132 
+-105 130 132 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 131 130 106 
+-20 0 110 2 107 100 100 112 2 110 2 110 2 111 100 100 108 2 110 0 20 
+-113 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 113 
+-101 2 111 133 132 2 111 100 100 100 133 100 100 100 112 2 131 133 112 2 101 
+-101 2 2 131 132 2 2 2 2 2 101 2 2 2 2 2 131 132 2 2 101 
+-131 108 2 105 106 2 113 2 113 2 101 2 113 2 113 2 105 106 2 107 132 
+-131 132 2 2 2 2 101 2 110 2 110 2 110 2 101 2 2 2 2 131 132 
+-131 140 133 133 108 2 101 2 0 2 2 2 0 2 101 2 107 133 133 140 132 
+-131 140 140 140 132 2 101 2 107 112 2 111 108 2 101 2 131 140 140 140 132 
+-131 140 140 140 106 2 110 2 110 2 4 2 110 2 110 2 105 140 140 140 132 
+-105 130 130 106 2 2 2 2 2 2 113 2 2 2 2 2 2 105 130 130 106 
+-20 0 0 2 2 113 2 111 100 100 140 100 100 112 2 113 2 2 0 0 20 
+-113 0 113 2 107 132 2 2 2 2 110 2 2 2 2 131 108 2 113 0 113 
+-101 0 101 2 131 132 3 111 112 2 0 2 111 112 3 131 132 2 101 0 101 
+-101 0 101 2 105 132 2 0 0 2 113 2 0 0 2 131 106 2 101 0 101 
+-101 0 101 2 2 101 2 111 112 2 101 2 111 112 2 101 2 2 101 0 101 
+-101 0 131 108 2 101 2 2 2 2 101 2 2 2 2 101 2 107 132 0 101 
+-101 0 131 106 2 101 2 111 100 100 130 100 100 112 2 101 2 105 132 0 101 
+-101 0 101 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 101 0 101 
+-101 0 101 2 107 132 2 111 100 108 2 107 100 112 2 131 108 2 101 0 101 
+-101 0 101 2 131 132 2 2 2 101 2 101 2 2 2 131 132 2 101 0 101 
+-101 0 101 2 105 130 100 112 2 110 2 110 2 111 100 130 106 2 101 0 101 
+-101 0 101 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 101 0 101 
+-101 0 131 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 132 0 101 
+-110 21 105 130 130 130 130 130 130 130 130 130 130 130 130 130 130 130 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/6.txt b/games/pacman/res/levels/6.txt
+deleted file mode 100644
+index fe40285..0000000
+--- a/games/pacman/res/levels/6.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 255 255 255
+-# edgeshadowcolor 0 128 255
+-# fillcolor 129 11 168
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-107 100 100 100 133 100 100 100 100 100 100 100 100 100 100 100 133 100 100 100 108 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-101 3 120 2 110 2 113 2 111 100 100 100 112 2 113 2 110 2 120 3 101 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-131 100 112 2 120 2 105 100 100 100 133 100 100 100 106 2 120 2 111 100 132 
+-101 2 2 2 0 2 2 2 2 2 101 2 2 2 2 2 0 2 2 2 101 
+-101 2 111 100 112 2 107 100 112 2 110 2 111 100 108 2 111 100 112 2 101 
+-101 2 0 2 2 2 110 2 2 2 2 2 2 2 110 2 2 2 0 2 101 
+-105 100 108 2 120 2 0 0 111 100 100 100 112 0 0 2 120 2 107 100 106 
+-0 0 101 2 2 2 113 0 0 0 10 0 0 0 113 2 2 2 101 0 0 
+-0 0 105 100 108 2 101 0 107 112 1 111 108 0 101 2 107 100 106 0 0 
+-0 0 0 0 101 2 101 0 101 11 12 13 101 0 101 2 101 0 0 0 0 
+-111 100 100 100 106 2 110 0 105 100 100 100 106 0 110 2 105 100 100 100 112 
+-20 0 0 0 0 2 2 2 2 2 4 2 2 2 2 2 0 0 0 0 20 
+-111 100 100 100 108 2 113 2 111 100 100 100 112 2 113 2 107 100 100 100 112 
+-0 0 0 0 101 2 101 2 2 2 0 2 2 2 101 2 101 0 0 0 0 
+-0 0 107 100 106 2 131 100 112 2 113 2 111 100 132 2 105 100 108 0 0 
+-0 0 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 0 0 
+-107 100 106 2 120 2 101 2 111 100 130 100 112 2 101 2 120 2 105 100 108 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-101 3 120 2 113 2 105 100 112 2 120 2 111 100 106 2 113 2 120 3 101 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-105 100 100 100 130 100 100 100 100 100 100 100 100 100 100 100 130 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/7.txt b/games/pacman/res/levels/7.txt
+deleted file mode 100644
+index a34c0a9..0000000
+--- a/games/pacman/res/levels/7.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 255 128 128
+-# fillcolor 100 100 100
+-# pelletcolor 170 0 85
+-# fruittype 0
+-
+-# startleveldata
+-120 21 111 100 108 0 107 100 100 100 100 100 100 100 108 0 107 100 112 21 120 
+-20 2 2 2 105 100 106 2 2 2 2 2 2 2 105 100 106 2 2 2 20 
+-113 3 120 2 2 2 2 2 111 100 133 100 112 2 2 2 2 2 120 3 113 
+-101 2 2 2 107 100 108 2 2 2 101 2 2 2 107 100 108 2 2 2 101 
+-105 100 100 100 106 0 101 2 113 2 101 2 113 2 101 0 105 100 100 100 106 
+-0 0 0 0 0 0 101 2 101 2 101 2 101 2 101 0 0 0 0 0 0 
+-107 100 100 100 100 100 106 2 101 2 110 2 101 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 101 2 2 2 101 2 2 2 2 2 2 2 101 
+-101 2 113 2 113 2 111 100 130 112 0 111 130 100 112 2 113 2 113 2 101 
+-101 2 101 2 101 2 2 2 2 2 4 2 2 2 2 2 101 2 101 2 101 
+-101 2 110 2 105 100 100 112 2 113 0 113 2 111 100 100 106 2 110 2 101 
+-101 2 2 2 2 2 2 2 2 101 0 101 2 2 2 2 2 2 2 2 101 
+-105 100 108 2 107 112 2 107 100 106 0 105 100 108 2 111 108 2 107 100 106 
+-0 0 101 2 101 2 2 101 2 2 2 2 2 101 2 2 101 2 101 0 0 
+-0 0 101 2 110 2 111 106 2 111 100 112 2 105 112 2 110 2 101 0 0 
+-0 0 101 2 2 2 2 2 2 0 10 0 2 2 2 2 2 2 101 0 0 
+-0 0 105 100 108 2 120 2 107 112 1 111 108 2 120 2 107 100 106 0 0 
+-0 0 0 0 101 2 2 2 101 11 12 13 101 2 2 2 101 0 0 0 0 
+-0 0 0 0 101 2 120 2 105 100 100 100 106 2 120 2 101 0 0 0 0 
+-0 0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 0 
+-111 100 100 100 106 0 113 2 111 100 100 100 112 2 113 0 105 100 100 100 112 
+-20 0 0 0 0 0 101 2 2 2 3 2 2 2 101 0 0 0 0 0 20 
+-120 21 111 100 100 100 130 100 100 100 100 100 100 100 130 100 100 100 112 21 120 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/8.txt b/games/pacman/res/levels/8.txt
+deleted file mode 100644
+index 21d3396..0000000
+--- a/games/pacman/res/levels/8.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 0 128 192
+-# edgeshadowcolor 0 51 51
+-# fillcolor 0 0 0
+-# pelletcolor 255 128 0
+-# fruittype 2
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 113 21 113 21 113 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 106 0 110 0 105 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 107 100 106 2 113 2 120 2 111 133 112 2 120 0 113 2 105 100 108 0 
+-0 101 2 2 2 101 2 2 2 2 101 2 2 2 0 110 2 0 0 101 0 
+-0 101 2 107 100 106 0 111 112 0 110 2 111 112 2 2 2 113 0 101 0 
+-107 106 2 110 2 2 2 0 2 2 2 2 0 0 2 120 3 110 0 105 108 
+-101 2 2 2 2 113 2 113 2 113 2 111 100 108 2 0 0 10 0 0 101 
+-101 2 107 100 100 106 2 110 2 101 2 2 2 101 2 107 112 1 111 133 106 
+-101 2 110 2 2 2 2 0 2 105 100 112 2 110 2 101 11 12 13 101 0 
+-101 2 0 3 120 2 111 108 2 2 2 2 2 2 2 105 100 100 100 130 108 
+-101 2 113 2 2 2 2 105 100 108 2 107 100 112 2 2 2 2 2 2 101 
+-101 2 105 100 100 108 2 2 2 101 2 101 2 2 2 107 100 100 112 2 101 
+-101 2 0 0 0 105 100 112 2 110 2 110 2 111 100 106 2 2 2 2 101 
+-101 2 111 108 2 2 2 2 2 2 2 2 2 2 2 2 2 107 112 2 101 
+-101 2 2 110 2 111 100 112 2 120 4 111 100 112 2 120 2 110 2 2 101 
+-105 108 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 107 106 
+-0 101 2 111 112 0 107 100 112 2 113 0 111 100 108 2 111 112 2 101 0 
+-0 101 2 2 2 3 101 2 2 2 101 0 0 0 101 2 2 2 2 101 0 
+-0 105 100 108 2 111 106 2 111 100 130 100 112 0 105 112 2 107 100 106 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 0 113 0 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 110 21 110 21 110 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/9.txt b/games/pacman/res/levels/9.txt
+deleted file mode 100644
+index 3661b14..0000000
+--- a/games/pacman/res/levels/9.txt
++++ /dev/null
+@@ -1,46 +0,0 @@
+-# lvlwidth 34
+-# lvlheight 33
+-# bgcolor 0 0 0
+-# edgelightcolor 128 0 255
+-# edgeshadowcolor 64 0 64
+-# fillcolor 0 0 0
+-# pelletcolor 0 255 0
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-111 100 100 106 3 111 100 133 100 112 2 111 100 100 100 108 2 113 2 113 2 111 108 2 113 0 120 3 113 2 105 100 100 112 
+-20 0 0 0 2 2 2 101 2 2 2 2 2 2 2 101 2 101 2 101 2 2 101 2 101 0 0 0 101 2 0 0 0 20 
+-111 100 100 108 2 113 2 110 2 111 100 133 100 112 2 101 2 101 2 105 112 2 110 2 101 0 111 100 106 2 107 100 100 112 
+-0 0 0 101 2 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 101 0 0 0 0 2 101 0 0 0 
+-0 0 0 101 2 131 100 112 2 113 2 101 2 111 100 106 2 105 100 100 100 100 112 2 131 100 100 100 112 2 101 0 0 0 
+-0 0 0 101 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 2 111 100 132 2 110 2 111 100 100 100 100 100 100 100 100 112 2 101 2 111 100 108 0 101 0 0 0 
+-0 0 0 101 2 0 2 2 2 101 2 2 2 0 0 0 0 0 0 0 10 0 0 2 101 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 112 2 110 0 113 2 107 100 100 108 0 107 112 1 111 108 2 110 2 120 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 0 0 101 2 101 0 0 101 0 101 11 12 13 101 2 2 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 100 100 100 100 132 2 105 100 100 106 0 105 100 100 100 106 2 111 100 108 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 2 0 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 0 111 100 100 100 108 2 110 0 113 2 113 2 111 100 100 100 100 100 100 112 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 107 100 112 2 105 100 112 2 101 2 101 2 111 100 100 133 100 100 112 2 111 106 2 110 0 101 0 0 0 
+-0 0 0 101 2 101 0 4 2 2 2 2 2 101 2 101 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 0 107 100 100 100 112 0 110 2 110 2 111 112 2 101 2 107 100 100 100 100 100 108 2 101 0 0 0 
+-0 0 0 101 2 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 2 2 2 110 2 101 0 0 0 
+-0 0 0 101 2 111 100 106 2 113 2 113 2 120 2 113 0 111 112 2 101 2 101 0 113 2 113 2 2 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 3 101 2 101 2 2 2 101 2 2 2 2 101 2 101 0 110 3 105 100 112 2 101 0 0 0 
+-111 100 100 106 2 111 100 100 100 106 2 101 2 120 2 110 2 111 112 0 110 2 101 2 2 2 2 2 2 2 105 100 100 112 
+-20 0 0 0 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 107 108 2 107 108 2 0 0 0 20 
+-111 100 100 108 2 111 100 100 100 112 2 105 100 100 100 112 0 111 100 100 100 100 106 2 105 106 2 105 106 2 107 100 100 112 
+-0 0 0 101 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/sounds/eatfruit.wav b/games/pacman/res/sounds/eatfruit.wav
+deleted file mode 100644
+index d180209..0000000
+Binary files a/games/pacman/res/sounds/eatfruit.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/eatgh2.wav b/games/pacman/res/sounds/eatgh2.wav
+deleted file mode 100644
+index 7d8b90e..0000000
+Binary files a/games/pacman/res/sounds/eatgh2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/extralife.wav b/games/pacman/res/sounds/extralife.wav
+deleted file mode 100644
+index 2db3c19..0000000
+Binary files a/games/pacman/res/sounds/extralife.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/fruitbounce.wav b/games/pacman/res/sounds/fruitbounce.wav
+deleted file mode 100644
+index 6e17741..0000000
+Binary files a/games/pacman/res/sounds/fruitbounce.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet1.wav b/games/pacman/res/sounds/pellet1.wav
+deleted file mode 100644
+index 1d39b64..0000000
+Binary files a/games/pacman/res/sounds/pellet1.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet2.wav b/games/pacman/res/sounds/pellet2.wav
+deleted file mode 100644
+index d8363d0..0000000
+Binary files a/games/pacman/res/sounds/pellet2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/powerpellet.wav b/games/pacman/res/sounds/powerpellet.wav
+deleted file mode 100644
+index 489de59..0000000
+Binary files a/games/pacman/res/sounds/powerpellet.wav and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 0.gif b/games/pacman/res/sprite/fruit 0.gif
+deleted file mode 100644
+index 8cc3dc4..0000000
+Binary files a/games/pacman/res/sprite/fruit 0.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 1.gif b/games/pacman/res/sprite/fruit 1.gif
+deleted file mode 100644
+index 8adcf61..0000000
+Binary files a/games/pacman/res/sprite/fruit 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 2.gif b/games/pacman/res/sprite/fruit 2.gif
+deleted file mode 100644
+index bda9369..0000000
+Binary files a/games/pacman/res/sprite/fruit 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 3.gif b/games/pacman/res/sprite/fruit 3.gif
+deleted file mode 100644
+index ea8f006..0000000
+Binary files a/games/pacman/res/sprite/fruit 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 4.gif b/games/pacman/res/sprite/fruit 4.gif
+deleted file mode 100644
+index 0be5f73..0000000
+Binary files a/games/pacman/res/sprite/fruit 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 1.gif b/games/pacman/res/sprite/ghost 1.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/sprite/ghost 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 2.gif b/games/pacman/res/sprite/ghost 2.gif
+deleted file mode 100644
+index 89845aa..0000000
+Binary files a/games/pacman/res/sprite/ghost 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 3.gif b/games/pacman/res/sprite/ghost 3.gif
+deleted file mode 100644
+index 5777f39..0000000
+Binary files a/games/pacman/res/sprite/ghost 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 4.gif b/games/pacman/res/sprite/ghost 4.gif
+deleted file mode 100644
+index e95b7d7..0000000
+Binary files a/games/pacman/res/sprite/ghost 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 5.gif b/games/pacman/res/sprite/ghost 5.gif
+deleted file mode 100644
+index 9956c84..0000000
+Binary files a/games/pacman/res/sprite/ghost 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 6.gif b/games/pacman/res/sprite/ghost 6.gif
+deleted file mode 100644
+index 56533bf..0000000
+Binary files a/games/pacman/res/sprite/ghost 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 1.gif b/games/pacman/res/sprite/pacman-d 1.gif
+deleted file mode 100644
+index b3db2db..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 2.gif b/games/pacman/res/sprite/pacman-d 2.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 3.gif b/games/pacman/res/sprite/pacman-d 3.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 4.gif b/games/pacman/res/sprite/pacman-d 4.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 5.gif b/games/pacman/res/sprite/pacman-d 5.gif
+deleted file mode 100644
+index 5fa29e9..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 6.gif b/games/pacman/res/sprite/pacman-d 6.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 7.gif b/games/pacman/res/sprite/pacman-d 7.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 8.gif b/games/pacman/res/sprite/pacman-d 8.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 1.gif b/games/pacman/res/sprite/pacman-l 1.gif
+deleted file mode 100644
+index ee7f79a..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 2.gif b/games/pacman/res/sprite/pacman-l 2.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 3.gif b/games/pacman/res/sprite/pacman-l 3.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 4.gif b/games/pacman/res/sprite/pacman-l 4.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 5.gif b/games/pacman/res/sprite/pacman-l 5.gif
+deleted file mode 100644
+index b446def..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 6.gif b/games/pacman/res/sprite/pacman-l 6.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 7.gif b/games/pacman/res/sprite/pacman-l 7.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 8.gif b/games/pacman/res/sprite/pacman-l 8.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 1.gif b/games/pacman/res/sprite/pacman-r 1.gif
+deleted file mode 100644
+index 7719686..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 2.gif b/games/pacman/res/sprite/pacman-r 2.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 3.gif b/games/pacman/res/sprite/pacman-r 3.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 4.gif b/games/pacman/res/sprite/pacman-r 4.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 5.gif b/games/pacman/res/sprite/pacman-r 5.gif
+deleted file mode 100644
+index 1fe5419..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 6.gif b/games/pacman/res/sprite/pacman-r 6.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 7.gif b/games/pacman/res/sprite/pacman-r 7.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 8.gif b/games/pacman/res/sprite/pacman-r 8.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 1.gif b/games/pacman/res/sprite/pacman-u 1.gif
+deleted file mode 100644
+index 01ef0a3..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 2.gif b/games/pacman/res/sprite/pacman-u 2.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 3.gif b/games/pacman/res/sprite/pacman-u 3.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 4.gif b/games/pacman/res/sprite/pacman-u 4.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 5.gif b/games/pacman/res/sprite/pacman-u 5.gif
+deleted file mode 100644
+index d4698b0..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 6.gif b/games/pacman/res/sprite/pacman-u 6.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 7.gif b/games/pacman/res/sprite/pacman-u 7.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 8.gif b/games/pacman/res/sprite/pacman-u 8.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman.gif b/games/pacman/res/sprite/pacman.gif
+deleted file mode 100644
+index a584c10..0000000
+Binary files a/games/pacman/res/sprite/pacman.gif and /dev/null differ
+diff --git a/games/pacman/res/text/0.gif b/games/pacman/res/text/0.gif
+deleted file mode 100644
+index f01b653..0000000
+Binary files a/games/pacman/res/text/0.gif and /dev/null differ
+diff --git a/games/pacman/res/text/1.gif b/games/pacman/res/text/1.gif
+deleted file mode 100644
+index 7349994..0000000
+Binary files a/games/pacman/res/text/1.gif and /dev/null differ
+diff --git a/games/pacman/res/text/2.gif b/games/pacman/res/text/2.gif
+deleted file mode 100644
+index 3254d6f..0000000
+Binary files a/games/pacman/res/text/2.gif and /dev/null differ
+diff --git a/games/pacman/res/text/3.gif b/games/pacman/res/text/3.gif
+deleted file mode 100644
+index c88635d..0000000
+Binary files a/games/pacman/res/text/3.gif and /dev/null differ
+diff --git a/games/pacman/res/text/4.gif b/games/pacman/res/text/4.gif
+deleted file mode 100644
+index f3b5c3b..0000000
+Binary files a/games/pacman/res/text/4.gif and /dev/null differ
+diff --git a/games/pacman/res/text/5.gif b/games/pacman/res/text/5.gif
+deleted file mode 100644
+index dae0fd7..0000000
+Binary files a/games/pacman/res/text/5.gif and /dev/null differ
+diff --git a/games/pacman/res/text/6.gif b/games/pacman/res/text/6.gif
+deleted file mode 100644
+index dae7821..0000000
+Binary files a/games/pacman/res/text/6.gif and /dev/null differ
+diff --git a/games/pacman/res/text/7.gif b/games/pacman/res/text/7.gif
+deleted file mode 100644
+index dda359b..0000000
+Binary files a/games/pacman/res/text/7.gif and /dev/null differ
+diff --git a/games/pacman/res/text/8.gif b/games/pacman/res/text/8.gif
+deleted file mode 100644
+index 01305d4..0000000
+Binary files a/games/pacman/res/text/8.gif and /dev/null differ
+diff --git a/games/pacman/res/text/9.gif b/games/pacman/res/text/9.gif
+deleted file mode 100644
+index b29bb19..0000000
+Binary files a/games/pacman/res/text/9.gif and /dev/null differ
+diff --git a/games/pacman/res/text/gameover.gif b/games/pacman/res/text/gameover.gif
+deleted file mode 100644
+index e854b89..0000000
+Binary files a/games/pacman/res/text/gameover.gif and /dev/null differ
+diff --git a/games/pacman/res/text/life.gif b/games/pacman/res/text/life.gif
+deleted file mode 100644
+index 0e8f1bf..0000000
+Binary files a/games/pacman/res/text/life.gif and /dev/null differ
+diff --git a/games/pacman/res/text/logo.gif b/games/pacman/res/text/logo.gif
+deleted file mode 100644
+index 1cd71a7..0000000
+Binary files a/games/pacman/res/text/logo.gif and /dev/null differ
+diff --git a/games/pacman/res/text/ready.gif b/games/pacman/res/text/ready.gif
+deleted file mode 100644
+index 0cdcd89..0000000
+Binary files a/games/pacman/res/text/ready.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/blank.gif b/games/pacman/res/tiles/blank.gif
+deleted file mode 100644
+index ae631b0..0000000
+Binary files a/games/pacman/res/tiles/blank.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-h.gif b/games/pacman/res/tiles/door-h.gif
+deleted file mode 100644
+index 49687f5..0000000
+Binary files a/games/pacman/res/tiles/door-h.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-v.gif b/games/pacman/res/tiles/door-v.gif
+deleted file mode 100644
+index 2e7568d..0000000
+Binary files a/games/pacman/res/tiles/door-v.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-blinky.gif b/games/pacman/res/tiles/ghost-blinky.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/tiles/ghost-blinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-door.gif b/games/pacman/res/tiles/ghost-door.gif
+deleted file mode 100644
+index cffd09a..0000000
+Binary files a/games/pacman/res/tiles/ghost-door.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-inky.gif b/games/pacman/res/tiles/ghost-inky.gif
+deleted file mode 100644
+index 4753970..0000000
+Binary files a/games/pacman/res/tiles/ghost-inky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-pinky.gif b/games/pacman/res/tiles/ghost-pinky.gif
+deleted file mode 100644
+index 6fd82ec..0000000
+Binary files a/games/pacman/res/tiles/ghost-pinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-sue.gif b/games/pacman/res/tiles/ghost-sue.gif
+deleted file mode 100644
+index 14b057d..0000000
+Binary files a/games/pacman/res/tiles/ghost-sue.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/glasses.gif b/games/pacman/res/tiles/glasses.gif
+deleted file mode 100644
+index f17ba54..0000000
+Binary files a/games/pacman/res/tiles/glasses.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/hiscores.gif b/games/pacman/res/tiles/hiscores.gif
+deleted file mode 100644
+index c504d3c..0000000
+Binary files a/games/pacman/res/tiles/hiscores.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet-power.gif b/games/pacman/res/tiles/pellet-power.gif
+deleted file mode 100644
+index 806f7f4..0000000
+Binary files a/games/pacman/res/tiles/pellet-power.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet.gif b/games/pacman/res/tiles/pellet.gif
+deleted file mode 100644
+index 5284dd8..0000000
+Binary files a/games/pacman/res/tiles/pellet.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/showlogo.gif b/games/pacman/res/tiles/showlogo.gif
+deleted file mode 100644
+index 35abd50..0000000
+Binary files a/games/pacman/res/tiles/showlogo.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/start.gif b/games/pacman/res/tiles/start.gif
+deleted file mode 100644
+index 8b0fafe..0000000
+Binary files a/games/pacman/res/tiles/start.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ll.gif b/games/pacman/res/tiles/wall-corner-ll.gif
+deleted file mode 100644
+index 86b0398..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ll.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-lr.gif b/games/pacman/res/tiles/wall-corner-lr.gif
+deleted file mode 100644
+index c43af41..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-lr.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ul.gif b/games/pacman/res/tiles/wall-corner-ul.gif
+deleted file mode 100644
+index 5acadaa..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ul.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ur.gif b/games/pacman/res/tiles/wall-corner-ur.gif
+deleted file mode 100644
+index be16253..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ur.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-b.gif b/games/pacman/res/tiles/wall-end-b.gif
+deleted file mode 100644
+index 9041b06..0000000
+Binary files a/games/pacman/res/tiles/wall-end-b.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-l.gif b/games/pacman/res/tiles/wall-end-l.gif
+deleted file mode 100644
+index 2ed728a..0000000
+Binary files a/games/pacman/res/tiles/wall-end-l.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-r.gif b/games/pacman/res/tiles/wall-end-r.gif
+deleted file mode 100644
+index 25c7848..0000000
+Binary files a/games/pacman/res/tiles/wall-end-r.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-t.gif b/games/pacman/res/tiles/wall-end-t.gif
+deleted file mode 100644
+index 2155e70..0000000
+Binary files a/games/pacman/res/tiles/wall-end-t.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-nub.gif b/games/pacman/res/tiles/wall-nub.gif
+deleted file mode 100644
+index 113941b..0000000
+Binary files a/games/pacman/res/tiles/wall-nub.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-horiz.gif b/games/pacman/res/tiles/wall-straight-horiz.gif
+deleted file mode 100644
+index 6308eef..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-horiz.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-vert.gif b/games/pacman/res/tiles/wall-straight-vert.gif
+deleted file mode 100644
+index 6b7ddb7..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-vert.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-bottom.gif b/games/pacman/res/tiles/wall-t-bottom.gif
+deleted file mode 100644
+index 10ac483..0000000
+Binary files a/games/pacman/res/tiles/wall-t-bottom.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-left.gif b/games/pacman/res/tiles/wall-t-left.gif
+deleted file mode 100644
+index 3006e2a..0000000
+Binary files a/games/pacman/res/tiles/wall-t-left.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-right.gif b/games/pacman/res/tiles/wall-t-right.gif
+deleted file mode 100644
+index 27bb644..0000000
+Binary files a/games/pacman/res/tiles/wall-t-right.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-top.gif b/games/pacman/res/tiles/wall-t-top.gif
+deleted file mode 100644
+index 11f0e1e..0000000
+Binary files a/games/pacman/res/tiles/wall-t-top.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-x.gif b/games/pacman/res/tiles/wall-x.gif
+deleted file mode 100644
+index 3ba8eaa..0000000
+Binary files a/games/pacman/res/tiles/wall-x.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/x-paintwall.gif b/games/pacman/res/tiles/x-paintwall.gif
+deleted file mode 100644
+index 78f60c4..0000000
+Binary files a/games/pacman/res/tiles/x-paintwall.gif and /dev/null differ
+diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
+index a7e2754..bdca4db 120000
+--- a/wandb/debug-internal.log
++++ b/wandb/debug-internal.log
+@@ -1 +1 @@
+-run-20240627_175509-kfssyjeq/logs/debug-internal.log
+\ No newline at end of file
++run-20240729_231335-y13kgdr9/logs/debug-internal.log
+\ No newline at end of file
+diff --git a/wandb/debug.log b/wandb/debug.log
+index 78950f7..298cbde 120000
+--- a/wandb/debug.log
++++ b/wandb/debug.log
+@@ -1 +1 @@
+-run-20240627_175509-kfssyjeq/logs/debug.log
+\ No newline at end of file
++run-20240729_231335-y13kgdr9/logs/debug.log
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+index 847fe7f..862d856 120000
+--- a/wandb/latest-run
++++ b/wandb/latest-run
+@@ -1 +1 @@
+-run-20240627_175509-kfssyjeq
+\ No newline at end of file
++run-20240729_231335-y13kgdr9
+\ No newline at end of file
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/output.log b/wandb/run-20240729_231335-y13kgdr9/files/output.log
new file mode 100644
index 0000000..0290a89
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/output.log
@@ -0,0 +1,33 @@
+Using cpu device
+Wrapping the env with a `Monitor` wrapper
+Wrapping the env in a DummyVecEnv.
+/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.reward to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.reward` for environment variables or `env.get_wrapper_attr('reward')` that will search the reminding wrappers.
+  logger.warn(
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 196, in _run_module_as_main
+    return _run_code(code, main_globals, None,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 86, in _run_code
+    exec(code, run_globals)
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/run_supervised_gnn.py", line 101, in <module>
+    model.learn(total_timesteps=1000000, callback=[WandbCallback(), save_best_callback])
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/ppo/ppo.py", line 315, in learn
+    return super().learn(
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/on_policy_algorithm.py", line 300, in learn
+    continue_training = self.collect_rollouts(self.env, callback, self.rollout_buffer, n_rollout_steps=self.n_steps)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/on_policy_algorithm.py", line 201, in collect_rollouts
+    if not callback.on_step():
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/callbacks.py", line 114, in on_step
+    return self._on_step()
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/callbacks.py", line 219, in _on_step
+    continue_training = callback.on_step() and continue_training
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/callbacks.py", line 114, in on_step
+    return self._on_step()
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/run_supervised_gnn.py", line 44, in _on_step
+    x, y = self.training_env.get_attr('reward')
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/vec_env/dummy_vec_env.py", line 118, in get_attr
+    return [getattr(env_i, attr_name) for env_i in target_envs]
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/vec_env/dummy_vec_env.py", line 118, in <listcomp>
+    return [getattr(env_i, attr_name) for env_i in target_envs]
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/gymnasium/core.py", line 315, in __getattr__
+    return getattr(self.env, name)
+AttributeError: 'FreewayEnv' object has no attribute 'reward'
\ No newline at end of file
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/requirements.txt b/wandb/run-20240729_231335-y13kgdr9/files/requirements.txt
new file mode 100644
index 0000000..717b9d3
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/requirements.txt
@@ -0,0 +1,83 @@
+AutoROM.accept-rom-license==0.6.1
+AutoROM==0.4.2
+Farama-Notifications==0.0.4
+GitPython==3.1.43
+Jinja2==3.1.4
+Markdown==3.6
+MarkupSafe==2.1.5
+PyYAML==6.0.1
+Shimmy==0.2.1
+Werkzeug==3.0.3
+absl-py==2.1.0
+aiohttp==3.9.5
+aiosignal==1.3.1
+ale-py==0.8.1
+async-timeout==4.0.3
+atari-py==0.2.5
+attrs==23.2.0
+certifi==2024.2.2
+charset-normalizer==3.3.2
+click==8.1.7
+cloudpickle==3.0.0
+contourpy==1.2.1
+cycler==0.12.1
+docker-pycreds==0.4.0
+filelock==3.14.0
+fonttools==4.52.4
+frozenlist==1.4.1
+fsspec==2024.5.0
+gitdb==4.0.11
+grpcio==1.64.0
+gymnasium==0.29.1
+idna==3.7
+imageio==2.34.1
+importlib_resources==6.4.0
+joblib==1.4.2
+kiwisolver==1.4.5
+lazy_loader==0.4
+lightning-utilities==0.11.2
+lightning==2.2.5
+matplotlib==3.9.0
+mpmath==1.3.0
+multidict==6.0.5
+networkx==3.3
+numpy==1.26.4
+opencv-python==4.10.0.84
+packaging==24.0
+pandas==2.2.2
+pillow==10.3.0
+pip==23.3.1
+platformdirs==4.2.2
+protobuf==4.25.3
+psutil==5.9.8
+pygame==2.5.2
+pyparsing==3.1.2
+python-dateutil==2.9.0.post0
+pytorch-lightning==2.2.5
+pytz==2024.1
+requests==2.32.2
+sb3_contrib==2.3.0
+scikit-image==0.23.2
+scikit-learn==1.5.0
+scipy==1.13.1
+sentry-sdk==2.3.1
+setproctitle==1.3.3
+setuptools==68.2.2
+six==1.16.0
+smmap==5.0.1
+stable_baselines3==2.3.2
+sympy==1.12
+tensorboard-data-server==0.7.2
+tensorboard==2.16.2
+threadpoolctl==3.5.0
+tifffile==2024.5.22
+torch==2.3.0
+torch_geometric==2.5.3
+torchmetrics==1.4.0.post0
+tqdm==4.66.4
+typing_extensions==4.12.0
+tzdata==2024.1
+urllib3==2.2.1
+wandb==0.17.0
+wheel==0.42.0
+yarl==1.9.4
\ No newline at end of file
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/wandb-metadata.json b/wandb/run-20240729_231335-y13kgdr9/files/wandb-metadata.json
new file mode 100644
index 0000000..e3c6d97
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/wandb-metadata.json
@@ -0,0 +1,48 @@
+{
+    "os": "macOS-14.0-arm64-arm-64bit",
+    "python": "3.10.14",
+    "heartbeatAt": "2024-07-29T21:13:36.863283",
+    "startedAt": "2024-07-29T21:13:35.273374",
+    "docker": null,
+    "cuda": null,
+    "args": [],
+    "state": "running",
+    "program": "-m games.freeway.run_supervised_gnn",
+    "codePathLocal": null,
+    "git": {
+        "remote": "https://github.com/rb248/Master-Thesis-GNN.git",
+        "commit": "ba9e888a4c10c9f7483c08755454a7fb6d45cc20"
+    },
+    "email": "rishabhbhatia315@gmail.com",
+    "root": "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN",
+    "host": "rishubs-MBP.fritz.box",
+    "username": "rishubbhatia",
+    "executable": "/Users/rishubbhatia/miniforge3/envs/games/bin/python",
+    "cpu_count": 8,
+    "cpu_count_logical": 8,
+    "cpu_freq": {
+        "current": 3204,
+        "min": 600,
+        "max": 3204
+    },
+    "cpu_freq_per_core": [
+        {
+            "current": 3204,
+            "min": 600,
+            "max": 3204
+        }
+    ],
+    "disk": {
+        "/": {
+            "total": 228.27386474609375,
+            "used": 13.797981262207031
+        }
+    },
+    "gpuapple": {
+        "type": "arm",
+        "vendor": "Apple"
+    },
+    "memory": {
+        "total": 8.0
+    }
+}
diff --git a/wandb/run-20240729_231335-y13kgdr9/files/wandb-summary.json b/wandb/run-20240729_231335-y13kgdr9/files/wandb-summary.json
new file mode 100644
index 0000000..e32ca1c
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/files/wandb-summary.json
@@ -0,0 +1 @@
+{"_wandb": {"runtime": 13}}
\ No newline at end of file
diff --git a/wandb/run-20240729_231335-y13kgdr9/logs/debug-internal.log b/wandb/run-20240729_231335-y13kgdr9/logs/debug-internal.log
new file mode 100644
index 0000000..92ce404
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/logs/debug-internal.log
@@ -0,0 +1,275 @@
+2024-07-29 23:13:35,304 INFO    StreamThr :54531 [internal.py:wandb_internal():85] W&B internal server running at pid: 54531, started at: 2024-07-29 23:13:35.284249
+2024-07-29 23:13:35,304 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: status
+2024-07-29 23:13:35,310 INFO    WriterThread:54531 [datastore.py:open_for_write():87] open: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/run-y13kgdr9.wandb
+2024-07-29 23:13:35,311 DEBUG   SenderThread:54531 [sender.py:send():378] send: header
+2024-07-29 23:13:35,409 DEBUG   SenderThread:54531 [sender.py:send():378] send: run
+2024-07-29 23:13:35,834 INFO    SenderThread:54531 [dir_watcher.py:__init__():211] watching files in: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files
+2024-07-29 23:13:35,834 INFO    SenderThread:54531 [sender.py:_start_run_threads():1123] run started: y13kgdr9 with start time 1722287615.30504
+2024-07-29 23:13:35,839 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: check_version
+2024-07-29 23:13:35,840 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: check_version
+2024-07-29 23:13:35,976 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: run_start
+2024-07-29 23:13:35,987 DEBUG   HandlerThread:54531 [system_info.py:__init__():26] System info init
+2024-07-29 23:13:35,987 DEBUG   HandlerThread:54531 [system_info.py:__init__():41] System info init done
+2024-07-29 23:13:35,987 INFO    HandlerThread:54531 [system_monitor.py:start():194] Starting system monitor
+2024-07-29 23:13:35,987 INFO    SystemMonitor:54531 [system_monitor.py:_start():158] Starting system asset monitoring threads
+2024-07-29 23:13:35,987 INFO    HandlerThread:54531 [system_monitor.py:probe():214] Collecting system info
+2024-07-29 23:13:35,990 INFO    SystemMonitor:54531 [interfaces.py:start():188] Started cpu monitoring
+2024-07-29 23:13:35,993 INFO    SystemMonitor:54531 [interfaces.py:start():188] Started disk monitoring
+2024-07-29 23:13:35,995 INFO    SystemMonitor:54531 [interfaces.py:start():188] Started gpuapple monitoring
+2024-07-29 23:13:36,001 INFO    SystemMonitor:54531 [interfaces.py:start():188] Started memory monitoring
+2024-07-29 23:13:36,003 INFO    SystemMonitor:54531 [interfaces.py:start():188] Started network monitoring
+2024-07-29 23:13:36,850 ERROR   HandlerThread:54531 [gpu_apple.py:probe():176] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 164, in probe
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:36,863 DEBUG   HandlerThread:54531 [system_info.py:probe():150] Probing system
+2024-07-29 23:13:36,875 DEBUG   HandlerThread:54531 [system_info.py:_probe_git():135] Probing git
+2024-07-29 23:13:36,942 DEBUG   HandlerThread:54531 [system_info.py:_probe_git():143] Probing git done
+2024-07-29 23:13:36,942 DEBUG   HandlerThread:54531 [system_info.py:probe():198] Probing system done
+2024-07-29 23:13:36,942 DEBUG   HandlerThread:54531 [system_monitor.py:probe():223] {'os': 'macOS-14.0-arm64-arm-64bit', 'python': '3.10.14', 'heartbeatAt': '2024-07-29T21:13:36.863283', 'startedAt': '2024-07-29T21:13:35.273374', 'docker': None, 'cuda': None, 'args': (), 'state': 'running', 'program': '-m games.freeway.run_supervised_gnn', 'codePathLocal': None, 'git': {'remote': 'https://github.com/rb248/Master-Thesis-GNN.git', 'commit': 'ba9e888a4c10c9f7483c08755454a7fb6d45cc20'}, 'email': 'rishabhbhatia315@gmail.com', 'root': '/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN', 'host': 'rishubs-MBP.fritz.box', 'username': 'rishubbhatia', 'executable': '/Users/rishubbhatia/miniforge3/envs/games/bin/python', 'cpu_count': 8, 'cpu_count_logical': 8, 'cpu_freq': {'current': 3204, 'min': 600, 'max': 3204}, 'cpu_freq_per_core': [{'current': 3204, 'min': 600, 'max': 3204}], 'disk': {'/': {'total': 228.27386474609375, 'used': 13.797981262207031}}, 'gpuapple': {'type': 'arm', 'vendor': 'Apple'}, 'memory': {'total': 8.0}}
+2024-07-29 23:13:36,943 INFO    HandlerThread:54531 [system_monitor.py:probe():224] Finished collecting system info
+2024-07-29 23:13:36,943 INFO    HandlerThread:54531 [system_monitor.py:probe():227] Publishing system info
+2024-07-29 23:13:36,943 DEBUG   HandlerThread:54531 [system_info.py:_save_conda():207] Saving list of conda packages installed into the current environment
+2024-07-29 23:13:36,965 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:37,839 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml
+2024-07-29 23:13:39,086 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:40,706 DEBUG   HandlerThread:54531 [system_info.py:_save_conda():222] Saving conda packages done
+2024-07-29 23:13:40,706 DEBUG   HandlerThread:54531 [system_info.py:_save_code():44] Saving code
+2024-07-29 23:13:40,706 WARNING HandlerThread:54531 [system_info.py:_save_code():46] unable to save code -- program entry not found
+2024-07-29 23:13:40,706 DEBUG   HandlerThread:54531 [system_info.py:_save_patches():82] Saving git patches
+2024-07-29 23:13:40,847 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml
+2024-07-29 23:13:41,214 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:41,394 DEBUG   HandlerThread:54531 [gitlib.py:get_upstream_fork_point():195] git is in a detached head state
+2024-07-29 23:13:41,394 DEBUG   HandlerThread:54531 [system_info.py:_save_patches():124] Saving git patches done
+2024-07-29 23:13:41,396 INFO    HandlerThread:54531 [system_monitor.py:probe():229] Finished publishing system info
+2024-07-29 23:13:41,410 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:13:41,410 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: keepalive
+2024-07-29 23:13:41,410 DEBUG   SenderThread:54531 [sender.py:send():378] send: files
+2024-07-29 23:13:41,410 INFO    SenderThread:54531 [sender.py:_save_file():1389] saving file wandb-metadata.json with policy now
+2024-07-29 23:13:41,411 INFO    SenderThread:54531 [sender.py:_save_file():1389] saving file diff.patch with policy now
+2024-07-29 23:13:41,615 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: python_packages
+2024-07-29 23:13:41,615 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: python_packages
+2024-07-29 23:13:41,615 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:13:41,616 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:13:41,851 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/diff.patch
+2024-07-29 23:13:41,851 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/requirements.txt
+2024-07-29 23:13:41,851 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/wandb-metadata.json
+2024-07-29 23:13:41,874 DEBUG   SenderThread:54531 [sender.py:send():378] send: telemetry
+2024-07-29 23:13:41,874 DEBUG   SenderThread:54531 [sender.py:send():378] send: telemetry
+2024-07-29 23:13:41,874 DEBUG   SenderThread:54531 [sender.py:send():378] send: telemetry
+2024-07-29 23:13:42,233 INFO    wandb-upload_0:54531 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpzq6pkfmfwandb/bnpu85nu-wandb-metadata.json
+2024-07-29 23:13:42,638 INFO    wandb-upload_1:54531 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpzq6pkfmfwandb/6t4b338c-diff.patch
+2024-07-29 23:13:43,381 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:45,583 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:46,089 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:13:46,235 DEBUG   SenderThread:54531 [sender.py:send():378] send: telemetry
+2024-07-29 23:13:46,242 DEBUG   SenderThread:54531 [sender.py:send():378] send: config
+2024-07-29 23:13:46,888 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/output.log
+2024-07-29 23:13:47,734 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:48,895 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/output.log
+2024-07-29 23:13:49,851 ERROR   gpuapple  :54531 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:13:49,905 DEBUG   SenderThread:54531 [sender.py:send():378] send: exit
+2024-07-29 23:13:49,905 INFO    SenderThread:54531 [sender.py:send_exit():585] handling exit code: 1
+2024-07-29 23:13:49,905 INFO    SenderThread:54531 [sender.py:send_exit():587] handling runtime: 13
+2024-07-29 23:13:49,907 INFO    SenderThread:54531 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:13:49,907 INFO    SenderThread:54531 [sender.py:send_exit():593] send defer
+2024-07-29 23:13:49,907 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,907 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 0
+2024-07-29 23:13:49,907 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,907 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 0
+2024-07-29 23:13:49,907 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 1
+2024-07-29 23:13:49,907 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,907 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 1
+2024-07-29 23:13:49,907 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,907 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 1
+2024-07-29 23:13:49,907 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 2
+2024-07-29 23:13:49,907 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,907 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 2
+2024-07-29 23:13:49,907 INFO    HandlerThread:54531 [system_monitor.py:finish():203] Stopping system monitor
+2024-07-29 23:13:49,908 DEBUG   SystemMonitor:54531 [system_monitor.py:_start():172] Starting system metrics aggregation loop
+2024-07-29 23:13:49,908 INFO    HandlerThread:54531 [interfaces.py:finish():200] Joined cpu monitor
+2024-07-29 23:13:49,908 DEBUG   SystemMonitor:54531 [system_monitor.py:_start():179] Finished system metrics aggregation loop
+2024-07-29 23:13:49,908 INFO    HandlerThread:54531 [interfaces.py:finish():200] Joined disk monitor
+2024-07-29 23:13:49,908 DEBUG   SystemMonitor:54531 [system_monitor.py:_start():183] Publishing last batch of metrics
+2024-07-29 23:13:49,908 INFO    HandlerThread:54531 [interfaces.py:finish():200] Joined gpuapple monitor
+2024-07-29 23:13:49,908 INFO    HandlerThread:54531 [interfaces.py:finish():200] Joined memory monitor
+2024-07-29 23:13:49,908 INFO    HandlerThread:54531 [interfaces.py:finish():200] Joined network monitor
+2024-07-29 23:13:49,908 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,908 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 2
+2024-07-29 23:13:49,908 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 3
+2024-07-29 23:13:49,909 DEBUG   SenderThread:54531 [sender.py:send():378] send: telemetry
+2024-07-29 23:13:49,909 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,909 DEBUG   SenderThread:54531 [sender.py:send():378] send: stats
+2024-07-29 23:13:49,909 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 3
+2024-07-29 23:13:49,909 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,909 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 3
+2024-07-29 23:13:49,909 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 4
+2024-07-29 23:13:49,909 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,909 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 4
+2024-07-29 23:13:49,909 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,909 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 4
+2024-07-29 23:13:49,909 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 5
+2024-07-29 23:13:49,909 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,909 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 5
+2024-07-29 23:13:49,909 DEBUG   SenderThread:54531 [sender.py:send():378] send: summary
+2024-07-29 23:13:49,959 INFO    SenderThread:54531 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:13:49,960 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,960 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 5
+2024-07-29 23:13:49,960 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 6
+2024-07-29 23:13:49,960 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:49,960 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 6
+2024-07-29 23:13:49,960 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:49,960 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 6
+2024-07-29 23:13:49,964 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:13:50,144 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 7
+2024-07-29 23:13:50,144 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:50,144 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 7
+2024-07-29 23:13:50,144 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:50,144 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 7
+2024-07-29 23:13:50,906 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:13:50,907 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/config.yaml
+2024-07-29 23:13:50,907 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/wandb-summary.json
+2024-07-29 23:13:51,913 INFO    Thread-12 :54531 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/output.log
+2024-07-29 23:13:53,919 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 8
+2024-07-29 23:13:53,920 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:13:53,921 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:53,921 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 8
+2024-07-29 23:13:53,922 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:53,922 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 8
+2024-07-29 23:13:53,922 INFO    SenderThread:54531 [job_builder.py:build():432] Attempting to build job artifact
+2024-07-29 23:13:53,924 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:13:53,925 INFO    SenderThread:54531 [job_builder.py:_get_source_type():565] is repo sourced job
+2024-07-29 23:13:53,925 WARNING SenderThread:54531 [job_builder.py:_log_if_verbose():267] No program path found, not creating job artifact. See https://docs.wandb.ai/guides/launch/create-job
+2024-07-29 23:13:53,926 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 9
+2024-07-29 23:13:53,926 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:13:53,926 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:53,926 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 9
+2024-07-29 23:13:53,926 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:53,926 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 9
+2024-07-29 23:13:53,926 INFO    SenderThread:54531 [dir_watcher.py:finish():358] shutting down directory watcher
+2024-07-29 23:13:53,932 INFO    SenderThread:54531 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/output.log
+2024-07-29 23:13:53,932 INFO    SenderThread:54531 [dir_watcher.py:finish():388] scan: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files
+2024-07-29 23:13:53,932 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/diff.patch diff.patch
+2024-07-29 23:13:53,932 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/requirements.txt requirements.txt
+2024-07-29 23:13:53,932 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/output.log output.log
+2024-07-29 23:13:53,933 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/config.yaml config.yaml
+2024-07-29 23:13:53,934 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/wandb-summary.json wandb-summary.json
+2024-07-29 23:13:53,935 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml conda-environment.yaml
+2024-07-29 23:13:53,936 INFO    SenderThread:54531 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/wandb-metadata.json wandb-metadata.json
+2024-07-29 23:13:53,936 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 10
+2024-07-29 23:13:53,937 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:53,937 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 10
+2024-07-29 23:13:53,939 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:53,940 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 10
+2024-07-29 23:13:53,940 INFO    SenderThread:54531 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:13:54,343 INFO    wandb-upload_0:54531 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/requirements.txt
+2024-07-29 23:13:54,352 INFO    wandb-upload_1:54531 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/output.log
+2024-07-29 23:13:54,408 INFO    wandb-upload_2:54531 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/config.yaml
+2024-07-29 23:13:54,470 INFO    wandb-upload_3:54531 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/wandb-summary.json
+2024-07-29 23:13:54,471 INFO    wandb-upload_4:54531 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/files/conda-environment.yaml
+2024-07-29 23:13:54,673 INFO    Thread-11 (_thread_body):54531 [sender.py:transition_state():613] send defer: 11
+2024-07-29 23:13:54,673 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:54,674 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 11
+2024-07-29 23:13:54,674 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:54,674 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 11
+2024-07-29 23:13:54,675 INFO    SenderThread:54531 [file_pusher.py:join():175] waiting for file pusher
+2024-07-29 23:13:54,675 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 12
+2024-07-29 23:13:54,675 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:54,675 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 12
+2024-07-29 23:13:54,676 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:54,676 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 12
+2024-07-29 23:13:54,676 INFO    SenderThread:54531 [file_stream.py:finish():601] file stream finish called
+2024-07-29 23:13:54,927 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:13:54,949 INFO    SenderThread:54531 [file_stream.py:finish():605] file stream finish is done
+2024-07-29 23:13:54,949 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 13
+2024-07-29 23:13:54,949 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:13:54,949 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:54,949 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 13
+2024-07-29 23:13:54,950 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:54,950 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 13
+2024-07-29 23:13:54,950 INFO    SenderThread:54531 [sender.py:transition_state():613] send defer: 14
+2024-07-29 23:13:54,950 DEBUG   SenderThread:54531 [sender.py:send():378] send: final
+2024-07-29 23:13:54,950 DEBUG   SenderThread:54531 [sender.py:send():378] send: footer
+2024-07-29 23:13:54,950 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:13:54,950 INFO    HandlerThread:54531 [handler.py:handle_request_defer():184] handle defer: 14
+2024-07-29 23:13:54,950 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:13:54,950 INFO    SenderThread:54531 [sender.py:send_request_defer():609] handle sender defer: 14
+2024-07-29 23:13:54,950 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:13:54,950 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:13:54,951 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: server_info
+2024-07-29 23:13:54,951 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: get_summary
+2024-07-29 23:13:54,951 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: sampled_history
+2024-07-29 23:13:54,951 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: internal_messages
+2024-07-29 23:13:54,951 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:13:54,951 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:13:54,951 DEBUG   SenderThread:54531 [sender.py:send_request():405] send_request: server_info
+2024-07-29 23:13:55,100 INFO    MainThread:54531 [wandb_run.py:_footer_history_summary_info():3994] rendering history
+2024-07-29 23:13:55,100 INFO    MainThread:54531 [wandb_run.py:_footer_history_summary_info():4026] rendering summary
+2024-07-29 23:13:55,100 INFO    MainThread:54531 [wandb_run.py:_footer_sync_info():3953] logging synced files
+2024-07-29 23:13:55,101 DEBUG   HandlerThread:54531 [handler.py:handle_request():158] handle_request: shutdown
+2024-07-29 23:13:55,101 INFO    HandlerThread:54531 [handler.py:finish():882] shutting down handler
+2024-07-29 23:13:55,956 INFO    WriterThread:54531 [datastore.py:close():296] close: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/run-y13kgdr9.wandb
+2024-07-29 23:13:56,105 INFO    SenderThread:54531 [sender.py:finish():1545] shutting down sender
+2024-07-29 23:13:56,106 INFO    SenderThread:54531 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:13:56,107 INFO    SenderThread:54531 [file_pusher.py:join():175] waiting for file pusher
diff --git a/wandb/run-20240729_231335-y13kgdr9/logs/debug.log b/wandb/run-20240729_231335-y13kgdr9/logs/debug.log
new file mode 100644
index 0000000..893504a
--- /dev/null
+++ b/wandb/run-20240729_231335-y13kgdr9/logs/debug.log
@@ -0,0 +1,46 @@
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Configure stats pid to 54425
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:13:35,282 WARNING MainThread:54425 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/logs/debug.log
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231335-y13kgdr9/logs/debug-internal.log
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_init.py:init():610] starting backend
+2024-07-29 23:13:35,282 INFO    MainThread:54425 [wandb_init.py:init():614] setting up manager
+2024-07-29 23:13:35,283 INFO    MainThread:54425 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=spawn,fork,forkserver, using: spawn
+2024-07-29 23:13:35,304 INFO    MainThread:54425 [wandb_init.py:init():622] backend started and connected
+2024-07-29 23:13:35,310 INFO    MainThread:54425 [wandb_init.py:init():711] updated telemetry
+2024-07-29 23:13:35,408 INFO    MainThread:54425 [wandb_init.py:init():744] communicating run to backend with 90.0 second timeout
+2024-07-29 23:13:35,839 INFO    MainThread:54425 [wandb_run.py:_on_init():2396] communicating current version
+2024-07-29 23:13:35,968 INFO    MainThread:54425 [wandb_run.py:_on_init():2405] got version response upgrade_message: "wandb version 0.17.5 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"
+
+2024-07-29 23:13:35,969 INFO    MainThread:54425 [wandb_init.py:init():795] starting run threads in backend
+2024-07-29 23:13:41,615 INFO    MainThread:54425 [wandb_run.py:_console_start():2374] atexit reg
+2024-07-29 23:13:41,615 INFO    MainThread:54425 [wandb_run.py:_redirect():2229] redirect: wrap_raw
+2024-07-29 23:13:41,616 INFO    MainThread:54425 [wandb_run.py:_redirect():2294] Wrapping output streams.
+2024-07-29 23:13:41,616 INFO    MainThread:54425 [wandb_run.py:_redirect():2319] Redirects installed.
+2024-07-29 23:13:41,621 INFO    MainThread:54425 [wandb_init.py:init():838] run started, returning control to user process
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Configure stats pid to 54425
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:13:41,635 WARNING MainThread:54425 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231341-3ufopx2l/logs/debug.log
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231341-3ufopx2l/logs/debug-internal.log
+2024-07-29 23:13:41,636 INFO    MainThread:54425 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:13:41,636 INFO    MainThread:54425 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:13:41,636 INFO    MainThread:54425 [wandb_init.py:init():605] wandb.init() called when a run is still active
+2024-07-29 23:13:46,241 INFO    MainThread:54425 [wandb_run.py:_config_callback():1376] config_cb None None {'algo': 'PPO', 'policy_class': "<class 'stable_baselines3.common.policies.ActorCriticPolicy'>", 'device': 'cpu', 'verbose': 2, 'policy_kwargs': "{'features_extractor_class': <class 'games.model.policy.CustomHeteroGNN'>, 'features_extractor_kwargs': {'features_dim': 64, 'hidden_size': 64, 'num_layer': 2, 'obj_type_id': 'obj', 'arity_dict': {'ChickenOnLane': 2, 'CarOnLane': 2, 'LaneNextToLane': 2}, 'game': 'freeway'}}", 'num_timesteps': 0, '_total_timesteps': 1000000, '_num_timesteps_at_start': 0, 'seed': 'None', 'action_noise': 'None', 'start_time': 1722287626235599000, 'learning_rate': 0.0003, 'tensorboard_log': 'None', '_last_obs': '[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [105. 150.   0.   0.   0.   1.   0.]\n  [ 58.  50.   2.   0.   0.   0.   1.]\n  [ 87. 150.   2.   0.   0.   0.   1.]\n  [148.  50.   2.   0.   0.   0.   1.]\n  [121. 100.   1.   0.   0.   0.   1.]\n  [178. 100.   1.   0.   0.   0.   1.]\n  [ 34.  50.   1.   0.   0.   0.   1.]\n  [ 60.  50.   2.   0.   0.   0.   1.]\n  [111. 100.   1.   0.   0.   0.   1.]\n  [112. 150.   1.   0.   0.   0.   1.]\n  [157. 150.   2.   0.   0.   0.   1.]]]', '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', 'env': '<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x292587e20>', '_vec_normalize_env': 'None', 'observation_space': 'Box(-inf, inf, (14, 7), float32)', 'action_space': 'Discrete(3)', 'n_envs': 1, 'n_steps': 2048, 'gamma': 0.99, 'gae_lambda': 0.95, 'ent_coef': 0.0, 'vf_coef': 0.5, 'max_grad_norm': 0.5, 'rollout_buffer_class': "<class 'stable_baselines3.common.buffers.RolloutBuffer'>", 'rollout_buffer_kwargs': '{}', 'batch_size': 64, 'n_epochs': 10, 'clip_range': '<function get_schedule_fn.<locals>.<lambda> at 0x17fea2440>', 'clip_range_vf': 'None', 'normalize_advantage': 'True', 'target_kl': 'None', 'lr_schedule': '<function get_schedule_fn.<locals>.<lambda> at 0x17fea36d0>', 'rollout_buffer': '<stable_baselines3.common.buffers.RolloutBuffer object at 0x17fecc190>', 'policy': 'ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net): Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64, out_features=1, bias=True)\n)', '_logger': '<stable_baselines3.common.logger.Logger object at 0x17ff5db10>'}
+2024-07-29 23:13:56,114 WARNING MsgRouterThr:54425 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_231335-y13kgdr9/run-y13kgdr9.wandb b/wandb/run-20240729_231335-y13kgdr9/run-y13kgdr9.wandb
new file mode 100644
index 0000000..a7508e1
Binary files /dev/null and b/wandb/run-20240729_231335-y13kgdr9/run-y13kgdr9.wandb differ
diff --git a/wandb/run-20240729_231341-3ufopx2l/logs/debug.log b/wandb/run-20240729_231341-3ufopx2l/logs/debug.log
new file mode 100644
index 0000000..1018be6
--- /dev/null
+++ b/wandb/run-20240729_231341-3ufopx2l/logs/debug.log
@@ -0,0 +1,17 @@
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Configure stats pid to 54425
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:13:41,635 WARNING MainThread:54425 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231341-3ufopx2l/logs/debug.log
+2024-07-29 23:13:41,635 INFO    MainThread:54425 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231341-3ufopx2l/logs/debug-internal.log
+2024-07-29 23:13:41,636 INFO    MainThread:54425 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:13:41,636 INFO    MainThread:54425 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:13:41,636 INFO    MainThread:54425 [wandb_init.py:init():605] wandb.init() called when a run is still active
+2024-07-29 23:13:46,241 INFO    MainThread:54425 [wandb_run.py:_config_callback():1376] config_cb None None {'algo': 'PPO', 'policy_class': "<class 'stable_baselines3.common.policies.ActorCriticPolicy'>", 'device': 'cpu', 'verbose': 2, 'policy_kwargs': "{'features_extractor_class': <class 'games.model.policy.CustomHeteroGNN'>, 'features_extractor_kwargs': {'features_dim': 64, 'hidden_size': 64, 'num_layer': 2, 'obj_type_id': 'obj', 'arity_dict': {'ChickenOnLane': 2, 'CarOnLane': 2, 'LaneNextToLane': 2}, 'game': 'freeway'}}", 'num_timesteps': 0, '_total_timesteps': 1000000, '_num_timesteps_at_start': 0, 'seed': 'None', 'action_noise': 'None', 'start_time': 1722287626235599000, 'learning_rate': 0.0003, 'tensorboard_log': 'None', '_last_obs': '[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [105. 150.   0.   0.   0.   1.   0.]\n  [ 58.  50.   2.   0.   0.   0.   1.]\n  [ 87. 150.   2.   0.   0.   0.   1.]\n  [148.  50.   2.   0.   0.   0.   1.]\n  [121. 100.   1.   0.   0.   0.   1.]\n  [178. 100.   1.   0.   0.   0.   1.]\n  [ 34.  50.   1.   0.   0.   0.   1.]\n  [ 60.  50.   2.   0.   0.   0.   1.]\n  [111. 100.   1.   0.   0.   0.   1.]\n  [112. 150.   1.   0.   0.   0.   1.]\n  [157. 150.   2.   0.   0.   0.   1.]]]', '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', 'env': '<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x292587e20>', '_vec_normalize_env': 'None', 'observation_space': 'Box(-inf, inf, (14, 7), float32)', 'action_space': 'Discrete(3)', 'n_envs': 1, 'n_steps': 2048, 'gamma': 0.99, 'gae_lambda': 0.95, 'ent_coef': 0.0, 'vf_coef': 0.5, 'max_grad_norm': 0.5, 'rollout_buffer_class': "<class 'stable_baselines3.common.buffers.RolloutBuffer'>", 'rollout_buffer_kwargs': '{}', 'batch_size': 64, 'n_epochs': 10, 'clip_range': '<function get_schedule_fn.<locals>.<lambda> at 0x17fea2440>', 'clip_range_vf': 'None', 'normalize_advantage': 'True', 'target_kl': 'None', 'lr_schedule': '<function get_schedule_fn.<locals>.<lambda> at 0x17fea36d0>', 'rollout_buffer': '<stable_baselines3.common.buffers.RolloutBuffer object at 0x17fecc190>', 'policy': 'ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net): Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64, out_features=1, bias=True)\n)', '_logger': '<stable_baselines3.common.logger.Logger object at 0x17ff5db10>'}
+2024-07-29 23:13:56,114 WARNING MsgRouterThr:54425 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml b/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml
new file mode 100644
index 0000000..2d5ad15
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml
@@ -0,0 +1,103 @@
+name: games
+channels:
+  - http://conda.anaconda.org/gurobi
+  - apple
+  - conda-forge
+  - defaults
+dependencies:
+  - bzip2=1.0.8=h93a5062_5
+  - ca-certificates=2024.2.2=hf0a4a13_0
+  - libffi=3.4.2=h3422bc3_5
+  - libsqlite=3.45.3=h091b4b1_0
+  - libzlib=1.2.13=h53f4e23_5
+  - ncurses=6.5=hb89a1cb_0
+  - openssl=3.3.0=hfb2fe0b_3
+  - pip=23.3.1=pyhd8ed1ab_0
+  - python=3.10.14=h2469fbe_0_cpython
+  - readline=8.2=h92ec313_1
+  - setuptools=68.2.2=pyhd8ed1ab_0
+  - tk=8.6.13=h5083fa2_1
+  - wheel=0.42.0=pyhd8ed1ab_0
+  - xz=5.2.6=h57fd34a_0
+  - pip:
+      - absl-py==2.1.0
+      - aiohttp==3.9.5
+      - aiosignal==1.3.1
+      - ale-py==0.8.1
+      - async-timeout==4.0.3
+      - atari-py==0.2.5
+      - attrs==23.2.0
+      - autorom==0.4.2
+      - autorom-accept-rom-license==0.6.1
+      - certifi==2024.2.2
+      - charset-normalizer==3.3.2
+      - click==8.1.7
+      - cloudpickle==3.0.0
+      - contourpy==1.2.1
+      - cycler==0.12.1
+      - docker-pycreds==0.4.0
+      - farama-notifications==0.0.4
+      - filelock==3.14.0
+      - fonttools==4.52.4
+      - frozenlist==1.4.1
+      - fsspec==2024.5.0
+      - gitdb==4.0.11
+      - gitpython==3.1.43
+      - grpcio==1.64.0
+      - gymnasium==0.29.1
+      - idna==3.7
+      - imageio==2.34.1
+      - importlib-resources==6.4.0
+      - jinja2==3.1.4
+      - joblib==1.4.2
+      - kiwisolver==1.4.5
+      - lazy-loader==0.4
+      - lightning==2.2.5
+      - lightning-utilities==0.11.2
+      - markdown==3.6
+      - markupsafe==2.1.5
+      - matplotlib==3.9.0
+      - mpmath==1.3.0
+      - multidict==6.0.5
+      - networkx==3.3
+      - numpy==1.26.4
+      - opencv-python==4.10.0.84
+      - packaging==24.0
+      - pandas==2.2.2
+      - pillow==10.3.0
+      - platformdirs==4.2.2
+      - protobuf==4.25.3
+      - psutil==5.9.8
+      - pygame==2.5.2
+      - pyparsing==3.1.2
+      - python-dateutil==2.9.0.post0
+      - pytorch-lightning==2.2.5
+      - pytz==2024.1
+      - pyyaml==6.0.1
+      - requests==2.32.2
+      - sb3-contrib==2.3.0
+      - scikit-image==0.23.2
+      - scikit-learn==1.5.0
+      - scipy==1.13.1
+      - sentry-sdk==2.3.1
+      - setproctitle==1.3.3
+      - shimmy==0.2.1
+      - six==1.16.0
+      - smmap==5.0.1
+      - stable-baselines3==2.3.2
+      - sympy==1.12
+      - tensorboard==2.16.2
+      - tensorboard-data-server==0.7.2
+      - threadpoolctl==3.5.0
+      - tifffile==2024.5.22
+      - torch==2.3.0
+      - torch-geometric==2.5.3
+      - torchmetrics==1.4.0.post0
+      - tqdm==4.66.4
+      - typing-extensions==4.12.0
+      - tzdata==2024.1
+      - urllib3==2.2.1
+      - wandb==0.17.0
+      - werkzeug==3.0.3
+      - yarl==1.9.4
+prefix: /Users/rishubbhatia/miniforge3/envs/games
diff --git a/wandb/run-20240729_231650-t30hczxn/files/config.yaml b/wandb/run-20240729_231650-t30hczxn/files/config.yaml
new file mode 100644
index 0000000..fd7fa64
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/config.yaml
@@ -0,0 +1,217 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    python_version: 3.10.14
+    cli_version: 0.17.0
+    framework: torch
+    is_jupyter_run: false
+    is_kaggle_kernel: false
+    start_time: 1722287810
+    t:
+      1:
+      - 1
+      - 55
+      - 77
+      2:
+      - 1
+      - 55
+      - 77
+      3:
+      - 22
+      - 23
+      - 24
+      - 34
+      - 35
+      4: 3.10.14
+      5: 0.17.0
+      8:
+      - 4
+      - 5
+      13: darwin-arm64
+algo:
+  desc: null
+  value: PPO
+policy_class:
+  desc: null
+  value: <class 'stable_baselines3.common.policies.ActorCriticPolicy'>
+device:
+  desc: null
+  value: cpu
+verbose:
+  desc: null
+  value: 2
+policy_kwargs:
+  desc: null
+  value: '{''features_extractor_class'': <class ''games.model.policy.CustomHeteroGNN''>,
+    ''features_extractor_kwargs'': {''features_dim'': 64, ''hidden_size'': 64, ''num_layer'':
+    2, ''obj_type_id'': ''obj'', ''arity_dict'': {''ChickenOnLane'': 2, ''CarOnLane'':
+    2, ''LaneNextToLane'': 2}, ''game'': ''freeway''}}'
+num_timesteps:
+  desc: null
+  value: 0
+_total_timesteps:
+  desc: null
+  value: 100000
+_num_timesteps_at_start:
+  desc: null
+  value: 0
+seed:
+  desc: null
+  value: None
+action_noise:
+  desc: null
+  value: None
+start_time:
+  desc: null
+  value: 1722287817624641000
+learning_rate:
+  desc: null
+  value: 0.0003
+tensorboard_log:
+  desc: null
+  value: None
+_last_obs:
+  desc: null
+  value: "[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.\
+    \   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [105. 150.   0.   0.   0. \
+    \  1.   0.]\n  [ 96. 100.   2.   0.   0.   0.   1.]\n  [ 80.  50.   1.   0.  \
+    \ 0.   0.   1.]\n  [ 69. 150.   1.   0.   0.   0.   1.]\n  [ 32. 100.   2.   0.\
+    \   0.   0.   1.]\n  [ 35. 100.   1.   0.   0.   0.   1.]\n  [181.  50.   2. \
+    \  0.   0.   0.   1.]\n  [ 65. 150.   2.   0.   0.   0.   1.]\n  [107. 100.  \
+    \ 2.   0.   0.   0.   1.]\n  [ 87.  50.   2.   0.   0.   0.   1.]\n  [112.  50.\
+    \   2.   0.   0.   0.   1.]]]"
+_last_episode_starts:
+  desc: null
+  value: '[ True]'
+_last_original_obs:
+  desc: null
+  value: None
+_episode_num:
+  desc: null
+  value: 0
+use_sde:
+  desc: null
+  value: 'False'
+sde_sample_freq:
+  desc: null
+  value: -1
+_current_progress_remaining:
+  desc: null
+  value: 1.0
+_stats_window_size:
+  desc: null
+  value: 100
+ep_info_buffer:
+  desc: null
+  value: deque([], maxlen=100)
+ep_success_buffer:
+  desc: null
+  value: deque([], maxlen=100)
+_n_updates:
+  desc: null
+  value: 0
+_custom_logger:
+  desc: null
+  value: 'False'
+env:
+  desc: null
+  value: <stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x293a6e650>
+_vec_normalize_env:
+  desc: null
+  value: None
+observation_space:
+  desc: null
+  value: Box(-inf, inf, (14, 7), float32)
+action_space:
+  desc: null
+  value: Discrete(3)
+n_envs:
+  desc: null
+  value: 1
+n_steps:
+  desc: null
+  value: 2048
+gamma:
+  desc: null
+  value: 0.99
+gae_lambda:
+  desc: null
+  value: 0.95
+ent_coef:
+  desc: null
+  value: 0.0
+vf_coef:
+  desc: null
+  value: 0.5
+max_grad_norm:
+  desc: null
+  value: 0.5
+rollout_buffer_class:
+  desc: null
+  value: <class 'stable_baselines3.common.buffers.RolloutBuffer'>
+rollout_buffer_kwargs:
+  desc: null
+  value: '{}'
+batch_size:
+  desc: null
+  value: 64
+n_epochs:
+  desc: null
+  value: 10
+clip_range:
+  desc: null
+  value: <function get_schedule_fn.<locals>.<lambda> at 0x17714a440>
+clip_range_vf:
+  desc: null
+  value: None
+normalize_advantage:
+  desc: null
+  value: 'True'
+target_kl:
+  desc: null
+  value: None
+lr_schedule:
+  desc: null
+  value: <function get_schedule_fn.<locals>.<lambda> at 0x17714b760>
+rollout_buffer:
+  desc: null
+  value: <stable_baselines3.common.buffers.RolloutBuffer object at 0x293a8e5f0>
+policy:
+  desc: null
+  value: "ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model):\
+    \ HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n\
+    \        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128,\
+    \ 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n\
+    \    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7,\
+    \ 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14,\
+    \ 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n\
+    \    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7,\
+    \ 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14,\
+    \ 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net):\
+    \ Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n\
+    \      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n\
+    \      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64,\
+    \ out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64,\
+    \ out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net):\
+    \ Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64,\
+    \ out_features=1, bias=True)\n)"
+_logger:
+  desc: null
+  value: <stable_baselines3.common.logger.Logger object at 0x1771f6140>
diff --git a/wandb/run-20240729_231650-t30hczxn/files/diff.patch b/wandb/run-20240729_231650-t30hczxn/files/diff.patch
new file mode 100644
index 0000000..d62bd2d
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/diff.patch
@@ -0,0 +1,6638 @@
+diff --git a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc
+index 3dc7f23..8490ed7 100644
+Binary files a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc and b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc
+index 01b141a..52e212e 100644
+Binary files a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc and b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc
+index cf3f63c..6886c20 100644
+Binary files a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc and b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc differ
+diff --git a/games/freeway/run_supervised_gnn.py b/games/freeway/run_supervised_gnn.py
+index 317183e..941c3f1 100644
+--- a/games/freeway/run_supervised_gnn.py
++++ b/games/freeway/run_supervised_gnn.py
+@@ -95,7 +95,7 @@ log_dir = "./logs/"
+ os.makedirs(log_dir, exist_ok=True)
+ 
+ # Create and configure the custom callback
+-save_best_callback = SaveOnBestTrainingRewardCallback(check_freq=1000, log_dir=log_dir)
++#save_best_callback = SaveOnBestTrainingRewardCallback(check_freq=1000, log_dir=log_dir)
+ 
+ # Train the model with WandbCallback and the custom callback
+-model.learn(total_timesteps=1000000, callback=[WandbCallback(), save_best_callback])
++model.learn(total_timesteps=100000, callback=[WandbCallback()])
+diff --git a/games/model/__pycache__/hetero_gnn.cpython-310.pyc b/games/model/__pycache__/hetero_gnn.cpython-310.pyc
+index 7853617..6848b80 100644
+Binary files a/games/model/__pycache__/hetero_gnn.cpython-310.pyc and b/games/model/__pycache__/hetero_gnn.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc
+index 243e3b4..7b29371 100644
+Binary files a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc and b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/policy.cpython-310.pyc b/games/model/__pycache__/policy.cpython-310.pyc
+index 18a2c62..27f7950 100644
+Binary files a/games/model/__pycache__/policy.cpython-310.pyc and b/games/model/__pycache__/policy.cpython-310.pyc differ
+Submodule games/pacman contains modified content
+diff --git a/games/pacman/config.py b/games/pacman/config.py
+deleted file mode 100644
+index 73568ce..0000000
+--- a/games/pacman/config.py
++++ /dev/null
+@@ -1,40 +0,0 @@
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]+"/games/pacman"
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-# set up the colors 
+-ghostcolor = {}
+-ghostcolor[0] = (255, 0, 0, 255)
+-ghostcolor[1] = (255, 128, 255, 255)
+-ghostcolor[2] = (128, 255, 255, 255)
+-ghostcolor[3] = (255, 128, 0, 255)
+-ghostcolor[4] = (50, 50, 255, 255) # blue, vulnerable ghost
+-ghostcolor[5] = (255, 255, 255, 255) # white, flashing ghost
+\ No newline at end of file
+diff --git a/games/pacman/fruit.py b/games/pacman/fruit.py
+deleted file mode 100644
+index 51e2b1c..0000000
+--- a/games/pacman/fruit.py
++++ /dev/null
+@@ -1,112 +0,0 @@
+-from games.pacman.config import *
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        #self.thisGame = thisGame
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self, thisGame):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            #snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+diff --git a/games/pacman/game.py b/games/pacman/game.py
+deleted file mode 100644
+index 334c813..0000000
+--- a/games/pacman/game.py
++++ /dev/null
+@@ -1,214 +0,0 @@
+-from games.pacman.config import *
+-import os
+-import pygame
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self, thisFruit, player, screen):
+-        self.player = player
+-        self.screen = screen
+-        self.thisFruit = thisFruit
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 4 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self, thisLevel, tileID, tileIDImage, tileIDName):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 1 )
+-        thisLevel.LoadLevel( self.GetLevelNum(), tileID, tileIDImage , tileIDName)
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                #snd_extralife.play()
+-                self.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (self.thisFruit.imFruit[ self.thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self, thisLevel):
+-            
+-        possibleScreenX = self.player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = self.player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        self.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        self.thisLevel.LoadLevel( self.thisGame.GetLevelNum() )
+-        
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+\ No newline at end of file
+diff --git a/games/pacman/ghost.py b/games/pacman/ghost.py
+deleted file mode 100644
+index 628eb75..0000000
+--- a/games/pacman/ghost.py
++++ /dev/null
+@@ -1,174 +0,0 @@
+-from games.pacman.config import *
+-
+-class ghost ():
+-    def __init__ (self, ghostID, path, screen, player):
+-        self.player = player
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.ghostTimer = 0
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self, thisGame, tileID, tileIDImage, ghosts):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if self.player.x > self.x and self.player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif self.player.x < self.x and self.player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif self.player.x > self.x and self.player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif self.player.x < self.x and self.player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            self.screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            self.screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self, thisLevel, tileID):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay(thisLevel, tileID)
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = self.path.FindPath( (self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol) )
+-                self.FollowNextPathWay(thisLevel, tileID)
+-            
+-    def FollowNextPathWay(self, thisLevel, tileID, counter=0, max_recursion_depth=900):
+-        # Stop recursion if the maximum depth is reached
+-        if counter >= max_recursion_depth:
+-            return
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-            else:
+-                # this ghost has reached his destination!!
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1) 
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID['pellet'] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (randRow, randCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1)
+\ No newline at end of file
+diff --git a/games/pacman/images/blue.png b/games/pacman/images/blue.png
+deleted file mode 100644
+index c633636..0000000
+Binary files a/games/pacman/images/blue.png and /dev/null differ
+diff --git a/games/pacman/images/pacman.png b/games/pacman/images/pacman.png
+deleted file mode 100644
+index d005d4d..0000000
+Binary files a/games/pacman/images/pacman.png and /dev/null differ
+diff --git a/games/pacman/images/pink.png b/games/pacman/images/pink.png
+deleted file mode 100644
+index 9614f58..0000000
+Binary files a/games/pacman/images/pink.png and /dev/null differ
+diff --git a/games/pacman/images/play.png b/games/pacman/images/play.png
+deleted file mode 100644
+index 05842b1..0000000
+Binary files a/games/pacman/images/play.png and /dev/null differ
+diff --git a/games/pacman/images/red.png b/games/pacman/images/red.png
+deleted file mode 100644
+index 5c5ea84..0000000
+Binary files a/games/pacman/images/red.png and /dev/null differ
+diff --git a/games/pacman/images/win.png b/games/pacman/images/win.png
+deleted file mode 100644
+index 728ccdf..0000000
+Binary files a/games/pacman/images/win.png and /dev/null differ
+diff --git a/games/pacman/images/yellow.png b/games/pacman/images/yellow.png
+deleted file mode 100644
+index 8db5a0a..0000000
+Binary files a/games/pacman/images/yellow.png and /dev/null differ
+diff --git a/games/pacman/level.py b/games/pacman/level.py
+deleted file mode 100644
+index b5153ee..0000000
+--- a/games/pacman/level.py
++++ /dev/null
+@@ -1,471 +0,0 @@
+-from games.pacman.config import *
+-
+-class level ():
+-    
+-    def __init__ (self, game, player, ghosts, path, Fruit, screen):
+-        self.player = player
+-        self.ghosts = ghosts
+-        self.path = path
+-        self.thisFruit = Fruit
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        self.thisLevel = level
+-        # self.snd_pellet = snd_pellet
+-        # self.snd_powerpellet = snd_powerpellet
+-        self.map = {}
+-        self.thisGame = game
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        self.screen = screen
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > self.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > self.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = self.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-    def GetWallLocations(self):
+-        wallLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.IsWall(row, col):
+-                    wallLocations.append((row, col))
+-        return wallLocations 
+-    
+-    def GetPelletLocations(self):
+-        pelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 2:
+-                    pelletLocations.append((row*16, col*16))
+-        return pelletLocations
+-    
+-    def GetPowerPelletLocations(self):
+-        powerPelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 3:
+-                    powerPelletLocations.append((row, col))
+-        return powerPelletLocations
+-    
+-
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-        
+-    # check if player has hit a pellet, powerpellet or a wall
+-    def CheckIfHit(self, playerX, playerY, row, col, tileID):
+-        
+-            for iRow in range(row - 1, row + 2, 1):
+-                for iCol in range(col - 1, col + 2, 1):
+-                
+-                    if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                        # check the offending tile ID
+-                        result = self.GetMapTile(iRow, iCol)
+-            
+-                        if result == tileID:
+-                            return True   
+-                        elif result >= 100 and result <= 199:
+-                            return True
+-                        else:
+-                            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col, tileID):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = self.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_pellet[self.player.pelletSndNum].play()
+-                        self.player.pelletSndNum = 1 - self.player.pelletSndNum
+-                        
+-                        self.pellets -= 1
+-                        
+-                        self.thisGame.AddToScore(10)
+-                        
+-                        if self.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            self.thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_powerpellet.play()
+-                        
+-                        self.thisGame.AddToScore(100)
+-                        self.thisGame.ghostValue = 200
+-                        
+-                        self.thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if self.ghosts[i].state == 1:
+-                                self.ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, self.thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if self.thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    self.player.x = i * 16
+-                                    
+-                                    if self.player.velX > 0:
+-                                        self.player.x += 16
+-                                    else:
+-                                        self.player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, self.thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if self.thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    self.player.y = i * 16
+-                                    
+-                                    if self.player.velY > 0:
+-                                        self.player.y += 16
+-                                    else:
+-                                        self.player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self, tileID):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self,  tileID):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if self.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if self.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self, tileID, tileIDImage):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, self.thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, self.thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = self.thisGame.screenNearestTilePos[0] + row
+-                actualCol = self.thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        self.screen.blit (self.thisGame.imLogo, (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                        self.screen.blit(self.thisGame.imHiscores,(col*16-self.thisGame.screenPixelOffset[0],row*16-self.thisGame.screenPixelOffset[1]))
+-                    
+-              
+-                    else:
+-                        self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-    
+-    
+-    def GetCrossRef(self, tileIDName, tileID, tileIDImage):
+-        for key, value in tileIDName.items():
+-            thisID = key
+-            if thisID not in NO_GIF_TILES:
+-                tileIDImage[thisID] = pygame.image.load(os.path.join(SCRIPT_PATH, "res", "tiles", value + ".gif")).convert()
+-            else:
+-                tileIDImage[thisID] = pygame.Surface((16, 16))
+-
+-            # Change colors in tileIDImage to match maze colors
+-            for y in range(16):
+-                for x in range(16):
+-                    current_color = tileIDImage[thisID].get_at((x, y))
+-                    if current_color == (255, 206, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeLightColor)
+-                    elif current_color == (132, 0, 132, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.fillColor)
+-                    elif current_color == (255, 0, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeShadowColor)
+-                    elif current_color == (128, 0, 128, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.pelletColor)
+-
+-
+-
+-    def LoadLevel (self, levelNum, tileID, tileIDImage, tileIDName):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    self.thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            self.player.homeX = k * 16
+-                            self.player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the self.ghosts
+-                            
+-                            self.ghosts[thisID - 10].homeX = k * 16
+-                            self.ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        self.GetCrossRef(tileIDName, tileID, tileIDImage)
+-
+-        # load map into the pathfinder object
+-        self.path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, self.path.size[0], 1):
+-            for col in range(0, self.path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    self.path.SetType( row, col, 1 )
+-                else:
+-                    self.path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart(tileID)
+-        
+-    def Restart (self, tileID):
+-        
+-        for i in range(0, 4, 1):
+-            # move self.ghosts back to home
+-
+-            self.ghosts[i].x = self.ghosts[i].homeX
+-            self.ghosts[i].y = self.ghosts[i].homeY
+-            self.ghosts[i].velX = 0
+-            self.ghosts[i].velY = 0
+-            self.ghosts[i].state = 1
+-            self.ghosts[i].speed = 1
+-            self.ghosts[i].Move(self, tileID)
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            self.ghosts[i].currentPath = self.path.FindPath( (self.ghosts[i].nearestRow, self.ghosts[i].nearestCol), (randRow, randCol) )
+-            self.ghosts[i].FollowNextPathWay(self, tileID)
+-            
+-        self.thisFruit.active = False
+-            
+-        self.thisGame.fruitTimer = 0
+-
+-        self.player.x = self.player.homeX
+-        self.player.y = self.player.homeY
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        self.player.animFrame = 3
+-
+-
+diff --git a/games/pacman/pacman.py b/games/pacman/pacman.py
+deleted file mode 100644
+index 70436f3..0000000
+--- a/games/pacman/pacman.py
++++ /dev/null
+@@ -1,686 +0,0 @@
+-import random
+-import pygame
+-import numpy as np
+-from pygame.math import Vector2
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-        # create a 2d grid numpy array of 20x20
+-
+-
+-
+-    
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-        self.ghost_eating = False
+-        self.position = Vector2(x, y)  # Current position as a vector
+-        self.goal = Vector2()  # Goal position initialized to zero vector
+-        self.directions = {
+-            'up': Vector2(0, -1),
+-            'down': Vector2(0, 1),
+-            'left': Vector2(-1, 0),
+-            'right': Vector2(1, 0)
+-        }
+-
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-   
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-    
+-
+-
+-class Ghost(Player):
+-    """
+-    Class to handle ghosts, inheriting from Player.
+-    """
+-    def __init__(self, x, y, filename, game):
+-        super().__init__(x, y, filename)
+-        self.game = game
+-
+-    def update_behavior(self, pacman):
+-        self.mode = "flee" if pacman.ghost_eating else "chase"
+-
+-    def move(self, pacman):
+-        self.update_behavior(pacman)
+-        direction = self.chase_pacman() if self.mode == "chase" else self.run_away_from_pacman()
+-        if direction:
+-            movement = self.calculate_movement(direction)
+-            self.change_speed(*movement)
+-
+-    def chase_pacman(self):
+-        return self.goal_direction(self.game.game_map)
+-
+-    def run_away_from_pacman(self):
+-        furthest_point = self.find_furthest_point()
+-        self.set_goal(*furthest_point)
+-        return self.goal_direction(self.game.game_map)
+-
+-    def find_furthest_point(self):
+-        max_distance = 0
+-        furthest_point = (self.rect.x, self.rect.y)
+-        for y in range(self.game.path_finder.size[0]):
+-            for x in range(self.game.path_finder.size[1]):
+-                if self.game.game_map[y][x] == 0:
+-                    distance = (Vector2(x, y) - self.position).length_squared()
+-                    if distance > max_distance:
+-                        max_distance = distance
+-                        furthest_point = (x, y)
+-        return furthest_point
+-
+-    def goal_direction(self, game_map):
+-        TILEWIDTH = 30
+-        distances = []
+-        directions = list(self.directions.keys())
+-        for direction in directions:
+-            next_position = self.position + self.directions[direction] * TILEWIDTH
+-            if game_map[int(next_position.y // TILEWIDTH)][int(next_position.x // TILEWIDTH)] == 1:
+-                distances.append(float('inf'))
+-            else:
+-                vec = next_position - self.goal
+-                distances.append(vec.length_squared())
+-        if min(distances) == float('inf'):
+-            return None
+-        else:
+-            index = distances.index(min(distances))
+-            return directions[index]
+-
+-    def calculate_movement(self, direction):
+-        movement_map = {
+-            'up': (0, -30),
+-            'down': (0, 30),
+-            'left': (-30, 0),
+-         'right': (30, 0)
+-        }
+-        return movement_map.get(direction, (0, 0)) 
+-    
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.cell_size = 30
+-        self.grid_width = 20
+-        self.grid_height = 20
+-        #self.path_finder = path_finder()
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-       
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        self.block_list = pygame.sprite.RenderPlain()
+-        self.ghost_list = pygame.sprite.RenderPlain()
+-        self.pacman_collide = pygame.sprite.RenderPlain()
+-        self.wall_list = self.setup_walls()
+-
+-        self.gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        self.pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(self.pacman)
+-        self.pacman_collide.add(self.pacman)
+-
+-        self.ghost_two = Ghost(w, b_h, 'images/red.png', self)
+-        self.ghost_list.add(self.ghost_two)
+-        self.all_sprites_list.add(self.ghost_two)
+-
+-        self.ghost_one = Ghost(w, m_h, 'images/pink.png', self)
+-        self.ghost_list.add(self.ghost_one)
+-        self.all_sprites_list.add(self.ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png',self)
+-        self.ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png',self)
+-        self.ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-        grid = [[0 for _ in range(19)] for _ in range(19)]
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, self.wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, self.pacman_collide, False)
+-                    if b_collide:
+-                        grid[row][column] = 1
+-
+-                        continue
+-
+-                    elif p_collide:
+-                        grid[row][column] = 0
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        grid[row][column] = 0
+-                        self.block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # create new grid which is 20x20 with edges as 1 from grid
+-        
+-        new_grid = [[1 if i == 0 or i == 19 or j == 0 or j == 19 else grid[i-1][j-1] for j in range(20)] for i in range(20)] 
+-        self.game_map = new_grid
+-        self.path_finder.ResizeMap(20, 20)
+-        self.update_path_finder_with_walls(new_grid)
+-        blocks = list(self.block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-        self.power_pellet_list = pygame.sprite.RenderPlain()
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            self.power_pellet_list.add(power_pellet)
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        self.bll = len(self.block_list)
+-
+-
+-   
+-
+-    def update_path_finder_with_walls(self, grid):
+-        for i in range(len(grid[0])):
+-            for j in range(len(grid[1])):
+-                self.path_finder.SetType(i,j, grid[i][j])
+-
+-
+-
+-    def get_maze_size(self):
+-        max_width = 0
+-        max_height = 0
+-
+-        for wall in self.walls:
+-            x, y, width, height = wall
+-            # Calculate the furthest extents of the walls
+-            max_width = max(max_width, x + width)
+-            max_height = max(max_height, y + height)
+-
+-        return max_width, max_height
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate 
+-    
+-
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-
+-
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-       
+-
+-        
+-                
+-       
+-
+-        # Get the unique row indices
+-
+-        
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, -30)
+-
+-            self.pacman.update(self.wall_list, self.gate) 
+-
+-            # Assuming new_grid is your grid
+-            
+-
+-            # Check if the two grids are the same
+-            # print(f"new_grid_np: {new_grid_np}")
+-            # print(f"path_finder_grid: {path_finder_grid}")
+-            # print(f"Are the grids equal? {are_grids_equal}")
+-        # whic
+-            #self.ghost_one.move(self.pacman)
+-            self.ghost_two.move(self.pacman)
+-            # ghost_three.move(pacman)
+-            # ghost_four.move(pacman)
+-
+-            # ghost_one.update(wall_list, None)
+-            self.ghost_two.update(self.wall_list, None)
+-            print(f"Ghost Two position: {self.ghost_two.rect.x}, {self.ghost_two.rect.y}")
+-            print("Is Ghost Two in all_sprites_list?", self.ghost_two in self.all_sprites_list)
+-            print("Is Ghost Two in ghost_list?", self.ghost_two in self.ghost_list)
+-            # ghost_three.update(wall_list, None)
+-            # ghost_four.update(wall_list, None)
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(self.pacman, self.block_list, True) 
+-            power_pellets_hit_list = pygame.sprite.spritecollide(self.pacman, self.power_pellet_list, True)
+-            # check if pacman hits any power pellet
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            self.wall_list.draw(self.screen)
+-            self.gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            self.ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(self.bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == self.bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(self.pacman, self.ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_env.py b/games/pacman/pacman_env.py
+deleted file mode 100644
+index e185f02..0000000
+--- a/games/pacman/pacman_env.py
++++ /dev/null
+@@ -1,370 +0,0 @@
+-import gym
+-from gym import spaces
+-import pygame
+-import numpy as np
+-import os
+-import sys
+-from pygame.locals import *
+-import time
+-# Import your game modules
+-from games.pacman.player import pacman
+-from games.pacman.ghost import ghost
+-from games.pacman.path import path_finder
+-from games.pacman.level import level
+-from games.pacman.game import game
+-from games.pacman.fruit import fruit
+-from games.pacman.config import *
+-import networkx as nx
+-from games.encoder.GraphEncoder import GraphConverter
+-
+-class PacmanEnv(gym.Env):
+-    metadata = {'render.modes': ['human', 'rgb_array']}
+-    def __init__(self):
+-        super(PacmanEnv, self).__init__()
+-
+-        # Action space (4 directions)
+-        self.action_space = spaces.Discrete(4)  # [Up, Down, Left, Right]
+-
+-        # Observation space (Assuming a RGB image of the screen)
+-        self.observation_space = spaces.Box(low=0, high=255,
+-                                            shape=(self.window_height, self.window_width, 3 * self.frame_stack),
+-                                            dtype=np.uint8)
+-        # Initialize the game
+-        pygame.init()
+-        self.window = pygame.display.set_mode((1, 1))
+-        img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-        pygame.display.set_caption("Pacman")
+-        self.screen = pygame.display.get_surface()
+-        self.tileID = {}
+-        self.tileIDName = {}
+-        self.tileIDImage = {}
+-        self.NO_GIF_TILES = set()
+-        self.path = path_finder()
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen)
+-        self.frame_stack = 4 
+-        self.window_width = 336
+-        self.window_height = 400
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        self.load_resources()
+-
+-
+-    def load_resources(self):
+-        lineNum = 0
+-        self.SCRIPT_PATH = os.path.dirname(__file__)
+-        res_path = os.path.join(self.SCRIPT_PATH, "res")
+-        # Load background images
+-        self.img_Background = pygame.image.load(os.path.join(res_path, "backgrounds", "1.gif")).convert()
+-        
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-
+-        # Load tile images and other assets by initializing the cross-reference data structures
+-          # Define this properly based on your game's requirements
+-
+-        # Assume crossref.txt has the mappings from tile ID to tile names and their associated images
+-        for i in f.readlines():
+-            # print " ========= Line " + str(lineNum) + " ============ "
+-            while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-            while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-            str_splitBySpace = i.split(' ')
+-            
+-            j = str_splitBySpace[0]
+-                
+-            if (j == "'" or j == "" or j == "#"):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-            else:
+-                # print str(wordNum) + ". " + j
+-                useLine = True
+-            
+-            if useLine == True:
+-                self.tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-                self.tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-                
+-                thisID = int(str_splitBySpace[0])
+-                if not thisID in NO_GIF_TILES:
+-                    self.tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-                else:
+-                        self.tileIDImage[ thisID ] = pygame.Surface((16,16))
+-                
+-                # change colors in tileIDImage to match maze colors
+-                for y in range(0, 16, 1):
+-                    for x in range(0, 16, 1):
+-                    
+-                        if self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                            # wall edge
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeLightColor )
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                            # wall fill
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.fillColor ) 
+-
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeShadowColor )   
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.pelletColor )   
+-                    
+-                # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-            lineNum += 1
+-    
+-    def reset(self):
+-        # Reset the game
+-                # Load resources
+-        #self.load_resources()
+-        
+-        # Game components
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen) 
+-        self.load_resources()
+-        #self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.clock = pygame.time.Clock()
+-        self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.level.LoadLevel( self.game.GetLevelNum(), self.tileID, self.tileIDImage, self.tileIDName )
+-        self.window = pygame.display.set_mode( self.game.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def step(self, action):
+-        reward = 0
+-        done = False
+-        # Map action to game controls
+-        #print(self.game.mode)
+-        if self.game.mode == 1:
+-            if action == 0:
+-                if not self.level.CheckIfHitWall(self.player.x + self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = self.player.speed
+-                    self.player.velY = 0
+-                    
+-            elif action == 1:
+-                if not self.level.CheckIfHitWall(self.player.x - self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = -self.player.speed
+-                    self.player.velY = 0
+-                
+-            elif action == 2:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.speed, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = 0
+-                    self.player.velY = self.player.speed
+-                
+-            elif action == 3:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.speed, self.player.nearestRow, self.player.nearestCol):
+-                    self.player.velX = 0
+-                    self.player.velY = -self.player.speed
+-            # Game logic
+-            
+-            score = self.game.score
+-            self.game.modeTimer += 1
+-            self.player.Move(self.game, self.level, self.ghosts, self.fruit, self.tileID)
+-            for ghost in self.ghosts.values():
+-                ghost.Move(self.level, self.tileID)
+-           
+-            new_score = self.game.score
+-            reward = new_score - score  # Reward for eating pellets
+-            #reward = eaten_pellets * 10  # Reward for eating pellets
+-
+-        elif self.game.mode == 2:
+-                reward = -100
+-                self.game.modeTimer += 1
+-        
+-                if self.game.modeTimer == 90:
+-                    self.level.Restart(self.tileID)
+-                #self.level.Restart(self.tileID)
+-                self.game.lives -= 1
+-                if self.game.lives == -1:
+-                    done = True
+-            
+-        elif self.game.mode == 5:
+-            reward = 100
+-            self.game.mode = 1
+-        
+-        elif self.game.mode == 6:
+-            reward = 1000
+-            done = True
+-
+-
+-        info = self.get_graph_data()  # Additional data, not used now but required by Gym's API
+-
+-            # Get observation
+-        observation = self._get_observation()
+-
+-        return observation, reward, done, info
+-
+-      # Return initial state
+-    def _get_observation(self):
+-        # You can also choose to return other representations of the game state
+-        frame = pygame.surfarray.array3d(pygame.display.get_surface())
+-        frame = frame.transpose((1, 0, 2))  # Correct the shape to (height, width, channels)
+-        # Update frame buffer
+-        self.frame_buffer = np.roll(self.frame_buffer, -3, axis=2)
+-        self.frame_buffer[:, :, -3:] = frame
+-        return self.frame_buffer
+-
+-    
+-    def get_graph_data(self):
+-        # Initialize a NetworkX graph
+-        graph = nx.Graph()
+-
+-        # Define object features and add nodes
+-        pacman_features = [self.player.x, self.player.y, self.player.velX, self.player.velY, 1, 0, 0, 0]
+-        graph.add_node("pacman", type="object", features=pacman_features)
+-
+-        ghost_features = [[ghost.x, ghost.y, ghost.velX, ghost.velY,0,1,0,0] for ghost in self.ghosts.values()]
+-        for i, features in enumerate(ghost_features):
+-            graph.add_node(f"ghost_{i}", type="object", features=features)
+-
+-        pellet_features = [[pellet[0], pellet[1],0,0,0,0,1,0] for pellet in self.level.GetPelletLocations()]
+-        for i, features in enumerate(pellet_features):
+-            graph.add_node(f"pellet_{i}", type="object", features=features)
+-
+-        power_pellet_features = [[pellet[0], pellet[1],0,0,0,0,0,1] for pellet in self.level.GetPowerPelletLocations()]
+-        for i, features in enumerate(power_pellet_features):
+-            graph.add_node(f"power_pellet_{i}", type="object", features=features)
+-
+-        # Combine object positions
+-        object_positions = {
+-            "pacman": pacman_features[:2],
+-        }
+-        for i, ghost in enumerate(self.ghosts.values()):
+-            object_positions[f"ghost_{i}"] = ghost_features[i][:2]
+-        for i, pellet in enumerate(self.level.GetPelletLocations()):
+-            object_positions[f"pellet_{i}"] = pellet_features[i][:2]
+-        for i, power_pellet in enumerate(self.level.GetPowerPelletLocations()):
+-            object_positions[f"power_pellet_{i}"] = power_pellet_features[i][:2]
+-
+-        # Proximity threshold for creating atoms
+-        #proximity_threshold = self.proximity_threshold
+-
+-        # Create atom nodes and edges based on proximity
+-        atom_index = len(object_positions)  # Start indexing atoms after all objects
+-
+-        # Determine wall proximity around Pac-Man
+-        walls = {
+-            'up': self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.velY, self.player.y - 1, self.player.x),
+-            'down': self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.velY, self.player.y + 1, self.player.x),
+-            'left': self.level.CheckIfHitWall(self.player.x - self.player.velX, self.player.y, self.player.y, self.player.x - 1),
+-            'right': self.level.CheckIfHitWall(self.player.x + self.player.velX, self.player.y, self.player.y, self.player.x + 1)
+-        }
+-
+-        standard_feature_vector_size = len(pacman_features)
+-        empty_feature_vector = [0] *(2* standard_feature_vector_size)
+-
+-        # Add wall direction atoms and edges for Pac-Man
+-        for direction, hit in walls.items():
+-            if hit:
+-                atom_node = f"Wall{direction.capitalize()}_{atom_index}"
+-                graph.add_node(atom_node, type="atom", features=empty_feature_vector, predicate=f"Wall{direction.capitalize()}")
+-                graph.add_edge("pacman", atom_node, position=0)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for ghosts
+-        for i, ghost_pos in enumerate(ghost_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(ghost_pos[:2]))
+-            direction = np.array(pacman_features[:2]) - np.array(ghost_pos[:2])
+-            
+-            atom_node_distance = f"Distance_Pacman_Ghost_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"ghost_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-            if pacman_features[0] == ghost_pos[0]:
+-                atom_node_same_row = f"SameRow_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_row, features=empty_feature_vector,type="atom", predicate="SameRow")
+-                graph.add_edge("pacman", atom_node_same_row, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_row, position=1)
+-                atom_index += 1
+-
+-            if pacman_features[1] == ghost_pos[1]:
+-                atom_node_same_column = f"SameColumn_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_column, features=empty_feature_vector, type="atom", predicate="SameColumn")
+-                graph.add_edge("pacman", atom_node_same_column, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_column, position=1)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for pellets
+-        for i, pellet_pos in enumerate(pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_Pellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance, features=empty_feature_vector,type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Add distance and direction atoms and edges for power pellets
+-        for i, power_pellet_pos in enumerate(power_pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(power_pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_PowerPellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"power_pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Create a GraphConverter object
+-        converter = GraphConverter()
+-
+-        # Convert the NetworkX graph to a PyG Data object
+-        data = converter.to_pyg_data(graph)
+-        return data
+-    
+-
+-    
+-    def render(self, mode='human'):
+-        self.screen.blit(self.img_Background, (0, 0))
+-        self.level.DrawMap(self.tileID, self.tileIDImage)
+-        
+-        if self.game.fruitScoreTimer > 0:
+-            if self.game.modeTimer % 2 == 0:
+-                self.game.DrawNumber (2500, self.fruit.x - self.game.screenPixelPos[0] - 16, self.fruit.y - self.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            self.ghosts[i].Draw(self.game,self.tileID, self.tileIDImage, self.ghosts)
+-        self.fruit.Draw(self.game)
+-        self.player.Draw(self.game)
+-        if mode == 'human':
+-            
+-            pygame.display.flip()
+-        elif mode == 'rgb_array':
+-            return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def close(self):
+-        pygame.quit()
+-
+-# Usage Example
+-if __name__ == "__main__":
+-    env = PacmanEnv()
+-    obs = env.reset()
+-    done = False
+-
+-    while not done:
+-        #env.render()  # Ensure the environment is rendered every loop
+-        action = env.action_space.sample()
+-        
+-        obs, reward, done, info = env.step(action)
+-        if reward<0:
+-            print("Ghost collision")
+-        #print(f"Action: {action}, Reward: {reward}")
+-        #time.sleep(0.1)  # Add a delay to make changes observable
+-
+-        if done:
+-            print("Game Over. Restarting...")
+-            obs = env.reset()
+-            done = False
+-            time.sleep(2)  # Pause before restarting
+-
+-    env.close()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_new.py b/games/pacman/pacman_new.py
+deleted file mode 100644
+index 1baea23..0000000
+--- a/games/pacman/pacman_new.py
++++ /dev/null
+@@ -1,1583 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self):
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 3 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                snd_extralife.play()
+-                thisGame.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (thisFruit.imFruit[ thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self):
+-            
+-        possibleScreenX = player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        thisGame.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-        
+-        player.velX = 0
+-        player.velY = 0
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    def draw (self):
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-            
+-                thisTile = self.GetType((row, col))
+-                screen.blit (tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+-class ghost ():
+-    def __init__ (self, ghostID):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if player.x > self.x and player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif player.x < self.x and player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif player.x > self.x and player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif player.x < self.x and player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay()
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                self.FollowNextPathWay()
+-            
+-    def FollowNextPathWay (self):
+-        
+-        # print "Ghost " + str(self.id) + " rem: " + self.currentPath
+-        
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-                    
+-            else:
+-                # this ghost has reached his destination!!
+-                
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                    self.FollowNextPathWay()
+-                
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-                    
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (randRow, randCol) )
+-                    self.FollowNextPathWay()
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-
+-class pacman ():
+-    
+-    def __init__ (self):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self):
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos()[0]+1, thisLevel.GetGhostBoxPos()[1]) )
+-                        ghosts[i].FollowNextPathWay()
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos()
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+-class level ():
+-    
+-    def __init__ (self):
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > thisLevel.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > thisLevel.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = thisLevel.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = thisLevel.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_pellet[player.pelletSndNum].play()
+-                        player.pelletSndNum = 1 - player.pelletSndNum
+-                        
+-                        thisLevel.pellets -= 1
+-                        
+-                        thisGame.AddToScore(10)
+-                        
+-                        if thisLevel.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_powerpellet.play()
+-                        
+-                        thisGame.AddToScore(100)
+-                        thisGame.ghostValue = 200
+-                        
+-                        thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if ghosts[i].state == 1:
+-                                ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    player.x = i * 16
+-                                    
+-                                    if player.velX > 0:
+-                                        player.x += 16
+-                                    else:
+-                                        player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    player.y = i * 16
+-                                    
+-                                    if player.velY > 0:
+-                                        player.y += 16
+-                                    else:
+-                                        player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if thisLevel.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if thisLevel.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = thisGame.screenNearestTilePos[0] + row
+-                actualCol = thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        screen.blit (thisGame.imLogo, (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                            screen.blit(thisGame.imHiscores,(col*16-thisGame.screenPixelOffset[0],row*16-thisGame.screenPixelOffset[1]))
+-                    
+-                    else:
+-                        screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-        
+-    def LoadLevel (self, levelNum):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            player.homeX = k * 16
+-                            player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the ghosts
+-                            
+-                            ghosts[thisID - 10].homeX = k * 16
+-                            ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        GetCrossRef()
+-
+-        # load map into the pathfinder object
+-        path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, path.size[0], 1):
+-            for col in range(0, path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    path.SetType( row, col, 1 )
+-                else:
+-                    path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart()
+-        
+-    def Restart (self):
+-        
+-        for i in range(0, 4, 1):
+-            # move ghosts back to home
+-
+-            ghosts[i].x = ghosts[i].homeX
+-            ghosts[i].y = ghosts[i].homeY
+-            ghosts[i].velX = 0
+-            ghosts[i].velY = 0
+-            ghosts[i].state = 1
+-            ghosts[i].speed = 1
+-            ghosts[i].Move()
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (randRow, randCol) )
+-            ghosts[i].FollowNextPathWay()
+-            
+-        thisFruit.active = False
+-            
+-        thisGame.fruitTimer = 0
+-
+-        player.x = player.homeX
+-        player.y = player.homeY
+-        player.velX = 0
+-        player.velY = 0
+-        
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        player.animFrame = 3
+-
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 3:
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame()
+-            
+-
+-    
+-#      _____________________________________________
+-# ___/  function: Get ID-Tilename Cross References  \______________________________________ 
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-
+-# create the pacman
+-player = pacman()
+-
+-# create a path_finder object
+-path = path_finder()
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i)
+-    
+-# create piece of fruit
+-thisFruit = fruit()
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-# create game and level objects and load first level
+-thisGame = game()
+-thisLevel = level()
+-thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move()
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move()
+-        thisFruit.Move()
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisLevel.Restart()
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen()
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap()
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw()
+-        thisFruit.Draw()
+-        player.Draw()
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+\ No newline at end of file
+diff --git a/games/pacman/pacman_old.py b/games/pacman/pacman_old.py
+deleted file mode 100644
+index fc711fe..0000000
+--- a/games/pacman/pacman_old.py
++++ /dev/null
+@@ -1,970 +0,0 @@
+-import pygame
+-import random
+-import numpy as np
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-
+-
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    
+-        
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-
+-
+-class Ghost(Player):
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor Function
+-        """
+-        super().__init__(x, y, filename)
+-        self.ghost_eating = False 
+-        self.goal = None
+-    """
+-    Class to handle ghosts
+-    """
+-    def flee_or_chase(self, player):
+-        """
+-        Determine if the ghost should flee from or chase the player
+-        :param player: the player character, Pacman
+-        """
+-        if player.ghost_eating:
+-            self.run_away_from_pacman(player)
+-        else:
+-            self.chase_pacman(player)
+-
+-    def run_away_from_pacman(self, player):
+-        """
+-        Set direction away from Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost moves in the opposite direction of Pacman
+-        self.change_x = -5 if dx > 0 else 5
+-        self.change_y = -5 if dy > 0 else 5
+-
+-    def chase_pacman(self, player):
+-        """
+-        Set direction towards Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost reduces the distance to Pacman
+-        self.change_x = 5 if dx > 0 else -5
+-        self.change_y = 5 if dy > 0 else -5
+-
+-    def ghost_change_speed(self, direction_list, ghost, turn, steps, l):
+-        """
+-        Change the speed of the ghost
+-        :param direction_list: 
+-        :type direction_list: 
+-        :param ghost: 
+-        :type ghost: 
+-        :param turn: 
+-        :type turn: 
+-        :param steps: 
+-        :type steps: 
+-        :param l: 
+-        :type l: 
+-        :return: 
+-        :rtype: 
+-        """
+-        try:
+-            z = direction_list[turn][2]
+-            if steps < z:
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps += 1
+-            else:
+-                if turn < l:
+-                    turn += 1
+-                elif ghost == 'ghost_four':
+-                    turn = 2
+-                else:
+-                    turn = 0
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps = 0
+-            return [turn, steps]
+-        except IndexError:
+-            return [0, 0]
+-
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-        self.ghost_one_directions = [
+-            [0, -30, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [-15, 0, 23],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 19],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 7],
+-            [0, 15, 3],
+-            [-15, 0, 19],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.ghost_two_directions = [
+-            [0, -15, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, -15, 15],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 7],
+-            [0, -15, 3],
+-            [15, 0, 15],
+-            [0, 15, 15],
+-            [-15, 0, 3],
+-            [0, 15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 5],
+-        ]
+-
+-        self.ghost_three_directions = [
+-            [30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 10],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 15],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, 15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [-15, 0, 11],
+-            [0, 15, 7],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 15],
+-            [15, 0, 15],
+-            [0, 15, 3],
+-            [-15, 0, 15],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 1],
+-        ]
+-
+-        self.ghost_four_directions = [
+-            [-30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 5],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 7],
+-            [0, 15, 15],
+-            [15, 0, 15],
+-            [0, -15, 3],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-        pl = len(self.ghost_one_directions) - 1
+-        bl = len(self.ghost_two_directions) - 1
+-        il = len(self.ghost_three_directions) - 1
+-        cl = len(self.ghost_four_directions) - 1
+-
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        block_list = pygame.sprite.RenderPlain()
+-        ghost_list = pygame.sprite.RenderPlain()
+-        pacman_collide = pygame.sprite.RenderPlain()
+-        wall_list = self.setup_walls()
+-
+-        gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(pacman)
+-        pacman_collide.add(pacman)
+-
+-        ghost_two = Ghost(w, b_h, 'images/red.png')
+-        ghost_list.add(ghost_two)
+-        self.all_sprites_list.add(ghost_two)
+-
+-        ghost_one = Ghost(w, m_h, 'images/pink.png')
+-        ghost_list.add(ghost_one)
+-        self.all_sprites_list.add(ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png')
+-        ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png')
+-        ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, pacman_collide, False)
+-                    if b_collide:
+-                        continue
+-                    elif p_collide:
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # Randomly select four blocks
+-        blocks = list(block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        bll = len(block_list)
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, -30)
+-
+-            pacman.update(wall_list, gate)
+-            returned = ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            p_turn = returned[0]
+-            p_steps = returned[1]
+-            ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            ghost_one.update(wall_list, False)
+-
+-            returned = ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            b_turn = returned[0]
+-            b_steps = returned[1]
+-            ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            ghost_two.update(wall_list, False)
+-
+-            returned = ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            i_turn = returned[0]
+-            i_steps = returned[1]
+-            ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            ghost_three.update(wall_list, False)
+-
+-            returned = ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            c_turn = returned[0]
+-            c_steps = returned[1]
+-            ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            ghost_four.update(wall_list, False)
+-
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(pacman, block_list, True) 
+-            # check if pacman hits any power pellet
+-            pellet_hit_list = pygame.sprite.spritecollide(pacman, self.power_pellets,True)
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            wall_list.draw(self.screen)
+-            gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(pacman, ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_test.py b/games/pacman/pacman_test.py
+deleted file mode 100644
+index dab7b16..0000000
+--- a/games/pacman/pacman_test.py
++++ /dev/null
+@@ -1,366 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-from player import pacman
+-from ghost import ghost
+-from path import path_finder
+-from level import level
+-from game import game
+-from fruit import fruit
+-from config import *
+-
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 4 :
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame(thisLevel, tileID, tileIDImage, tileIDName)
+-            
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-    
+-#      _____________________________
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-# create a path_finder object
+-
+-f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-# ANDY -- edit
+-#fileOutput = f.read()
+-#str_splitByLine = fileOutput.split('\n')
+-
+-lineNum = 0
+-useLine = False
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-
+-path = path_finder()
+-
+-# create pacman object
+-player = pacman(path, screen)
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i, path, screen, player)
+-    
+-# create piece of fruit
+-thisFruit = fruit() 
+-
+-
+-
+-
+-
+-# create game and level objects and load first level
+-thisGame = game(thisFruit, player, screen)
+-thisLevel = level( thisGame, player, ghosts, path, thisFruit, screen)
+-for i in f.readlines():
+-    # print " ========= Line " + str(lineNum) + " ============ "
+-    while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-    while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-    str_splitBySpace = i.split(' ')
+-    
+-    j = str_splitBySpace[0]
+-        
+-    if (j == "'" or j == "" or j == "#"):
+-        # comment / whitespace line
+-        # print " ignoring comment line.. "
+-        useLine = False
+-    else:
+-        # print str(wordNum) + ". " + j
+-        useLine = True
+-    
+-    if useLine == True:
+-        tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-        tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-        
+-        thisID = int(str_splitBySpace[0])
+-        if not thisID in NO_GIF_TILES:
+-            tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-        else:
+-                tileIDImage[ thisID ] = pygame.Surface((16,16))
+-        
+-        # change colors in tileIDImage to match maze colors
+-        for y in range(0, 16, 1):
+-            for x in range(0, 16, 1):
+-            
+-                if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                    # wall edge
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                    # wall fill
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-            
+-        # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-    lineNum += 1
+-thisLevel.LoadLevel( thisGame.GetLevelNum(), tileID, tileIDImage, tileIDName )
+-thisGame.StartNewGame( thisLevel, tileID, tileIDImage, tileIDName )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-print(tileID)
+-
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move(thisGame, thisLevel, ghosts, thisFruit, tileID)
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move(thisLevel, tileID)
+-        thisFruit.Move(thisGame)
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            # close the game
+-            #pygame.quit()
+-            thisLevel.Restart(tileID)
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        print("Game Over")
+-        running = False
+-        #pygame.quit()
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        print("Waiting to start")
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen(thisLevel)
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap(tileID, tileIDImage)
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw(thisGame, tileID, tileIDImage, ghosts)
+-        thisFruit.Draw(thisGame)
+-        player.Draw(thisGame)
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+-
+diff --git a/games/pacman/path.py b/games/pacman/path.py
+deleted file mode 100644
+index bd3d8a6..0000000
+--- a/games/pacman/path.py
++++ /dev/null
+@@ -1,238 +0,0 @@
+-from games.pacman.config import *
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self,):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    # def draw (self):
+-    #     for row in range(0, self.size[0], 1):
+-    #         for col in range(0, self.size[1], 1):
+-            
+-    #             thisTile = self.GetType((row, col))
+-    #             screen.blit (self.tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+\ No newline at end of file
+diff --git a/games/pacman/player.py b/games/pacman/player.py
+deleted file mode 100644
+index 6ddd81e..0000000
+--- a/games/pacman/player.py
++++ /dev/null
+@@ -1,153 +0,0 @@
+-import pygame 
+-import os
+-from games.pacman.config import SCRIPT_PATH
+-class pacman ():
+-    
+-    def __init__ (self, path, screen):
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self, thisGame, thisLevel, ghosts, thisFruit, tileID):   
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol, tileID)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        #snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = self.path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos(tileID)[0]+1, thisLevel.GetGhostBoxPos(tileID)[1]) )
+-                        ghosts[i].FollowNextPathWay(thisLevel, tileID)
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    #snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos(tileID)
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = self.path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        self.screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+\ No newline at end of file
+diff --git a/games/pacman/res/VeraMoBd.ttf b/games/pacman/res/VeraMoBd.ttf
+deleted file mode 100644
+index 9be6547..0000000
+Binary files a/games/pacman/res/VeraMoBd.ttf and /dev/null differ
+diff --git a/games/pacman/res/backgrounds/1.gif b/games/pacman/res/backgrounds/1.gif
+deleted file mode 100644
+index fddeb90..0000000
+Binary files a/games/pacman/res/backgrounds/1.gif and /dev/null differ
+diff --git a/games/pacman/res/crossref.txt b/games/pacman/res/crossref.txt
+deleted file mode 100644
+index bfb3780..0000000
+--- a/games/pacman/res/crossref.txt
++++ /dev/null
+@@ -1,68 +0,0 @@
+-'    ____                  ____             ____
+-'   / __/_ _____  ___ ____/ __/__________  / / /
+-'  _\ \/ // / _ \/ -_) __/\ \/ __/ __/ _ \/ / / 
+-' /___/\_,_/ .__/\__/_/ /___/\__/_/  \___/_/_/  
+-'         /_/                  game engine
+-'
+-' Cross-reference for tiles and sprites.
+-'
+-' Syntax for each line is:
+-'      [number] [tilename] [tile description]
+-' Ex.  5130 wirecornerul upper-left corner of wire path
+-'
+-' Tile numbers may go from 1-32767. (Tile 0 is empty space.)
+-' Tiles 9000-9999 are invisible during gameplay.
+-'
+-' Commands:
+-'      # tiles              < tile declarations start here
+-'      # sprites            < sprite descriptions start here
+-' __________________________________________________________
+-
+-
+-# tiles
+-
+-1 ghost-door wall of the ghost box
+-2 pellet a normal pellet (required)
+-3 pellet-power a power pellet (makes pac-man invincible)
+-4 start the starting position for pac-man
+-
+-10 ghost-blinky blinky
+-11 ghost-pinky pinky
+-12 ghost-inky inky
+-13 ghost-sue sue
+-
+-20 door-h horizontal door (flip to other side of maze)
+-21 door-v vertical door (flip to other side of maze)
+-22 showlogo causes the logo to be drawn
+-23 hiscores generate and draw a hi-score list
+-
+-100 wall-straight-horiz a horizontal wall
+-101 wall-straight-vert a vertical wall
+-
+-105 wall-corner-ll lower-left corner of a wall
+-106 wall-corner-lr lower-right corner of a wall
+-107 wall-corner-ul upper-left corner of a wall
+-108 wall-corner-ur upper-right corner of a wall
+-
+-110 wall-end-b bottom end of a wall
+-111 wall-end-l left end of a wall
+-112 wall-end-r right end of a wall
+-113 wall-end-t top end of a wall
+-
+-120 wall-nub a one-tile "nub" wall
+-
+-130 wall-t-bottom a "T"-shaped wall, bottom-orientation
+-131 wall-t-left a "T"-shaped wall, left-orientation
+-132 wall-t-right a "T"-shaped wall, right-orientation
+-133 wall-t-top a "T"-shaped wall, top-orientation
+-
+-140 wall-x a four-way wall
+-
+-300 glasses ghost glasses
+-
+-500 x-paintwall use this tile to paint walls automatically
+-
+-
+-
+-# sprites
+-
+diff --git a/games/pacman/res/hiscore.txt b/games/pacman/res/hiscore.txt
+deleted file mode 100644
+index 48bdfbf..0000000
+--- a/games/pacman/res/hiscore.txt
++++ /dev/null
+@@ -1,6 +0,0 @@
+-135260 David
+-100000 David
+-80000 Andy
+-60000 Count Pacula
+-40000 Cleopacra
+-24790 User
+diff --git a/games/pacman/res/levels/0.txt b/games/pacman/res/levels/0.txt
+deleted file mode 100644
+index cd90d89..0000000
+--- a/games/pacman/res/levels/0.txt
++++ /dev/null
+@@ -1,48 +0,0 @@
+-# lvlwidth 35
+-# lvlheight 35
+-# bgcolor 0 0 0
+-# edgelightcolor 0 0 255
+-# edgeshadowcolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 107 100 100 100 100 100 100 100 108 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 100 100 100 100 100 100 106 2 0 0 0 0 0 2 105 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-20 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 4 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 20 
+-120 0 111 100 100 100 100 100 100 100 100 100 100 108 2 0 0 0 0 0 2 107 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 100 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 107 112 1 111 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 101 11 12 13 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/1.txt b/games/pacman/res/levels/1.txt
+deleted file mode 100644
+index f6a84e6..0000000
+--- a/games/pacman/res/levels/1.txt
++++ /dev/null
+@@ -1,37 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgecolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 3 120 2 113 2 111 100 108 2 107 100 112 2 113 2 120 3 101 0 
+-0 101 2 2 2 101 2 2 2 101 2 101 2 2 2 101 2 2 2 101 0 
+-0 101 2 111 100 106 2 113 2 110 2 110 2 113 2 105 100 112 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 120 2 111 100 130 100 112 2 111 100 130 100 112 2 120 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 113 2 111 100 100 100 100 100 112 2 113 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 0 0 10 0 0 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 105 112 2 107 112 1 111 108 2 111 106 2 105 100 100 112 
+-20 0 0 0 2 0 0 2 101 11 12 13 101 2 0 0 2 0 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 0 0 2 0 0 0 0 0 2 0 0 2 2 2 101 0 
+-0 101 2 120 2 107 112 2 111 100 100 100 112 2 111 108 2 120 2 101 0 
+-0 101 2 2 2 101 2 2 0 0 4 0 0 2 2 101 2 2 2 101 0 
+-0 105 133 112 2 110 2 111 100 100 133 100 100 112 2 110 2 111 133 106 0 
+-0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 0 0 
+-0 0 101 2 111 112 2 111 108 2 101 2 107 112 2 111 112 2 101 0 0 
+-107 100 106 2 2 2 2 2 101 2 101 2 101 2 2 2 2 2 105 100 108 
+-101 2 2 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 2 2 101 
+-101 3 120 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 120 3 101 
+-101 2 2 2 107 100 100 100 100 108 0 107 100 100 100 100 108 2 2 2 101 
+-105 100 100 100 106 0 0 0 0 110 21 110 0 0 0 0 105 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/10.txt b/games/pacman/res/levels/10.txt
+deleted file mode 100644
+index e254045..0000000
+--- a/games/pacman/res/levels/10.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 128 0 64
+-# fillcolor 215 0 107
+-# pelletcolor 0 255 0
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 120 2 111 100 108 2 111 100 112 2 107 100 112 2 120 3 105 112 
+-20 0 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 0 20 
+-111 100 100 112 2 120 2 110 2 113 2 113 2 110 2 120 2 111 100 100 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-111 108 0 120 2 113 2 111 100 106 2 105 100 112 2 113 2 120 0 107 112 
+-0 101 2 2 2 101 2 0 0 0 10 0 0 0 2 101 2 2 2 101 0 
+-0 101 2 111 100 130 112 2 107 112 1 111 108 2 111 130 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 2 101 0 
+-0 101 2 111 133 100 112 2 105 100 100 100 106 2 111 100 133 112 2 101 0 
+-0 101 2 2 101 2 2 2 0 0 0 0 0 2 2 2 101 2 2 101 0 
+-0 131 112 2 110 2 107 100 112 0 113 0 111 100 108 2 110 2 111 132 0 
+-0 101 2 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 2 101 0 
+-111 106 2 120 0 111 106 2 120 2 101 2 120 2 105 112 0 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 20 
+-111 100 100 112 2 111 108 2 111 100 130 100 112 2 107 112 2 111 100 100 112 
+-20 0 2 2 2 2 101 2 2 2 4 2 2 2 101 2 2 2 2 0 20 
+-111 108 3 111 112 2 105 100 112 2 120 2 111 100 106 2 111 112 3 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/11.txt b/games/pacman/res/levels/11.txt
+deleted file mode 100644
+index c546ac7..0000000
+--- a/games/pacman/res/levels/11.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 203 211 44
+-# edgeshadowcolor 0 64 0
+-# fillcolor 0 0 0
+-# pelletcolor 255 0 0
+-# fruittype 1
+-
+-# startleveldata
+-113 21 107 100 100 100 100 100 100 100 133 100 100 100 100 100 100 100 108 21 113 
+-101 0 110 0 0 2 2 2 2 2 110 2 2 2 2 2 0 0 110 0 101 
+-101 0 0 0 113 2 113 2 113 2 2 2 113 2 113 2 113 0 0 0 101 
+-131 100 100 100 106 3 110 2 110 2 113 2 110 2 110 3 105 100 100 100 132 
+-101 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 100 112 2 113 0 111 100 140 100 112 0 113 2 111 100 108 2 101 
+-101 2 101 2 2 2 101 0 0 0 101 0 0 0 101 2 2 2 101 2 101 
+-101 2 110 2 111 100 130 100 112 0 110 0 111 100 130 100 112 2 110 2 101 
+-101 2 2 2 0 0 0 0 0 0 10 0 0 0 0 0 0 2 2 2 101 
+-101 2 111 100 100 100 108 0 107 112 1 111 108 0 107 100 100 100 112 2 101 
+-101 2 2 2 2 2 110 0 101 11 12 13 101 0 110 2 2 2 2 2 101 
+-105 100 100 100 112 2 2 2 131 100 100 100 132 2 2 2 111 100 100 100 106 
+-20 0 0 0 0 0 113 2 110 0 0 0 110 2 113 0 0 0 0 0 20 
+-107 100 100 100 100 100 106 2 0 0 113 0 0 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 111 100 140 100 112 2 2 2 2 2 2 2 101 
+-101 2 113 2 107 100 108 0 0 0 101 0 0 0 107 100 108 2 113 2 101 
+-101 2 101 2 110 0 105 100 112 0 110 0 111 100 106 0 110 2 101 2 101 
+-101 2 101 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 101 2 101 
+-101 2 110 2 120 2 111 100 108 2 113 2 107 100 112 2 120 2 110 2 101 
+-101 2 2 2 3 2 2 2 101 2 101 2 101 2 2 2 3 2 2 2 101 
+-101 0 113 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 113 0 101 
+-101 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 101 
+-110 21 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/12.txt b/games/pacman/res/levels/12.txt
+deleted file mode 100644
+index 137aad1..0000000
+--- a/games/pacman/res/levels/12.txt
++++ /dev/null
+@@ -1,40 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 27
+-# bgcolor 0 0 0
+-# edgelightcolor 52 61 139
+-# edgeshadowcolor 35 41 95
+-# fillcolor 0 0 0
+-# pelletcolor 238 183 128
+-# fruittype 3
+-
+-# startleveldata
+-111 112 21 111 100 100 100 100 100 100 100 100 100 100 100 100 100 112 21 111 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 107 100 100 100 100 100 100 100 100 100 100 100 100 100 108 2 107 112 
+-0 101 2 101 22 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-0 101 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-111 106 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 105 112 
+-20 0 2 105 100 100 133 100 100 100 133 100 100 100 133 100 100 106 2 0 20 
+-111 108 2 2 2 2 110 2 2 2 110 2 2 2 110 2 2 2 2 107 112 
+-0 101 2 111 108 2 2 2 113 0 10 0 113 2 2 2 107 112 2 101 0 
+-0 101 2 2 110 0 120 0 131 112 1 111 132 0 120 0 110 2 2 101 0 
+-0 131 108 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 107 132 0 
+-111 130 106 2 111 100 112 2 105 100 100 100 106 2 111 100 112 2 105 130 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 113 2 120 2 113 2 120 0 120 2 113 2 120 2 113 2 107 112 
+-0 101 2 101 2 2 2 101 2 2 4 2 2 101 2 2 2 101 2 101 0 
+-0 101 2 110 2 111 100 130 100 112 0 111 100 130 100 112 2 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 2 120 3 120 2 120 2 113 2 113 2 120 2 120 3 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 2 0 20 
+-111 108 2 111 100 112 2 111 100 106 2 105 100 112 2 111 100 112 2 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 100 133 100 100 100 100 100 100 108 0 0 0 
+-0 107 100 106 2 2 2 2 2 2 110 2 2 2 2 2 2 105 100 108 0 
+-0 101 2 2 2 107 100 100 108 2 2 2 107 100 100 108 2 2 2 101 0 
+-0 110 21 111 100 106 0 0 105 100 100 100 106 0 0 105 100 112 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/2.txt b/games/pacman/res/levels/2.txt
+deleted file mode 100644
+index b65a9eb..0000000
+--- a/games/pacman/res/levels/2.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 33
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 85 0 170
+-# fillcolor 128 0 255
+-# pelletcolor 255 255 255
+-# fruittype 2
+-
+-# startleveldata
+-0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 
+-0 101 0 105 100 100 100 100 100 100 133 100 100 100 100 106 0 105 100 100 100 100 133 100 100 100 100 100 100 106 0 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 111 112 2 113 2 113 2 110 2 111 100 100 100 133 100 100 100 112 2 110 2 113 2 113 2 111 112 3 105 112 
+-20 0 2 2 2 2 101 2 101 0 0 2 2 2 2 2 101 2 2 2 2 2 0 0 101 2 101 2 2 2 2 0 20 
+-111 108 0 111 100 100 106 2 105 100 112 2 111 100 108 0 101 0 107 100 112 2 111 100 106 2 105 100 100 112 0 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 0 0 110 0 110 0 110 0 0 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 131 100 100 112 2 111 100 108 2 107 100 112 0 0 0 10 0 0 0 111 100 108 2 107 100 112 2 111 100 100 132 0 
+-0 101 2 2 2 2 2 2 110 2 110 0 0 0 107 112 1 111 108 0 0 0 110 2 110 2 2 2 2 2 2 101 0 
+-0 101 2 120 0 111 112 2 2 2 2 2 113 0 101 11 12 13 101 0 113 2 2 2 2 2 111 112 0 120 2 101 0 
+-0 101 2 2 2 2 2 2 120 0 111 100 132 2 105 100 100 100 106 2 131 100 112 0 120 2 2 2 2 2 2 101 0 
+-0 101 2 111 100 100 112 2 2 2 3 2 110 2 2 2 2 2 2 2 110 2 3 2 2 2 111 100 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 113 0 113 2 2 2 113 2 113 2 113 2 2 2 113 0 113 2 2 2 2 2 2 101 0 
+-0 101 2 111 112 0 120 2 110 0 110 2 111 100 106 2 110 2 105 100 112 2 110 0 110 2 120 0 111 112 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 107 112 0 111 100 100 100 112 0 111 100 133 100 112 0 111 100 100 100 112 0 111 108 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 101 2 113 2 111 133 100 100 100 108 2 110 2 107 100 100 100 133 112 2 113 2 101 2 105 100 100 112 
+-20 0 0 0 2 101 2 101 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 101 2 101 2 0 0 0 20 
+-111 108 0 120 3 110 2 105 112 2 110 2 113 2 110 2 120 2 110 2 113 2 110 2 111 106 2 110 3 120 0 107 112 
+-0 101 0 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 0 101 0 
+-0 101 0 107 100 100 100 100 100 100 100 100 130 100 100 108 0 107 100 100 130 100 100 100 100 100 100 100 100 108 0 101 0 
+-0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/3.txt b/games/pacman/res/levels/3.txt
+deleted file mode 100644
+index e72d1c4..0000000
+--- a/games/pacman/res/levels/3.txt
++++ /dev/null
+@@ -1,38 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgelightcolor 251 233 130
+-# edgeshadowcolor 124 70 16
+-# fillcolor 225 151 51
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 108 0 101 0 101 0 107 100 100 100 100 100 100 112 
+-20 0 3 2 2 2 2 101 0 101 0 101 0 101 2 2 2 2 3 0 20 
+-111 108 2 107 100 108 2 101 0 101 0 101 0 101 2 107 100 108 2 107 112 
+-0 101 2 101 0 101 2 105 100 106 0 105 100 106 2 101 0 101 2 101 0 
+-0 101 2 101 0 101 2 2 2 2 2 2 2 2 2 101 0 101 2 101 0 
+-0 101 2 101 0 131 133 133 133 133 133 133 133 133 133 132 0 101 2 101 0 
+-0 101 2 131 133 140 140 130 130 130 130 130 130 130 140 140 133 132 2 101 0 
+-0 101 2 105 130 130 106 2 2 2 10 2 2 2 105 130 130 106 2 101 0 
+-0 101 0 2 2 0 0 2 107 112 1 111 108 2 0 0 2 2 0 101 0 
+-0 105 100 108 2 107 108 2 101 11 12 13 101 2 107 108 2 107 100 106 0 
+-0 0 0 101 2 105 106 2 105 100 100 100 106 2 105 106 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 113 2 107 100 100 100 100 100 108 2 113 2 101 0 0 0 
+-0 0 0 101 0 101 2 110 0 0 4 0 0 110 2 101 0 101 0 0 0 
+-0 107 100 106 0 101 2 2 2 111 133 112 2 2 2 101 0 105 100 108 0 
+-0 101 2 2 2 110 2 113 2 2 101 2 2 113 2 110 2 2 2 101 0 
+-0 101 2 113 0 0 2 131 108 2 101 2 107 132 2 0 0 113 2 101 0 
+-111 106 2 105 100 108 2 105 106 2 110 2 105 106 2 107 100 106 2 105 112 
+-20 0 3 2 2 101 2 2 2 2 0 2 2 2 2 101 2 2 3 0 20 
+-111 100 100 108 2 110 2 111 100 100 133 100 100 112 2 110 2 107 100 100 112 
+-0 0 0 101 0 2 2 2 2 2 110 2 2 2 2 2 0 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 2 2 2 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 105 108 0 107 106 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/4.txt b/games/pacman/res/levels/4.txt
+deleted file mode 100644
+index 11394c2..0000000
+--- a/games/pacman/res/levels/4.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 128 255 0
+-# edgeshadowcolor 128 255 0
+-# fillcolor 0 128 0
+-# pelletcolor 0 255 255
+-# fruittype 4
+-
+-# startleveldata
+-107 100 100 100 108 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-101 3 2 2 105 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-101 2 113 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-101 2 105 133 100 108 2 111 100 108 2 107 100 112 2 107 100 108 2 101 0 
+-101 2 2 101 0 101 2 2 2 101 2 101 2 2 2 101 0 101 2 101 0 
+-105 108 2 105 100 106 2 113 2 110 2 110 2 113 2 105 100 106 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 113 2 111 100 130 100 112 2 111 100 130 100 112 2 113 2 101 0 
+-0 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 
+-0 101 2 110 2 113 2 111 100 100 100 100 100 112 2 113 2 110 2 101 0 
+-0 101 3 2 2 101 2 2 0 0 10 0 0 2 2 101 2 2 3 101 0 
+-111 130 100 112 2 105 112 2 107 112 1 111 108 2 111 106 2 111 100 130 112 
+-20 0 0 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 113 0 107 112 2 111 100 100 100 112 2 111 108 0 113 2 101 0 
+-0 101 2 101 0 101 2 2 0 0 4 0 0 2 2 101 0 101 2 101 0 
+-0 101 2 110 0 110 2 111 100 100 133 100 100 112 2 110 0 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 120 2 120 2 111 112 2 110 2 111 112 2 120 2 120 2 101 0 
+-0 101 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-0 105 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/5.txt b/games/pacman/res/levels/5.txt
+deleted file mode 100644
+index 74a735a..0000000
+--- a/games/pacman/res/levels/5.txt
++++ /dev/null
+@@ -1,78 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 65
+-# bgcolor 0 0 0
+-# edgelightcolor 255 0 128
+-# edgeshadowcolor 0 0 0
+-# fillcolor 0 0 0
+-# pelletcolor 0 0 255
+-# fruittype 4
+-
+-# startleveldata
+-113 21 113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 113 21 113 
+-101 0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 101 
+-101 0 0 0 2 2 2 2 2 0 0 0 2 2 2 2 2 0 0 0 101 
+-131 100 100 112 3 120 2 113 2 111 100 112 2 113 2 120 3 111 100 100 132 
+-101 2 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 2 101 
+-101 2 111 108 2 111 100 140 100 112 2 111 100 140 100 112 2 107 112 2 101 
+-101 2 2 101 2 2 2 101 2 2 2 2 2 101 2 2 2 101 2 2 101 
+-131 112 2 101 2 113 2 110 2 111 133 112 2 110 2 113 2 101 2 111 132 
+-101 2 2 101 2 101 2 2 2 2 101 2 2 2 2 101 2 101 2 2 101 
+-101 2 111 132 2 105 100 100 112 2 110 2 111 100 100 106 2 131 112 2 101 
+-101 2 2 101 2 2 2 2 2 2 0 2 2 2 2 2 2 101 2 2 101 
+-105 108 2 110 2 113 2 120 2 111 100 112 2 120 2 113 2 110 2 107 106 
+-0 101 2 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 2 101 0 
+-111 130 100 112 2 105 100 100 100 108 2 107 100 100 100 106 2 111 100 130 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-107 100 100 100 100 100 100 112 2 110 2 110 2 111 100 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 108 3 120 0 113 0 111 133 112 0 113 0 120 3 107 108 2 101 
+-101 2 131 132 2 0 0 101 0 0 101 0 0 101 0 0 2 131 132 2 101 
+-101 2 131 132 2 111 100 130 112 0 101 0 111 130 100 112 2 131 132 2 101 
+-101 2 131 132 2 2 2 2 2 2 101 2 2 2 2 2 2 131 132 2 101 
+-101 2 131 132 2 107 112 2 113 2 110 2 113 2 111 108 2 131 132 2 101 
+-101 2 131 132 2 110 2 2 101 2 2 2 101 2 2 110 2 131 132 2 101 
+-101 2 131 132 2 0 2 111 132 0 120 0 131 112 2 0 2 131 132 2 101 
+-101 2 131 132 2 113 2 2 101 0 0 0 101 2 2 113 2 131 132 2 101 
+-101 2 131 106 2 105 112 2 110 0 113 0 110 2 111 106 2 105 132 2 101 
+-110 2 101 0 2 2 2 2 2 2 101 2 2 2 2 2 2 0 101 2 110 
+-20 2 101 0 111 112 2 107 112 2 101 2 111 108 2 111 112 0 101 2 20 
+-113 2 101 2 2 2 2 101 2 2 101 2 2 101 2 2 2 2 101 2 113 
+-101 2 101 2 113 2 111 106 2 111 130 112 2 105 112 2 113 2 101 2 101 
+-101 2 101 2 101 2 2 2 2 0 0 0 2 2 2 2 101 2 101 2 101 
+-101 2 101 2 105 100 100 100 112 0 113 0 111 100 100 100 106 2 101 2 101 
+-101 2 101 2 2 2 2 0 0 0 101 0 0 0 2 2 2 2 101 2 101 
+-101 2 101 3 111 112 2 111 100 100 130 100 100 112 2 111 112 3 101 2 101 
+-101 2 101 2 2 2 2 2 0 0 10 0 0 2 2 2 2 2 101 2 101 
+-101 2 131 133 133 133 108 2 107 112 1 111 108 2 107 133 133 133 132 2 101 
+-101 2 105 130 130 130 106 2 101 11 12 13 101 2 105 130 130 130 106 2 101 
+-101 2 2 2 2 2 2 2 105 100 100 100 106 2 2 2 2 2 2 2 101 
+-131 133 133 133 133 133 108 0 0 0 0 0 0 0 107 133 133 133 133 133 132 
+-131 140 140 130 130 130 130 100 100 108 2 107 100 100 130 130 130 130 140 140 132 
+-105 130 132 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 131 130 106 
+-20 0 110 2 107 100 100 112 2 110 2 110 2 111 100 100 108 2 110 0 20 
+-113 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 113 
+-101 2 111 133 132 2 111 100 100 100 133 100 100 100 112 2 131 133 112 2 101 
+-101 2 2 131 132 2 2 2 2 2 101 2 2 2 2 2 131 132 2 2 101 
+-131 108 2 105 106 2 113 2 113 2 101 2 113 2 113 2 105 106 2 107 132 
+-131 132 2 2 2 2 101 2 110 2 110 2 110 2 101 2 2 2 2 131 132 
+-131 140 133 133 108 2 101 2 0 2 2 2 0 2 101 2 107 133 133 140 132 
+-131 140 140 140 132 2 101 2 107 112 2 111 108 2 101 2 131 140 140 140 132 
+-131 140 140 140 106 2 110 2 110 2 4 2 110 2 110 2 105 140 140 140 132 
+-105 130 130 106 2 2 2 2 2 2 113 2 2 2 2 2 2 105 130 130 106 
+-20 0 0 2 2 113 2 111 100 100 140 100 100 112 2 113 2 2 0 0 20 
+-113 0 113 2 107 132 2 2 2 2 110 2 2 2 2 131 108 2 113 0 113 
+-101 0 101 2 131 132 3 111 112 2 0 2 111 112 3 131 132 2 101 0 101 
+-101 0 101 2 105 132 2 0 0 2 113 2 0 0 2 131 106 2 101 0 101 
+-101 0 101 2 2 101 2 111 112 2 101 2 111 112 2 101 2 2 101 0 101 
+-101 0 131 108 2 101 2 2 2 2 101 2 2 2 2 101 2 107 132 0 101 
+-101 0 131 106 2 101 2 111 100 100 130 100 100 112 2 101 2 105 132 0 101 
+-101 0 101 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 101 0 101 
+-101 0 101 2 107 132 2 111 100 108 2 107 100 112 2 131 108 2 101 0 101 
+-101 0 101 2 131 132 2 2 2 101 2 101 2 2 2 131 132 2 101 0 101 
+-101 0 101 2 105 130 100 112 2 110 2 110 2 111 100 130 106 2 101 0 101 
+-101 0 101 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 101 0 101 
+-101 0 131 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 132 0 101 
+-110 21 105 130 130 130 130 130 130 130 130 130 130 130 130 130 130 130 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/6.txt b/games/pacman/res/levels/6.txt
+deleted file mode 100644
+index fe40285..0000000
+--- a/games/pacman/res/levels/6.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 255 255 255
+-# edgeshadowcolor 0 128 255
+-# fillcolor 129 11 168
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-107 100 100 100 133 100 100 100 100 100 100 100 100 100 100 100 133 100 100 100 108 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-101 3 120 2 110 2 113 2 111 100 100 100 112 2 113 2 110 2 120 3 101 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-131 100 112 2 120 2 105 100 100 100 133 100 100 100 106 2 120 2 111 100 132 
+-101 2 2 2 0 2 2 2 2 2 101 2 2 2 2 2 0 2 2 2 101 
+-101 2 111 100 112 2 107 100 112 2 110 2 111 100 108 2 111 100 112 2 101 
+-101 2 0 2 2 2 110 2 2 2 2 2 2 2 110 2 2 2 0 2 101 
+-105 100 108 2 120 2 0 0 111 100 100 100 112 0 0 2 120 2 107 100 106 
+-0 0 101 2 2 2 113 0 0 0 10 0 0 0 113 2 2 2 101 0 0 
+-0 0 105 100 108 2 101 0 107 112 1 111 108 0 101 2 107 100 106 0 0 
+-0 0 0 0 101 2 101 0 101 11 12 13 101 0 101 2 101 0 0 0 0 
+-111 100 100 100 106 2 110 0 105 100 100 100 106 0 110 2 105 100 100 100 112 
+-20 0 0 0 0 2 2 2 2 2 4 2 2 2 2 2 0 0 0 0 20 
+-111 100 100 100 108 2 113 2 111 100 100 100 112 2 113 2 107 100 100 100 112 
+-0 0 0 0 101 2 101 2 2 2 0 2 2 2 101 2 101 0 0 0 0 
+-0 0 107 100 106 2 131 100 112 2 113 2 111 100 132 2 105 100 108 0 0 
+-0 0 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 0 0 
+-107 100 106 2 120 2 101 2 111 100 130 100 112 2 101 2 120 2 105 100 108 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-101 3 120 2 113 2 105 100 112 2 120 2 111 100 106 2 113 2 120 3 101 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-105 100 100 100 130 100 100 100 100 100 100 100 100 100 100 100 130 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/7.txt b/games/pacman/res/levels/7.txt
+deleted file mode 100644
+index a34c0a9..0000000
+--- a/games/pacman/res/levels/7.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 255 128 128
+-# fillcolor 100 100 100
+-# pelletcolor 170 0 85
+-# fruittype 0
+-
+-# startleveldata
+-120 21 111 100 108 0 107 100 100 100 100 100 100 100 108 0 107 100 112 21 120 
+-20 2 2 2 105 100 106 2 2 2 2 2 2 2 105 100 106 2 2 2 20 
+-113 3 120 2 2 2 2 2 111 100 133 100 112 2 2 2 2 2 120 3 113 
+-101 2 2 2 107 100 108 2 2 2 101 2 2 2 107 100 108 2 2 2 101 
+-105 100 100 100 106 0 101 2 113 2 101 2 113 2 101 0 105 100 100 100 106 
+-0 0 0 0 0 0 101 2 101 2 101 2 101 2 101 0 0 0 0 0 0 
+-107 100 100 100 100 100 106 2 101 2 110 2 101 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 101 2 2 2 101 2 2 2 2 2 2 2 101 
+-101 2 113 2 113 2 111 100 130 112 0 111 130 100 112 2 113 2 113 2 101 
+-101 2 101 2 101 2 2 2 2 2 4 2 2 2 2 2 101 2 101 2 101 
+-101 2 110 2 105 100 100 112 2 113 0 113 2 111 100 100 106 2 110 2 101 
+-101 2 2 2 2 2 2 2 2 101 0 101 2 2 2 2 2 2 2 2 101 
+-105 100 108 2 107 112 2 107 100 106 0 105 100 108 2 111 108 2 107 100 106 
+-0 0 101 2 101 2 2 101 2 2 2 2 2 101 2 2 101 2 101 0 0 
+-0 0 101 2 110 2 111 106 2 111 100 112 2 105 112 2 110 2 101 0 0 
+-0 0 101 2 2 2 2 2 2 0 10 0 2 2 2 2 2 2 101 0 0 
+-0 0 105 100 108 2 120 2 107 112 1 111 108 2 120 2 107 100 106 0 0 
+-0 0 0 0 101 2 2 2 101 11 12 13 101 2 2 2 101 0 0 0 0 
+-0 0 0 0 101 2 120 2 105 100 100 100 106 2 120 2 101 0 0 0 0 
+-0 0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 0 
+-111 100 100 100 106 0 113 2 111 100 100 100 112 2 113 0 105 100 100 100 112 
+-20 0 0 0 0 0 101 2 2 2 3 2 2 2 101 0 0 0 0 0 20 
+-120 21 111 100 100 100 130 100 100 100 100 100 100 100 130 100 100 100 112 21 120 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/8.txt b/games/pacman/res/levels/8.txt
+deleted file mode 100644
+index 21d3396..0000000
+--- a/games/pacman/res/levels/8.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 0 128 192
+-# edgeshadowcolor 0 51 51
+-# fillcolor 0 0 0
+-# pelletcolor 255 128 0
+-# fruittype 2
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 113 21 113 21 113 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 106 0 110 0 105 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 107 100 106 2 113 2 120 2 111 133 112 2 120 0 113 2 105 100 108 0 
+-0 101 2 2 2 101 2 2 2 2 101 2 2 2 0 110 2 0 0 101 0 
+-0 101 2 107 100 106 0 111 112 0 110 2 111 112 2 2 2 113 0 101 0 
+-107 106 2 110 2 2 2 0 2 2 2 2 0 0 2 120 3 110 0 105 108 
+-101 2 2 2 2 113 2 113 2 113 2 111 100 108 2 0 0 10 0 0 101 
+-101 2 107 100 100 106 2 110 2 101 2 2 2 101 2 107 112 1 111 133 106 
+-101 2 110 2 2 2 2 0 2 105 100 112 2 110 2 101 11 12 13 101 0 
+-101 2 0 3 120 2 111 108 2 2 2 2 2 2 2 105 100 100 100 130 108 
+-101 2 113 2 2 2 2 105 100 108 2 107 100 112 2 2 2 2 2 2 101 
+-101 2 105 100 100 108 2 2 2 101 2 101 2 2 2 107 100 100 112 2 101 
+-101 2 0 0 0 105 100 112 2 110 2 110 2 111 100 106 2 2 2 2 101 
+-101 2 111 108 2 2 2 2 2 2 2 2 2 2 2 2 2 107 112 2 101 
+-101 2 2 110 2 111 100 112 2 120 4 111 100 112 2 120 2 110 2 2 101 
+-105 108 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 107 106 
+-0 101 2 111 112 0 107 100 112 2 113 0 111 100 108 2 111 112 2 101 0 
+-0 101 2 2 2 3 101 2 2 2 101 0 0 0 101 2 2 2 2 101 0 
+-0 105 100 108 2 111 106 2 111 100 130 100 112 0 105 112 2 107 100 106 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 0 113 0 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 110 21 110 21 110 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/9.txt b/games/pacman/res/levels/9.txt
+deleted file mode 100644
+index 3661b14..0000000
+--- a/games/pacman/res/levels/9.txt
++++ /dev/null
+@@ -1,46 +0,0 @@
+-# lvlwidth 34
+-# lvlheight 33
+-# bgcolor 0 0 0
+-# edgelightcolor 128 0 255
+-# edgeshadowcolor 64 0 64
+-# fillcolor 0 0 0
+-# pelletcolor 0 255 0
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-111 100 100 106 3 111 100 133 100 112 2 111 100 100 100 108 2 113 2 113 2 111 108 2 113 0 120 3 113 2 105 100 100 112 
+-20 0 0 0 2 2 2 101 2 2 2 2 2 2 2 101 2 101 2 101 2 2 101 2 101 0 0 0 101 2 0 0 0 20 
+-111 100 100 108 2 113 2 110 2 111 100 133 100 112 2 101 2 101 2 105 112 2 110 2 101 0 111 100 106 2 107 100 100 112 
+-0 0 0 101 2 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 101 0 0 0 0 2 101 0 0 0 
+-0 0 0 101 2 131 100 112 2 113 2 101 2 111 100 106 2 105 100 100 100 100 112 2 131 100 100 100 112 2 101 0 0 0 
+-0 0 0 101 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 2 111 100 132 2 110 2 111 100 100 100 100 100 100 100 100 112 2 101 2 111 100 108 0 101 0 0 0 
+-0 0 0 101 2 0 2 2 2 101 2 2 2 0 0 0 0 0 0 0 10 0 0 2 101 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 112 2 110 0 113 2 107 100 100 108 0 107 112 1 111 108 2 110 2 120 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 0 0 101 2 101 0 0 101 0 101 11 12 13 101 2 2 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 100 100 100 100 132 2 105 100 100 106 0 105 100 100 100 106 2 111 100 108 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 2 0 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 0 111 100 100 100 108 2 110 0 113 2 113 2 111 100 100 100 100 100 100 112 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 107 100 112 2 105 100 112 2 101 2 101 2 111 100 100 133 100 100 112 2 111 106 2 110 0 101 0 0 0 
+-0 0 0 101 2 101 0 4 2 2 2 2 2 101 2 101 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 0 107 100 100 100 112 0 110 2 110 2 111 112 2 101 2 107 100 100 100 100 100 108 2 101 0 0 0 
+-0 0 0 101 2 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 2 2 2 110 2 101 0 0 0 
+-0 0 0 101 2 111 100 106 2 113 2 113 2 120 2 113 0 111 112 2 101 2 101 0 113 2 113 2 2 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 3 101 2 101 2 2 2 101 2 2 2 2 101 2 101 0 110 3 105 100 112 2 101 0 0 0 
+-111 100 100 106 2 111 100 100 100 106 2 101 2 120 2 110 2 111 112 0 110 2 101 2 2 2 2 2 2 2 105 100 100 112 
+-20 0 0 0 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 107 108 2 107 108 2 0 0 0 20 
+-111 100 100 108 2 111 100 100 100 112 2 105 100 100 100 112 0 111 100 100 100 100 106 2 105 106 2 105 106 2 107 100 100 112 
+-0 0 0 101 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/sounds/eatfruit.wav b/games/pacman/res/sounds/eatfruit.wav
+deleted file mode 100644
+index d180209..0000000
+Binary files a/games/pacman/res/sounds/eatfruit.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/eatgh2.wav b/games/pacman/res/sounds/eatgh2.wav
+deleted file mode 100644
+index 7d8b90e..0000000
+Binary files a/games/pacman/res/sounds/eatgh2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/extralife.wav b/games/pacman/res/sounds/extralife.wav
+deleted file mode 100644
+index 2db3c19..0000000
+Binary files a/games/pacman/res/sounds/extralife.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/fruitbounce.wav b/games/pacman/res/sounds/fruitbounce.wav
+deleted file mode 100644
+index 6e17741..0000000
+Binary files a/games/pacman/res/sounds/fruitbounce.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet1.wav b/games/pacman/res/sounds/pellet1.wav
+deleted file mode 100644
+index 1d39b64..0000000
+Binary files a/games/pacman/res/sounds/pellet1.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet2.wav b/games/pacman/res/sounds/pellet2.wav
+deleted file mode 100644
+index d8363d0..0000000
+Binary files a/games/pacman/res/sounds/pellet2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/powerpellet.wav b/games/pacman/res/sounds/powerpellet.wav
+deleted file mode 100644
+index 489de59..0000000
+Binary files a/games/pacman/res/sounds/powerpellet.wav and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 0.gif b/games/pacman/res/sprite/fruit 0.gif
+deleted file mode 100644
+index 8cc3dc4..0000000
+Binary files a/games/pacman/res/sprite/fruit 0.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 1.gif b/games/pacman/res/sprite/fruit 1.gif
+deleted file mode 100644
+index 8adcf61..0000000
+Binary files a/games/pacman/res/sprite/fruit 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 2.gif b/games/pacman/res/sprite/fruit 2.gif
+deleted file mode 100644
+index bda9369..0000000
+Binary files a/games/pacman/res/sprite/fruit 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 3.gif b/games/pacman/res/sprite/fruit 3.gif
+deleted file mode 100644
+index ea8f006..0000000
+Binary files a/games/pacman/res/sprite/fruit 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 4.gif b/games/pacman/res/sprite/fruit 4.gif
+deleted file mode 100644
+index 0be5f73..0000000
+Binary files a/games/pacman/res/sprite/fruit 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 1.gif b/games/pacman/res/sprite/ghost 1.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/sprite/ghost 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 2.gif b/games/pacman/res/sprite/ghost 2.gif
+deleted file mode 100644
+index 89845aa..0000000
+Binary files a/games/pacman/res/sprite/ghost 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 3.gif b/games/pacman/res/sprite/ghost 3.gif
+deleted file mode 100644
+index 5777f39..0000000
+Binary files a/games/pacman/res/sprite/ghost 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 4.gif b/games/pacman/res/sprite/ghost 4.gif
+deleted file mode 100644
+index e95b7d7..0000000
+Binary files a/games/pacman/res/sprite/ghost 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 5.gif b/games/pacman/res/sprite/ghost 5.gif
+deleted file mode 100644
+index 9956c84..0000000
+Binary files a/games/pacman/res/sprite/ghost 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 6.gif b/games/pacman/res/sprite/ghost 6.gif
+deleted file mode 100644
+index 56533bf..0000000
+Binary files a/games/pacman/res/sprite/ghost 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 1.gif b/games/pacman/res/sprite/pacman-d 1.gif
+deleted file mode 100644
+index b3db2db..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 2.gif b/games/pacman/res/sprite/pacman-d 2.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 3.gif b/games/pacman/res/sprite/pacman-d 3.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 4.gif b/games/pacman/res/sprite/pacman-d 4.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 5.gif b/games/pacman/res/sprite/pacman-d 5.gif
+deleted file mode 100644
+index 5fa29e9..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 6.gif b/games/pacman/res/sprite/pacman-d 6.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 7.gif b/games/pacman/res/sprite/pacman-d 7.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 8.gif b/games/pacman/res/sprite/pacman-d 8.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 1.gif b/games/pacman/res/sprite/pacman-l 1.gif
+deleted file mode 100644
+index ee7f79a..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 2.gif b/games/pacman/res/sprite/pacman-l 2.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 3.gif b/games/pacman/res/sprite/pacman-l 3.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 4.gif b/games/pacman/res/sprite/pacman-l 4.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 5.gif b/games/pacman/res/sprite/pacman-l 5.gif
+deleted file mode 100644
+index b446def..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 6.gif b/games/pacman/res/sprite/pacman-l 6.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 7.gif b/games/pacman/res/sprite/pacman-l 7.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 8.gif b/games/pacman/res/sprite/pacman-l 8.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 1.gif b/games/pacman/res/sprite/pacman-r 1.gif
+deleted file mode 100644
+index 7719686..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 2.gif b/games/pacman/res/sprite/pacman-r 2.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 3.gif b/games/pacman/res/sprite/pacman-r 3.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 4.gif b/games/pacman/res/sprite/pacman-r 4.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 5.gif b/games/pacman/res/sprite/pacman-r 5.gif
+deleted file mode 100644
+index 1fe5419..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 6.gif b/games/pacman/res/sprite/pacman-r 6.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 7.gif b/games/pacman/res/sprite/pacman-r 7.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 8.gif b/games/pacman/res/sprite/pacman-r 8.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 1.gif b/games/pacman/res/sprite/pacman-u 1.gif
+deleted file mode 100644
+index 01ef0a3..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 2.gif b/games/pacman/res/sprite/pacman-u 2.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 3.gif b/games/pacman/res/sprite/pacman-u 3.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 4.gif b/games/pacman/res/sprite/pacman-u 4.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 5.gif b/games/pacman/res/sprite/pacman-u 5.gif
+deleted file mode 100644
+index d4698b0..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 6.gif b/games/pacman/res/sprite/pacman-u 6.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 7.gif b/games/pacman/res/sprite/pacman-u 7.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 8.gif b/games/pacman/res/sprite/pacman-u 8.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman.gif b/games/pacman/res/sprite/pacman.gif
+deleted file mode 100644
+index a584c10..0000000
+Binary files a/games/pacman/res/sprite/pacman.gif and /dev/null differ
+diff --git a/games/pacman/res/text/0.gif b/games/pacman/res/text/0.gif
+deleted file mode 100644
+index f01b653..0000000
+Binary files a/games/pacman/res/text/0.gif and /dev/null differ
+diff --git a/games/pacman/res/text/1.gif b/games/pacman/res/text/1.gif
+deleted file mode 100644
+index 7349994..0000000
+Binary files a/games/pacman/res/text/1.gif and /dev/null differ
+diff --git a/games/pacman/res/text/2.gif b/games/pacman/res/text/2.gif
+deleted file mode 100644
+index 3254d6f..0000000
+Binary files a/games/pacman/res/text/2.gif and /dev/null differ
+diff --git a/games/pacman/res/text/3.gif b/games/pacman/res/text/3.gif
+deleted file mode 100644
+index c88635d..0000000
+Binary files a/games/pacman/res/text/3.gif and /dev/null differ
+diff --git a/games/pacman/res/text/4.gif b/games/pacman/res/text/4.gif
+deleted file mode 100644
+index f3b5c3b..0000000
+Binary files a/games/pacman/res/text/4.gif and /dev/null differ
+diff --git a/games/pacman/res/text/5.gif b/games/pacman/res/text/5.gif
+deleted file mode 100644
+index dae0fd7..0000000
+Binary files a/games/pacman/res/text/5.gif and /dev/null differ
+diff --git a/games/pacman/res/text/6.gif b/games/pacman/res/text/6.gif
+deleted file mode 100644
+index dae7821..0000000
+Binary files a/games/pacman/res/text/6.gif and /dev/null differ
+diff --git a/games/pacman/res/text/7.gif b/games/pacman/res/text/7.gif
+deleted file mode 100644
+index dda359b..0000000
+Binary files a/games/pacman/res/text/7.gif and /dev/null differ
+diff --git a/games/pacman/res/text/8.gif b/games/pacman/res/text/8.gif
+deleted file mode 100644
+index 01305d4..0000000
+Binary files a/games/pacman/res/text/8.gif and /dev/null differ
+diff --git a/games/pacman/res/text/9.gif b/games/pacman/res/text/9.gif
+deleted file mode 100644
+index b29bb19..0000000
+Binary files a/games/pacman/res/text/9.gif and /dev/null differ
+diff --git a/games/pacman/res/text/gameover.gif b/games/pacman/res/text/gameover.gif
+deleted file mode 100644
+index e854b89..0000000
+Binary files a/games/pacman/res/text/gameover.gif and /dev/null differ
+diff --git a/games/pacman/res/text/life.gif b/games/pacman/res/text/life.gif
+deleted file mode 100644
+index 0e8f1bf..0000000
+Binary files a/games/pacman/res/text/life.gif and /dev/null differ
+diff --git a/games/pacman/res/text/logo.gif b/games/pacman/res/text/logo.gif
+deleted file mode 100644
+index 1cd71a7..0000000
+Binary files a/games/pacman/res/text/logo.gif and /dev/null differ
+diff --git a/games/pacman/res/text/ready.gif b/games/pacman/res/text/ready.gif
+deleted file mode 100644
+index 0cdcd89..0000000
+Binary files a/games/pacman/res/text/ready.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/blank.gif b/games/pacman/res/tiles/blank.gif
+deleted file mode 100644
+index ae631b0..0000000
+Binary files a/games/pacman/res/tiles/blank.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-h.gif b/games/pacman/res/tiles/door-h.gif
+deleted file mode 100644
+index 49687f5..0000000
+Binary files a/games/pacman/res/tiles/door-h.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-v.gif b/games/pacman/res/tiles/door-v.gif
+deleted file mode 100644
+index 2e7568d..0000000
+Binary files a/games/pacman/res/tiles/door-v.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-blinky.gif b/games/pacman/res/tiles/ghost-blinky.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/tiles/ghost-blinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-door.gif b/games/pacman/res/tiles/ghost-door.gif
+deleted file mode 100644
+index cffd09a..0000000
+Binary files a/games/pacman/res/tiles/ghost-door.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-inky.gif b/games/pacman/res/tiles/ghost-inky.gif
+deleted file mode 100644
+index 4753970..0000000
+Binary files a/games/pacman/res/tiles/ghost-inky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-pinky.gif b/games/pacman/res/tiles/ghost-pinky.gif
+deleted file mode 100644
+index 6fd82ec..0000000
+Binary files a/games/pacman/res/tiles/ghost-pinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-sue.gif b/games/pacman/res/tiles/ghost-sue.gif
+deleted file mode 100644
+index 14b057d..0000000
+Binary files a/games/pacman/res/tiles/ghost-sue.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/glasses.gif b/games/pacman/res/tiles/glasses.gif
+deleted file mode 100644
+index f17ba54..0000000
+Binary files a/games/pacman/res/tiles/glasses.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/hiscores.gif b/games/pacman/res/tiles/hiscores.gif
+deleted file mode 100644
+index c504d3c..0000000
+Binary files a/games/pacman/res/tiles/hiscores.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet-power.gif b/games/pacman/res/tiles/pellet-power.gif
+deleted file mode 100644
+index 806f7f4..0000000
+Binary files a/games/pacman/res/tiles/pellet-power.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet.gif b/games/pacman/res/tiles/pellet.gif
+deleted file mode 100644
+index 5284dd8..0000000
+Binary files a/games/pacman/res/tiles/pellet.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/showlogo.gif b/games/pacman/res/tiles/showlogo.gif
+deleted file mode 100644
+index 35abd50..0000000
+Binary files a/games/pacman/res/tiles/showlogo.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/start.gif b/games/pacman/res/tiles/start.gif
+deleted file mode 100644
+index 8b0fafe..0000000
+Binary files a/games/pacman/res/tiles/start.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ll.gif b/games/pacman/res/tiles/wall-corner-ll.gif
+deleted file mode 100644
+index 86b0398..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ll.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-lr.gif b/games/pacman/res/tiles/wall-corner-lr.gif
+deleted file mode 100644
+index c43af41..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-lr.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ul.gif b/games/pacman/res/tiles/wall-corner-ul.gif
+deleted file mode 100644
+index 5acadaa..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ul.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ur.gif b/games/pacman/res/tiles/wall-corner-ur.gif
+deleted file mode 100644
+index be16253..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ur.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-b.gif b/games/pacman/res/tiles/wall-end-b.gif
+deleted file mode 100644
+index 9041b06..0000000
+Binary files a/games/pacman/res/tiles/wall-end-b.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-l.gif b/games/pacman/res/tiles/wall-end-l.gif
+deleted file mode 100644
+index 2ed728a..0000000
+Binary files a/games/pacman/res/tiles/wall-end-l.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-r.gif b/games/pacman/res/tiles/wall-end-r.gif
+deleted file mode 100644
+index 25c7848..0000000
+Binary files a/games/pacman/res/tiles/wall-end-r.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-t.gif b/games/pacman/res/tiles/wall-end-t.gif
+deleted file mode 100644
+index 2155e70..0000000
+Binary files a/games/pacman/res/tiles/wall-end-t.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-nub.gif b/games/pacman/res/tiles/wall-nub.gif
+deleted file mode 100644
+index 113941b..0000000
+Binary files a/games/pacman/res/tiles/wall-nub.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-horiz.gif b/games/pacman/res/tiles/wall-straight-horiz.gif
+deleted file mode 100644
+index 6308eef..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-horiz.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-vert.gif b/games/pacman/res/tiles/wall-straight-vert.gif
+deleted file mode 100644
+index 6b7ddb7..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-vert.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-bottom.gif b/games/pacman/res/tiles/wall-t-bottom.gif
+deleted file mode 100644
+index 10ac483..0000000
+Binary files a/games/pacman/res/tiles/wall-t-bottom.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-left.gif b/games/pacman/res/tiles/wall-t-left.gif
+deleted file mode 100644
+index 3006e2a..0000000
+Binary files a/games/pacman/res/tiles/wall-t-left.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-right.gif b/games/pacman/res/tiles/wall-t-right.gif
+deleted file mode 100644
+index 27bb644..0000000
+Binary files a/games/pacman/res/tiles/wall-t-right.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-top.gif b/games/pacman/res/tiles/wall-t-top.gif
+deleted file mode 100644
+index 11f0e1e..0000000
+Binary files a/games/pacman/res/tiles/wall-t-top.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-x.gif b/games/pacman/res/tiles/wall-x.gif
+deleted file mode 100644
+index 3ba8eaa..0000000
+Binary files a/games/pacman/res/tiles/wall-x.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/x-paintwall.gif b/games/pacman/res/tiles/x-paintwall.gif
+deleted file mode 100644
+index 78f60c4..0000000
+Binary files a/games/pacman/res/tiles/x-paintwall.gif and /dev/null differ
+diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
+index a7e2754..1e2fd69 120000
+--- a/wandb/debug-internal.log
++++ b/wandb/debug-internal.log
+@@ -1 +1 @@
+-run-20240627_175509-kfssyjeq/logs/debug-internal.log
+\ No newline at end of file
++run-20240729_231650-t30hczxn/logs/debug-internal.log
+\ No newline at end of file
+diff --git a/wandb/debug.log b/wandb/debug.log
+index 78950f7..b9e9b9c 120000
+--- a/wandb/debug.log
++++ b/wandb/debug.log
+@@ -1 +1 @@
+-run-20240627_175509-kfssyjeq/logs/debug.log
+\ No newline at end of file
++run-20240729_231650-t30hczxn/logs/debug.log
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+index 847fe7f..25e227d 120000
+--- a/wandb/latest-run
++++ b/wandb/latest-run
+@@ -1 +1 @@
+-run-20240627_175509-kfssyjeq
+\ No newline at end of file
++run-20240729_231650-t30hczxn
+\ No newline at end of file
diff --git a/wandb/run-20240729_231650-t30hczxn/files/output.log b/wandb/run-20240729_231650-t30hczxn/files/output.log
new file mode 100644
index 0000000..287b13c
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/output.log
@@ -0,0 +1,164 @@
+Using cpu device
+Wrapping the env with a `Monitor` wrapper
+Wrapping the env in a DummyVecEnv.
+-----------------------------
+| time/              |      |
+|    fps             | 211  |
+|    iterations      | 1    |
+|    time_elapsed    | 9    |
+|    total_timesteps | 2048 |
+-----------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 2.49e+03    |
+|    ep_rew_mean          | -1.25e+03   |
+| time/                   |             |
+|    fps                  | 59          |
+|    iterations           | 2           |
+|    time_elapsed         | 68          |
+|    total_timesteps      | 4096        |
+| train/                  |             |
+|    approx_kl            | 0.011008317 |
+|    clip_fraction        | 0.0449      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -1.09       |
+|    explained_variance   | 0.0105      |
+|    learning_rate        | 0.0003      |
+|    loss                 | -0.00772    |
+|    n_updates            | 10          |
+|    policy_gradient_loss | -0.00199    |
+|    value_loss           | 5.5         |
+-----------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 2.05e+03     |
+|    ep_rew_mean          | -1.02e+03    |
+| time/                   |              |
+|    fps                  | 45           |
+|    iterations           | 3            |
+|    time_elapsed         | 134          |
+|    total_timesteps      | 6144         |
+| train/                  |              |
+|    approx_kl            | 0.0026518786 |
+|    clip_fraction        | 0            |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -1.09        |
+|    explained_variance   | 0            |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.181        |
+|    n_updates            | 20           |
+|    policy_gradient_loss | -0.000598    |
+|    value_loss           | 13.7         |
+------------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 2.18e+03    |
+|    ep_rew_mean          | -1.09e+03   |
+| time/                   |             |
+|    fps                  | 42          |
+|    iterations           | 4           |
+|    time_elapsed         | 193         |
+|    total_timesteps      | 8192        |
+| train/                  |             |
+|    approx_kl            | 0.010800179 |
+|    clip_fraction        | 0.0115      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -1.09       |
+|    explained_variance   | 0           |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0273      |
+|    n_updates            | 30          |
+|    policy_gradient_loss | -0.00119    |
+|    value_loss           | 10.7        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 2.05e+03    |
+|    ep_rew_mean          | -1.02e+03   |
+| time/                   |             |
+|    fps                  | 38          |
+|    iterations           | 5           |
+|    time_elapsed         | 267         |
+|    total_timesteps      | 10240       |
+| train/                  |             |
+|    approx_kl            | 0.010613723 |
+|    clip_fraction        | 0.0356      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -1.09       |
+|    explained_variance   | -1.19e-07   |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0309      |
+|    n_updates            | 40          |
+|    policy_gradient_loss | -0.00246    |
+|    value_loss           | 8.18        |
+-----------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 2.32e+03   |
+|    ep_rew_mean          | -1.16e+03  |
+| time/                   |            |
+|    fps                  | 38         |
+|    iterations           | 6          |
+|    time_elapsed         | 321        |
+|    total_timesteps      | 12288      |
+| train/                  |            |
+|    approx_kl            | 0.01400963 |
+|    clip_fraction        | 0.0429     |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -1.09      |
+|    explained_variance   | 0          |
+|    learning_rate        | 0.0003     |
+|    loss                 | 0.0415     |
+|    n_updates            | 50         |
+|    policy_gradient_loss | -0.00101   |
+|    value_loss           | 4.33       |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 2.38e+03    |
+|    ep_rew_mean          | -1.19e+03   |
+| time/                   |             |
+|    fps                  | 37          |
+|    iterations           | 7           |
+|    time_elapsed         | 378         |
+|    total_timesteps      | 14336       |
+| train/                  |             |
+|    approx_kl            | 0.005094466 |
+|    clip_fraction        | 0.023       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -1.09       |
+|    explained_variance   | -1.19e-07   |
+|    learning_rate        | 0.0003      |
+|    loss                 | 6.31        |
+|    n_updates            | 60          |
+|    policy_gradient_loss | -0.00126    |
+|    value_loss           | 6.18        |
+-----------------------------------------
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 196, in _run_module_as_main
+    return _run_code(code, main_globals, None,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 86, in _run_code
+    exec(code, run_globals)
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/run_supervised_gnn.py", line 101, in <module>
+    model.learn(total_timesteps=1000000, callback=[WandbCallback(), save_best_callback])
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/ppo/ppo.py", line 315, in learn
+    return super().learn(
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/on_policy_algorithm.py", line 313, in learn
+    self.train()
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/ppo/ppo.py", line 217, in train
+    values, log_prob, entropy = self.policy.evaluate_actions(rollout_data.observations, actions)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/policies.py", line 730, in evaluate_actions
+    features = self.extract_features(obs)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/policies.py", line 672, in extract_features
+    return super().extract_features(obs, self.features_extractor if features_extractor is None else features_extractor)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/stable_baselines3/common/policies.py", line 131, in extract_features
+    return features_extractor(preprocessed_obs)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
+    return self._call_impl(*args, **kwargs)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
+    return forward_call(*args, **kwargs)
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/model/policy.py", line 40, in forward
+    pyg_data = self.encoder.encode(observations)
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/encoder/GraphEncoder.py", line 213, in encode
+    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+KeyboardInterrupt
\ No newline at end of file
diff --git a/wandb/run-20240729_231650-t30hczxn/files/requirements.txt b/wandb/run-20240729_231650-t30hczxn/files/requirements.txt
new file mode 100644
index 0000000..717b9d3
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/requirements.txt
@@ -0,0 +1,83 @@
+AutoROM.accept-rom-license==0.6.1
+AutoROM==0.4.2
+Farama-Notifications==0.0.4
+GitPython==3.1.43
+Jinja2==3.1.4
+Markdown==3.6
+MarkupSafe==2.1.5
+PyYAML==6.0.1
+Shimmy==0.2.1
+Werkzeug==3.0.3
+absl-py==2.1.0
+aiohttp==3.9.5
+aiosignal==1.3.1
+ale-py==0.8.1
+async-timeout==4.0.3
+atari-py==0.2.5
+attrs==23.2.0
+certifi==2024.2.2
+charset-normalizer==3.3.2
+click==8.1.7
+cloudpickle==3.0.0
+contourpy==1.2.1
+cycler==0.12.1
+docker-pycreds==0.4.0
+filelock==3.14.0
+fonttools==4.52.4
+frozenlist==1.4.1
+fsspec==2024.5.0
+gitdb==4.0.11
+grpcio==1.64.0
+gymnasium==0.29.1
+idna==3.7
+imageio==2.34.1
+importlib_resources==6.4.0
+joblib==1.4.2
+kiwisolver==1.4.5
+lazy_loader==0.4
+lightning-utilities==0.11.2
+lightning==2.2.5
+matplotlib==3.9.0
+mpmath==1.3.0
+multidict==6.0.5
+networkx==3.3
+numpy==1.26.4
+opencv-python==4.10.0.84
+packaging==24.0
+pandas==2.2.2
+pillow==10.3.0
+pip==23.3.1
+platformdirs==4.2.2
+protobuf==4.25.3
+psutil==5.9.8
+pygame==2.5.2
+pyparsing==3.1.2
+python-dateutil==2.9.0.post0
+pytorch-lightning==2.2.5
+pytz==2024.1
+requests==2.32.2
+sb3_contrib==2.3.0
+scikit-image==0.23.2
+scikit-learn==1.5.0
+scipy==1.13.1
+sentry-sdk==2.3.1
+setproctitle==1.3.3
+setuptools==68.2.2
+six==1.16.0
+smmap==5.0.1
+stable_baselines3==2.3.2
+sympy==1.12
+tensorboard-data-server==0.7.2
+tensorboard==2.16.2
+threadpoolctl==3.5.0
+tifffile==2024.5.22
+torch==2.3.0
+torch_geometric==2.5.3
+torchmetrics==1.4.0.post0
+tqdm==4.66.4
+typing_extensions==4.12.0
+tzdata==2024.1
+urllib3==2.2.1
+wandb==0.17.0
+wheel==0.42.0
+yarl==1.9.4
\ No newline at end of file
diff --git a/wandb/run-20240729_231650-t30hczxn/files/wandb-metadata.json b/wandb/run-20240729_231650-t30hczxn/files/wandb-metadata.json
new file mode 100644
index 0000000..fb9e8dd
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/wandb-metadata.json
@@ -0,0 +1,48 @@
+{
+    "os": "macOS-14.0-arm64-arm-64bit",
+    "python": "3.10.14",
+    "heartbeatAt": "2024-07-29T21:16:51.114230",
+    "startedAt": "2024-07-29T21:16:50.163196",
+    "docker": null,
+    "cuda": null,
+    "args": [],
+    "state": "running",
+    "program": "-m games.freeway.run_supervised_gnn",
+    "codePathLocal": null,
+    "git": {
+        "remote": "https://github.com/rb248/Master-Thesis-GNN.git",
+        "commit": "ba9e888a4c10c9f7483c08755454a7fb6d45cc20"
+    },
+    "email": "rishabhbhatia315@gmail.com",
+    "root": "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN",
+    "host": "rishubs-MBP.fritz.box",
+    "username": "rishubbhatia",
+    "executable": "/Users/rishubbhatia/miniforge3/envs/games/bin/python",
+    "cpu_count": 8,
+    "cpu_count_logical": 8,
+    "cpu_freq": {
+        "current": 3204,
+        "min": 600,
+        "max": 3204
+    },
+    "cpu_freq_per_core": [
+        {
+            "current": 3204,
+            "min": 600,
+            "max": 3204
+        }
+    ],
+    "disk": {
+        "/": {
+            "total": 228.27386474609375,
+            "used": 13.797981262207031
+        }
+    },
+    "gpuapple": {
+        "type": "arm",
+        "vendor": "Apple"
+    },
+    "memory": {
+        "total": 8.0
+    }
+}
diff --git a/wandb/run-20240729_231650-t30hczxn/files/wandb-summary.json b/wandb/run-20240729_231650-t30hczxn/files/wandb-summary.json
new file mode 100644
index 0000000..52703ed
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/files/wandb-summary.json
@@ -0,0 +1 @@
+{"_wandb": {"runtime": 410}}
\ No newline at end of file
diff --git a/wandb/run-20240729_231650-t30hczxn/logs/debug-internal.log b/wandb/run-20240729_231650-t30hczxn/logs/debug-internal.log
new file mode 100644
index 0000000..56361b4
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/logs/debug-internal.log
@@ -0,0 +1,2022 @@
+2024-07-29 23:16:50,199 INFO    StreamThr :56374 [internal.py:wandb_internal():85] W&B internal server running at pid: 56374, started at: 2024-07-29 23:16:50.176968
+2024-07-29 23:16:50,200 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status
+2024-07-29 23:16:50,212 INFO    WriterThread:56374 [datastore.py:open_for_write():87] open: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/run-t30hczxn.wandb
+2024-07-29 23:16:50,213 DEBUG   SenderThread:56374 [sender.py:send():378] send: header
+2024-07-29 23:16:50,256 DEBUG   SenderThread:56374 [sender.py:send():378] send: run
+2024-07-29 23:16:50,756 INFO    SenderThread:56374 [dir_watcher.py:__init__():211] watching files in: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files
+2024-07-29 23:16:50,756 INFO    SenderThread:56374 [sender.py:_start_run_threads():1123] run started: t30hczxn with start time 1722287810.197495
+2024-07-29 23:16:50,763 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: check_version
+2024-07-29 23:16:50,763 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: check_version
+2024-07-29 23:16:50,912 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: run_start
+2024-07-29 23:16:50,923 DEBUG   HandlerThread:56374 [system_info.py:__init__():26] System info init
+2024-07-29 23:16:50,923 DEBUG   HandlerThread:56374 [system_info.py:__init__():41] System info init done
+2024-07-29 23:16:50,923 INFO    HandlerThread:56374 [system_monitor.py:start():194] Starting system monitor
+2024-07-29 23:16:50,924 INFO    SystemMonitor:56374 [system_monitor.py:_start():158] Starting system asset monitoring threads
+2024-07-29 23:16:50,924 INFO    HandlerThread:56374 [system_monitor.py:probe():214] Collecting system info
+2024-07-29 23:16:50,925 INFO    SystemMonitor:56374 [interfaces.py:start():188] Started cpu monitoring
+2024-07-29 23:16:50,929 INFO    SystemMonitor:56374 [interfaces.py:start():188] Started disk monitoring
+2024-07-29 23:16:50,932 INFO    SystemMonitor:56374 [interfaces.py:start():188] Started gpuapple monitoring
+2024-07-29 23:16:50,933 INFO    SystemMonitor:56374 [interfaces.py:start():188] Started memory monitoring
+2024-07-29 23:16:50,935 INFO    SystemMonitor:56374 [interfaces.py:start():188] Started network monitoring
+2024-07-29 23:16:51,111 ERROR   HandlerThread:56374 [gpu_apple.py:probe():176] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 164, in probe
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:16:51,114 DEBUG   HandlerThread:56374 [system_info.py:probe():150] Probing system
+2024-07-29 23:16:51,121 DEBUG   HandlerThread:56374 [system_info.py:_probe_git():135] Probing git
+2024-07-29 23:16:51,166 DEBUG   HandlerThread:56374 [system_info.py:_probe_git():143] Probing git done
+2024-07-29 23:16:51,167 DEBUG   HandlerThread:56374 [system_info.py:probe():198] Probing system done
+2024-07-29 23:16:51,167 DEBUG   HandlerThread:56374 [system_monitor.py:probe():223] {'os': 'macOS-14.0-arm64-arm-64bit', 'python': '3.10.14', 'heartbeatAt': '2024-07-29T21:16:51.114230', 'startedAt': '2024-07-29T21:16:50.163196', 'docker': None, 'cuda': None, 'args': (), 'state': 'running', 'program': '-m games.freeway.run_supervised_gnn', 'codePathLocal': None, 'git': {'remote': 'https://github.com/rb248/Master-Thesis-GNN.git', 'commit': 'ba9e888a4c10c9f7483c08755454a7fb6d45cc20'}, 'email': 'rishabhbhatia315@gmail.com', 'root': '/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN', 'host': 'rishubs-MBP.fritz.box', 'username': 'rishubbhatia', 'executable': '/Users/rishubbhatia/miniforge3/envs/games/bin/python', 'cpu_count': 8, 'cpu_count_logical': 8, 'cpu_freq': {'current': 3204, 'min': 600, 'max': 3204}, 'cpu_freq_per_core': [{'current': 3204, 'min': 600, 'max': 3204}], 'disk': {'/': {'total': 228.27386474609375, 'used': 13.797981262207031}}, 'gpuapple': {'type': 'arm', 'vendor': 'Apple'}, 'memory': {'total': 8.0}}
+2024-07-29 23:16:51,167 INFO    HandlerThread:56374 [system_monitor.py:probe():224] Finished collecting system info
+2024-07-29 23:16:51,167 INFO    HandlerThread:56374 [system_monitor.py:probe():227] Publishing system info
+2024-07-29 23:16:51,167 DEBUG   HandlerThread:56374 [system_info.py:_save_conda():207] Saving list of conda packages installed into the current environment
+2024-07-29 23:16:51,201 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:16:51,762 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml
+2024-07-29 23:16:53,337 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:16:54,747 DEBUG   HandlerThread:56374 [system_info.py:_save_conda():222] Saving conda packages done
+2024-07-29 23:16:54,747 DEBUG   HandlerThread:56374 [system_info.py:_save_code():44] Saving code
+2024-07-29 23:16:54,747 WARNING HandlerThread:56374 [system_info.py:_save_code():46] unable to save code -- program entry not found
+2024-07-29 23:16:54,747 DEBUG   HandlerThread:56374 [system_info.py:_save_patches():82] Saving git patches
+2024-07-29 23:16:54,777 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml
+2024-07-29 23:16:55,454 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:16:55,480 DEBUG   HandlerThread:56374 [gitlib.py:get_upstream_fork_point():195] git is in a detached head state
+2024-07-29 23:16:55,481 DEBUG   HandlerThread:56374 [system_info.py:_save_patches():124] Saving git patches done
+2024-07-29 23:16:55,482 INFO    HandlerThread:56374 [system_monitor.py:probe():229] Finished publishing system info
+2024-07-29 23:16:55,499 DEBUG   SenderThread:56374 [sender.py:send():378] send: files
+2024-07-29 23:16:55,499 INFO    SenderThread:56374 [sender.py:_save_file():1389] saving file wandb-metadata.json with policy now
+2024-07-29 23:16:55,499 INFO    SenderThread:56374 [sender.py:_save_file():1389] saving file diff.patch with policy now
+2024-07-29 23:16:55,500 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:16:55,690 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: python_packages
+2024-07-29 23:16:55,690 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: python_packages
+2024-07-29 23:16:55,692 DEBUG   SenderThread:56374 [sender.py:send():378] send: telemetry
+2024-07-29 23:16:55,692 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:16:55,692 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:16:55,783 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/wandb-metadata.json
+2024-07-29 23:16:55,784 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/diff.patch
+2024-07-29 23:16:55,784 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/requirements.txt
+2024-07-29 23:16:55,967 DEBUG   SenderThread:56374 [sender.py:send():378] send: telemetry
+2024-07-29 23:16:55,967 DEBUG   SenderThread:56374 [sender.py:send():378] send: telemetry
+2024-07-29 23:16:56,230 INFO    wandb-upload_0:56374 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpeutoyq7twandb/ofzt314e-wandb-metadata.json
+2024-07-29 23:16:56,665 INFO    wandb-upload_1:56374 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpeutoyq7twandb/ap3xm7u7-diff.patch
+2024-07-29 23:16:57,626 DEBUG   SenderThread:56374 [sender.py:send():378] send: telemetry
+2024-07-29 23:16:57,676 DEBUG   SenderThread:56374 [sender.py:send():378] send: config
+2024-07-29 23:16:57,787 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:16:58,077 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:16:59,798 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:17:00,282 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:00,692 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:02,525 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:04,998 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:05,720 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:07,117 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:09,290 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:09,965 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:17:10,766 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:17:10,767 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:10,767 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:17:11,423 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:13,565 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:15,700 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:16,193 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:17,835 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:19,992 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:21,214 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:21,979 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/config.yaml
+2024-07-29 23:17:22,141 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:24,285 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:25,771 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:17:25,772 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:17:26,441 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:27,002 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:28,583 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:30,734 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:32,023 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:32,902 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:35,161 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:37,037 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:37,300 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:39,599 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:40,778 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:17:40,778 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:17:42,070 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:42,983 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:44,364 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:47,070 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:48,004 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:49,408 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:50,938 DEBUG   SystemMonitor:56374 [system_monitor.py:_start():172] Starting system metrics aggregation loop
+2024-07-29 23:17:50,947 DEBUG   SenderThread:56374 [sender.py:send():378] send: telemetry
+2024-07-29 23:17:50,947 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:17:51,643 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:53,973 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:17:54,023 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:55,143 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/config.yaml
+2024-07-29 23:17:55,778 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:17:55,778 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:17:56,224 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:17:58,509 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:00,044 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:00,717 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:02,903 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:05,054 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:05,060 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:07,248 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:08,192 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:18:09,462 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:10,783 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:18:10,784 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:18:11,370 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:11,756 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:14,287 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:16,541 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:16,571 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:19,323 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:20,954 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:18:21,524 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:21,957 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:23,662 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:26,043 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:18:26,045 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:18:26,067 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:27,622 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:28,308 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:30,625 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:32,648 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:32,806 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:35,313 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:37,666 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:37,784 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:40,216 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:41,055 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:18:41,056 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:18:42,439 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:43,279 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:44,671 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:46,913 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:48,299 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:49,098 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:50,971 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:18:51,324 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:53,492 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:53,983 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:18:55,674 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:56,051 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:18:56,052 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:18:57,845 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:18:59,273 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:00,083 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:02,269 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:04,288 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:04,431 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:06,590 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:08,729 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:09,312 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:10,877 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:11,052 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:19:11,052 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:19:13,068 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:13,850 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:19:14,522 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:15,248 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:17,478 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:19,540 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:19,664 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:20,976 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:19:21,789 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:23,969 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:24,991 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:26,057 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:19:26,058 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:19:26,135 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:28,285 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:30,331 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:30,429 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:32,578 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:34,739 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:35,344 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:36,973 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:39,125 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:40,365 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:41,063 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:19:41,065 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:19:41,262 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:43,427 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:45,575 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:46,342 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:47,771 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:49,928 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:50,983 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:19:51,987 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:52,089 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:54,225 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:56,068 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:19:56,068 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:19:56,396 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:19:57,453 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:19:58,549 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:00,917 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:02,468 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:03,349 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:05,582 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:07,491 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:07,730 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:09,972 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:11,073 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:20:11,073 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:20:12,094 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:12,122 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:20:13,280 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:14,216 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:16,353 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:18,295 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:18,561 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:20,697 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:20,985 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:20:23,024 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:24,001 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:25,519 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:26,077 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:20:26,079 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:20:28,234 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:29,356 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:30,542 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:32,815 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:34,394 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:35,071 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:37,618 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:39,421 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:40,510 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:41,119 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:20:41,124 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:20:43,304 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:45,402 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:45,566 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:47,991 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:50,252 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:50,425 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:51,075 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:20:52,636 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:54,913 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:56,092 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:20:56,103 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:20:56,103 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:20:57,199 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:20:59,380 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:01,334 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:01,573 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:03,733 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:05,923 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:06,357 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:08,113 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:10,507 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:11,368 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:21:11,370 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:21:11,692 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:12,760 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:15,213 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:16,713 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:17,414 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:19,620 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:21,061 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:21:22,063 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:22,122 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:24,330 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:26,443 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:21:26,443 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:21:26,523 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:27,661 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:28,550 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:21:28,697 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:30,836 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:32,681 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:33,020 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:35,194 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:37,361 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:37,700 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:39,547 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:41,446 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:21:41,447 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:21:41,718 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:43,677 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:43,861 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:46,048 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:48,183 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:48,696 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:50,356 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:51,069 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:21:52,628 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:54,080 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:21:54,855 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:56,444 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:21:56,445 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:21:57,066 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:59,221 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:21:59,746 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:01,346 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:03,599 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:04,773 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:05,754 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:07,903 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:09,793 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:10,244 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:11,448 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:22:11,449 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:22:12,387 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:14,506 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:15,687 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:16,634 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:18,877 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:20,757 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:22:21,072 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:22:21,073 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:21,117 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:23,404 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:25,662 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:26,095 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:26,453 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:22:26,454 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:22:28,004 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:30,261 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:31,693 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:32,426 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:34,582 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:36,715 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:36,735 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:38,918 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:41,059 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:41,453 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:22:41,453 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:22:41,719 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:43,352 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:45,490 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:46,735 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:47,634 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:49,759 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:51,078 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:22:51,925 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:52,082 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:54,107 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:56,261 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:22:56,455 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:22:56,455 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:22:57,686 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:22:58,417 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:00,628 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:02,696 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:03,166 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:05,383 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:07,542 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:07,725 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:09,668 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:11,460 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:23:11,461 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:23:11,817 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:13,649 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:14,037 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:16,159 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:18,291 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:19,211 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:23:19,568 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:20,451 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:21,083 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:23:22,578 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:24,779 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:25,097 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:26,489 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:23:26,489 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:23:26,928 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:29,071 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:30,698 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:31,200 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:33,330 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:35,479 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:35,712 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:37,632 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:39,762 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:40,735 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:41,502 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:23:41,502 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:23:41,839 DEBUG   SenderThread:56374 [sender.py:send():378] send: exit
+2024-07-29 23:23:41,839 INFO    SenderThread:56374 [sender.py:send_exit():585] handling exit code: 255
+2024-07-29 23:23:41,844 INFO    SenderThread:56374 [sender.py:send_exit():587] handling runtime: 410
+2024-07-29 23:23:41,845 INFO    SenderThread:56374 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:23:41,847 INFO    SenderThread:56374 [sender.py:send_exit():593] send defer
+2024-07-29 23:23:41,848 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,848 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 0
+2024-07-29 23:23:41,849 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,849 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 0
+2024-07-29 23:23:41,849 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 1
+2024-07-29 23:23:41,849 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,849 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 1
+2024-07-29 23:23:41,850 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,850 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 1
+2024-07-29 23:23:41,850 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 2
+2024-07-29 23:23:41,850 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,850 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 2
+2024-07-29 23:23:41,851 INFO    HandlerThread:56374 [system_monitor.py:finish():203] Stopping system monitor
+2024-07-29 23:23:41,851 DEBUG   SystemMonitor:56374 [system_monitor.py:_start():179] Finished system metrics aggregation loop
+2024-07-29 23:23:41,852 DEBUG   SystemMonitor:56374 [system_monitor.py:_start():183] Publishing last batch of metrics
+2024-07-29 23:23:41,852 INFO    HandlerThread:56374 [interfaces.py:finish():200] Joined cpu monitor
+2024-07-29 23:23:41,864 INFO    HandlerThread:56374 [interfaces.py:finish():200] Joined disk monitor
+2024-07-29 23:23:41,940 ERROR   gpuapple  :56374 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:23:41,940 INFO    HandlerThread:56374 [interfaces.py:finish():200] Joined gpuapple monitor
+2024-07-29 23:23:41,940 INFO    HandlerThread:56374 [interfaces.py:finish():200] Joined memory monitor
+2024-07-29 23:23:41,940 INFO    HandlerThread:56374 [interfaces.py:finish():200] Joined network monitor
+2024-07-29 23:23:41,941 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,941 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 2
+2024-07-29 23:23:41,941 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 3
+2024-07-29 23:23:41,941 DEBUG   SenderThread:56374 [sender.py:send():378] send: stats
+2024-07-29 23:23:41,941 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,941 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 3
+2024-07-29 23:23:41,941 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,941 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 3
+2024-07-29 23:23:41,941 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 4
+2024-07-29 23:23:41,941 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,941 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 4
+2024-07-29 23:23:41,942 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,942 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 4
+2024-07-29 23:23:41,942 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 5
+2024-07-29 23:23:41,942 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,942 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 5
+2024-07-29 23:23:41,942 DEBUG   SenderThread:56374 [sender.py:send():378] send: summary
+2024-07-29 23:23:41,943 INFO    SenderThread:56374 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:23:41,943 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,943 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 5
+2024-07-29 23:23:41,943 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 6
+2024-07-29 23:23:41,943 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,943 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 6
+2024-07-29 23:23:41,943 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,943 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 6
+2024-07-29 23:23:41,943 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 7
+2024-07-29 23:23:41,944 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:23:41,944 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:41,944 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 7
+2024-07-29 23:23:41,944 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:41,944 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 7
+2024-07-29 23:23:42,187 INFO    Thread-12 :56374 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/wandb-summary.json
+2024-07-29 23:23:42,842 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:23:43,845 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 8
+2024-07-29 23:23:43,846 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:23:43,846 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:43,847 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 8
+2024-07-29 23:23:43,847 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:43,847 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 8
+2024-07-29 23:23:43,848 INFO    SenderThread:56374 [job_builder.py:build():432] Attempting to build job artifact
+2024-07-29 23:23:43,853 INFO    SenderThread:56374 [job_builder.py:_get_source_type():565] is repo sourced job
+2024-07-29 23:23:43,853 WARNING SenderThread:56374 [job_builder.py:_log_if_verbose():267] No program path found, not creating job artifact. See https://docs.wandb.ai/guides/launch/create-job
+2024-07-29 23:23:43,853 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 9
+2024-07-29 23:23:43,853 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:43,853 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 9
+2024-07-29 23:23:43,853 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:43,853 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 9
+2024-07-29 23:23:43,853 INFO    SenderThread:56374 [dir_watcher.py:finish():358] shutting down directory watcher
+2024-07-29 23:23:44,195 INFO    SenderThread:56374 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:23:44,196 INFO    SenderThread:56374 [dir_watcher.py:finish():388] scan: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files
+2024-07-29 23:23:44,197 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/diff.patch diff.patch
+2024-07-29 23:23:44,197 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/requirements.txt requirements.txt
+2024-07-29 23:23:44,198 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log output.log
+2024-07-29 23:23:44,203 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/config.yaml config.yaml
+2024-07-29 23:23:44,204 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/wandb-summary.json wandb-summary.json
+2024-07-29 23:23:44,205 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml conda-environment.yaml
+2024-07-29 23:23:44,207 INFO    SenderThread:56374 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/wandb-metadata.json wandb-metadata.json
+2024-07-29 23:23:44,207 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 10
+2024-07-29 23:23:44,208 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:44,209 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 10
+2024-07-29 23:23:44,209 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:44,209 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 10
+2024-07-29 23:23:44,210 INFO    SenderThread:56374 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:23:44,702 INFO    wandb-upload_0:56374 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/requirements.txt
+2024-07-29 23:23:44,721 INFO    wandb-upload_1:56374 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/output.log
+2024-07-29 23:23:44,730 INFO    wandb-upload_2:56374 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/config.yaml
+2024-07-29 23:23:44,773 INFO    wandb-upload_4:56374 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/conda-environment.yaml
+2024-07-29 23:23:44,774 INFO    wandb-upload_3:56374 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/files/wandb-summary.json
+2024-07-29 23:23:44,850 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:23:44,851 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:23:44,975 INFO    Thread-11 (_thread_body):56374 [sender.py:transition_state():613] send defer: 11
+2024-07-29 23:23:44,977 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:44,988 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 11
+2024-07-29 23:23:44,988 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:44,988 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 11
+2024-07-29 23:23:44,988 INFO    SenderThread:56374 [file_pusher.py:join():175] waiting for file pusher
+2024-07-29 23:23:44,990 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 12
+2024-07-29 23:23:44,990 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:44,990 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 12
+2024-07-29 23:23:44,990 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:44,990 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 12
+2024-07-29 23:23:44,990 INFO    SenderThread:56374 [file_stream.py:finish():601] file stream finish called
+2024-07-29 23:23:45,673 INFO    SenderThread:56374 [file_stream.py:finish():605] file stream finish is done
+2024-07-29 23:23:45,674 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 13
+2024-07-29 23:23:45,674 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:45,674 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 13
+2024-07-29 23:23:45,674 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:45,674 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 13
+2024-07-29 23:23:45,675 INFO    SenderThread:56374 [sender.py:transition_state():613] send defer: 14
+2024-07-29 23:23:45,675 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:23:45,675 INFO    HandlerThread:56374 [handler.py:handle_request_defer():184] handle defer: 14
+2024-07-29 23:23:45,675 DEBUG   SenderThread:56374 [sender.py:send():378] send: final
+2024-07-29 23:23:45,675 DEBUG   SenderThread:56374 [sender.py:send():378] send: footer
+2024-07-29 23:23:45,676 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:23:45,676 INFO    SenderThread:56374 [sender.py:send_request_defer():609] handle sender defer: 14
+2024-07-29 23:23:45,676 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:23:45,677 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:23:45,677 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:23:45,678 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: server_info
+2024-07-29 23:23:45,678 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:23:45,679 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: get_summary
+2024-07-29 23:23:45,680 DEBUG   SenderThread:56374 [sender.py:send_request():405] send_request: server_info
+2024-07-29 23:23:45,680 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: sampled_history
+2024-07-29 23:23:45,682 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: internal_messages
+2024-07-29 23:23:45,852 INFO    MainThread:56374 [wandb_run.py:_footer_history_summary_info():3994] rendering history
+2024-07-29 23:23:45,853 INFO    MainThread:56374 [wandb_run.py:_footer_history_summary_info():4026] rendering summary
+2024-07-29 23:23:45,854 INFO    MainThread:56374 [wandb_run.py:_footer_sync_info():3953] logging synced files
+2024-07-29 23:23:45,855 DEBUG   HandlerThread:56374 [handler.py:handle_request():158] handle_request: shutdown
+2024-07-29 23:23:45,855 INFO    HandlerThread:56374 [handler.py:finish():882] shutting down handler
+2024-07-29 23:23:46,680 INFO    WriterThread:56374 [datastore.py:close():296] close: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/run-t30hczxn.wandb
+2024-07-29 23:23:46,855 INFO    SenderThread:56374 [sender.py:finish():1545] shutting down sender
+2024-07-29 23:23:46,855 INFO    SenderThread:56374 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:23:46,855 INFO    SenderThread:56374 [file_pusher.py:join():175] waiting for file pusher
diff --git a/wandb/run-20240729_231650-t30hczxn/logs/debug.log b/wandb/run-20240729_231650-t30hczxn/logs/debug.log
new file mode 100644
index 0000000..f4afcbd
--- /dev/null
+++ b/wandb/run-20240729_231650-t30hczxn/logs/debug.log
@@ -0,0 +1,46 @@
+2024-07-29 23:16:50,174 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Configure stats pid to 56303
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:16:50,175 WARNING MainThread:56303 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/logs/debug.log
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231650-t30hczxn/logs/debug-internal.log
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_init.py:init():610] starting backend
+2024-07-29 23:16:50,175 INFO    MainThread:56303 [wandb_init.py:init():614] setting up manager
+2024-07-29 23:16:50,176 INFO    MainThread:56303 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=spawn,fork,forkserver, using: spawn
+2024-07-29 23:16:50,197 INFO    MainThread:56303 [wandb_init.py:init():622] backend started and connected
+2024-07-29 23:16:50,211 INFO    MainThread:56303 [wandb_init.py:init():711] updated telemetry
+2024-07-29 23:16:50,256 INFO    MainThread:56303 [wandb_init.py:init():744] communicating run to backend with 90.0 second timeout
+2024-07-29 23:16:50,763 INFO    MainThread:56303 [wandb_run.py:_on_init():2396] communicating current version
+2024-07-29 23:16:50,905 INFO    MainThread:56303 [wandb_run.py:_on_init():2405] got version response upgrade_message: "wandb version 0.17.5 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"
+
+2024-07-29 23:16:50,905 INFO    MainThread:56303 [wandb_init.py:init():795] starting run threads in backend
+2024-07-29 23:16:55,690 INFO    MainThread:56303 [wandb_run.py:_console_start():2374] atexit reg
+2024-07-29 23:16:55,690 INFO    MainThread:56303 [wandb_run.py:_redirect():2229] redirect: wrap_raw
+2024-07-29 23:16:55,691 INFO    MainThread:56303 [wandb_run.py:_redirect():2294] Wrapping output streams.
+2024-07-29 23:16:55,691 INFO    MainThread:56303 [wandb_run.py:_redirect():2319] Redirects installed.
+2024-07-29 23:16:55,694 INFO    MainThread:56303 [wandb_init.py:init():838] run started, returning control to user process
+2024-07-29 23:16:55,707 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Configure stats pid to 56303
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:16:55,708 WARNING MainThread:56303 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231655-d703ffm1/logs/debug.log
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231655-d703ffm1/logs/debug-internal.log
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:init():605] wandb.init() called when a run is still active
+2024-07-29 23:16:57,675 INFO    MainThread:56303 [wandb_run.py:_config_callback():1376] config_cb None None {'algo': 'PPO', 'policy_class': "<class 'stable_baselines3.common.policies.ActorCriticPolicy'>", 'device': 'cpu', 'verbose': 2, 'policy_kwargs': "{'features_extractor_class': <class 'games.model.policy.CustomHeteroGNN'>, 'features_extractor_kwargs': {'features_dim': 64, 'hidden_size': 64, 'num_layer': 2, 'obj_type_id': 'obj', 'arity_dict': {'ChickenOnLane': 2, 'CarOnLane': 2, 'LaneNextToLane': 2}, 'game': 'freeway'}}", 'num_timesteps': 0, '_total_timesteps': 100000, '_num_timesteps_at_start': 0, 'seed': 'None', 'action_noise': 'None', 'start_time': 1722287817624641000, 'learning_rate': 0.0003, 'tensorboard_log': 'None', '_last_obs': '[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [105. 150.   0.   0.   0.   1.   0.]\n  [ 96. 100.   2.   0.   0.   0.   1.]\n  [ 80.  50.   1.   0.   0.   0.   1.]\n  [ 69. 150.   1.   0.   0.   0.   1.]\n  [ 32. 100.   2.   0.   0.   0.   1.]\n  [ 35. 100.   1.   0.   0.   0.   1.]\n  [181.  50.   2.   0.   0.   0.   1.]\n  [ 65. 150.   2.   0.   0.   0.   1.]\n  [107. 100.   2.   0.   0.   0.   1.]\n  [ 87.  50.   2.   0.   0.   0.   1.]\n  [112.  50.   2.   0.   0.   0.   1.]]]', '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', 'env': '<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x293a6e650>', '_vec_normalize_env': 'None', 'observation_space': 'Box(-inf, inf, (14, 7), float32)', 'action_space': 'Discrete(3)', 'n_envs': 1, 'n_steps': 2048, 'gamma': 0.99, 'gae_lambda': 0.95, 'ent_coef': 0.0, 'vf_coef': 0.5, 'max_grad_norm': 0.5, 'rollout_buffer_class': "<class 'stable_baselines3.common.buffers.RolloutBuffer'>", 'rollout_buffer_kwargs': '{}', 'batch_size': 64, 'n_epochs': 10, 'clip_range': '<function get_schedule_fn.<locals>.<lambda> at 0x17714a440>', 'clip_range_vf': 'None', 'normalize_advantage': 'True', 'target_kl': 'None', 'lr_schedule': '<function get_schedule_fn.<locals>.<lambda> at 0x17714b760>', 'rollout_buffer': '<stable_baselines3.common.buffers.RolloutBuffer object at 0x293a8e5f0>', 'policy': 'ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net): Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64, out_features=1, bias=True)\n)', '_logger': '<stable_baselines3.common.logger.Logger object at 0x1771f6140>'}
+2024-07-29 23:23:46,862 WARNING MsgRouterThr:56303 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_231650-t30hczxn/run-t30hczxn.wandb b/wandb/run-20240729_231650-t30hczxn/run-t30hczxn.wandb
new file mode 100644
index 0000000..bd5cc44
Binary files /dev/null and b/wandb/run-20240729_231650-t30hczxn/run-t30hczxn.wandb differ
diff --git a/wandb/run-20240729_231655-d703ffm1/logs/debug.log b/wandb/run-20240729_231655-d703ffm1/logs/debug.log
new file mode 100644
index 0000000..d5fa499
--- /dev/null
+++ b/wandb/run-20240729_231655-d703ffm1/logs/debug.log
@@ -0,0 +1,17 @@
+2024-07-29 23:16:55,707 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Configure stats pid to 56303
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:16:55,708 WARNING MainThread:56303 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231655-d703ffm1/logs/debug.log
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_231655-d703ffm1/logs/debug-internal.log
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:16:55,708 INFO    MainThread:56303 [wandb_init.py:init():605] wandb.init() called when a run is still active
+2024-07-29 23:16:57,675 INFO    MainThread:56303 [wandb_run.py:_config_callback():1376] config_cb None None {'algo': 'PPO', 'policy_class': "<class 'stable_baselines3.common.policies.ActorCriticPolicy'>", 'device': 'cpu', 'verbose': 2, 'policy_kwargs': "{'features_extractor_class': <class 'games.model.policy.CustomHeteroGNN'>, 'features_extractor_kwargs': {'features_dim': 64, 'hidden_size': 64, 'num_layer': 2, 'obj_type_id': 'obj', 'arity_dict': {'ChickenOnLane': 2, 'CarOnLane': 2, 'LaneNextToLane': 2}, 'game': 'freeway'}}", 'num_timesteps': 0, '_total_timesteps': 100000, '_num_timesteps_at_start': 0, 'seed': 'None', 'action_noise': 'None', 'start_time': 1722287817624641000, 'learning_rate': 0.0003, 'tensorboard_log': 'None', '_last_obs': '[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [105. 150.   0.   0.   0.   1.   0.]\n  [ 96. 100.   2.   0.   0.   0.   1.]\n  [ 80.  50.   1.   0.   0.   0.   1.]\n  [ 69. 150.   1.   0.   0.   0.   1.]\n  [ 32. 100.   2.   0.   0.   0.   1.]\n  [ 35. 100.   1.   0.   0.   0.   1.]\n  [181.  50.   2.   0.   0.   0.   1.]\n  [ 65. 150.   2.   0.   0.   0.   1.]\n  [107. 100.   2.   0.   0.   0.   1.]\n  [ 87.  50.   2.   0.   0.   0.   1.]\n  [112.  50.   2.   0.   0.   0.   1.]]]', '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', 'env': '<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x293a6e650>', '_vec_normalize_env': 'None', 'observation_space': 'Box(-inf, inf, (14, 7), float32)', 'action_space': 'Discrete(3)', 'n_envs': 1, 'n_steps': 2048, 'gamma': 0.99, 'gae_lambda': 0.95, 'ent_coef': 0.0, 'vf_coef': 0.5, 'max_grad_norm': 0.5, 'rollout_buffer_class': "<class 'stable_baselines3.common.buffers.RolloutBuffer'>", 'rollout_buffer_kwargs': '{}', 'batch_size': 64, 'n_epochs': 10, 'clip_range': '<function get_schedule_fn.<locals>.<lambda> at 0x17714a440>', 'clip_range_vf': 'None', 'normalize_advantage': 'True', 'target_kl': 'None', 'lr_schedule': '<function get_schedule_fn.<locals>.<lambda> at 0x17714b760>', 'rollout_buffer': '<stable_baselines3.common.buffers.RolloutBuffer object at 0x293a8e5f0>', 'policy': 'ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net): Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64, out_features=1, bias=True)\n)', '_logger': '<stable_baselines3.common.logger.Logger object at 0x1771f6140>'}
+2024-07-29 23:23:46,862 WARNING MsgRouterThr:56303 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml b/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml
new file mode 100644
index 0000000..2d5ad15
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml
@@ -0,0 +1,103 @@
+name: games
+channels:
+  - http://conda.anaconda.org/gurobi
+  - apple
+  - conda-forge
+  - defaults
+dependencies:
+  - bzip2=1.0.8=h93a5062_5
+  - ca-certificates=2024.2.2=hf0a4a13_0
+  - libffi=3.4.2=h3422bc3_5
+  - libsqlite=3.45.3=h091b4b1_0
+  - libzlib=1.2.13=h53f4e23_5
+  - ncurses=6.5=hb89a1cb_0
+  - openssl=3.3.0=hfb2fe0b_3
+  - pip=23.3.1=pyhd8ed1ab_0
+  - python=3.10.14=h2469fbe_0_cpython
+  - readline=8.2=h92ec313_1
+  - setuptools=68.2.2=pyhd8ed1ab_0
+  - tk=8.6.13=h5083fa2_1
+  - wheel=0.42.0=pyhd8ed1ab_0
+  - xz=5.2.6=h57fd34a_0
+  - pip:
+      - absl-py==2.1.0
+      - aiohttp==3.9.5
+      - aiosignal==1.3.1
+      - ale-py==0.8.1
+      - async-timeout==4.0.3
+      - atari-py==0.2.5
+      - attrs==23.2.0
+      - autorom==0.4.2
+      - autorom-accept-rom-license==0.6.1
+      - certifi==2024.2.2
+      - charset-normalizer==3.3.2
+      - click==8.1.7
+      - cloudpickle==3.0.0
+      - contourpy==1.2.1
+      - cycler==0.12.1
+      - docker-pycreds==0.4.0
+      - farama-notifications==0.0.4
+      - filelock==3.14.0
+      - fonttools==4.52.4
+      - frozenlist==1.4.1
+      - fsspec==2024.5.0
+      - gitdb==4.0.11
+      - gitpython==3.1.43
+      - grpcio==1.64.0
+      - gymnasium==0.29.1
+      - idna==3.7
+      - imageio==2.34.1
+      - importlib-resources==6.4.0
+      - jinja2==3.1.4
+      - joblib==1.4.2
+      - kiwisolver==1.4.5
+      - lazy-loader==0.4
+      - lightning==2.2.5
+      - lightning-utilities==0.11.2
+      - markdown==3.6
+      - markupsafe==2.1.5
+      - matplotlib==3.9.0
+      - mpmath==1.3.0
+      - multidict==6.0.5
+      - networkx==3.3
+      - numpy==1.26.4
+      - opencv-python==4.10.0.84
+      - packaging==24.0
+      - pandas==2.2.2
+      - pillow==10.3.0
+      - platformdirs==4.2.2
+      - protobuf==4.25.3
+      - psutil==5.9.8
+      - pygame==2.5.2
+      - pyparsing==3.1.2
+      - python-dateutil==2.9.0.post0
+      - pytorch-lightning==2.2.5
+      - pytz==2024.1
+      - pyyaml==6.0.1
+      - requests==2.32.2
+      - sb3-contrib==2.3.0
+      - scikit-image==0.23.2
+      - scikit-learn==1.5.0
+      - scipy==1.13.1
+      - sentry-sdk==2.3.1
+      - setproctitle==1.3.3
+      - shimmy==0.2.1
+      - six==1.16.0
+      - smmap==5.0.1
+      - stable-baselines3==2.3.2
+      - sympy==1.12
+      - tensorboard==2.16.2
+      - tensorboard-data-server==0.7.2
+      - threadpoolctl==3.5.0
+      - tifffile==2024.5.22
+      - torch==2.3.0
+      - torch-geometric==2.5.3
+      - torchmetrics==1.4.0.post0
+      - tqdm==4.66.4
+      - typing-extensions==4.12.0
+      - tzdata==2024.1
+      - urllib3==2.2.1
+      - wandb==0.17.0
+      - werkzeug==3.0.3
+      - yarl==1.9.4
+prefix: /Users/rishubbhatia/miniforge3/envs/games
diff --git a/wandb/run-20240729_234426-w18fykjp/files/config.yaml b/wandb/run-20240729_234426-w18fykjp/files/config.yaml
new file mode 100644
index 0000000..b5c4602
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/config.yaml
@@ -0,0 +1,29 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    python_version: 3.10.14
+    cli_version: 0.17.0
+    framework: torch
+    is_jupyter_run: false
+    is_kaggle_kernel: false
+    start_time: 1722289466
+    t:
+      1:
+      - 1
+      - 55
+      - 77
+      2:
+      - 1
+      - 55
+      - 77
+      3:
+      - 23
+      - 35
+      4: 3.10.14
+      5: 0.17.0
+      8:
+      - 4
+      - 5
+      13: darwin-arm64
diff --git a/wandb/run-20240729_234426-w18fykjp/files/diff.patch b/wandb/run-20240729_234426-w18fykjp/files/diff.patch
new file mode 100644
index 0000000..dabc5f2
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/diff.patch
@@ -0,0 +1,7371 @@
+diff --git a/games/__pycache__/__init__.cpython-310.pyc b/games/__pycache__/__init__.cpython-310.pyc
+index 1b00a1b..347bbb7 100644
+Binary files a/games/__pycache__/__init__.cpython-310.pyc and b/games/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/encoder/GraphEncoder.py b/games/encoder/GraphEncoder.py
+index 7e34464..a0dbe69 100644
+--- a/games/encoder/GraphEncoder.py
++++ b/games/encoder/GraphEncoder.py
+@@ -286,51 +286,171 @@ class HeteroGNNEncoderPongProximity:
+ #         return data_list 
+ 
+ 
++# class GraphEncoderFreeway:
++#     def __init__(self, obj_type_id: str = "obj"):
++#         self.obj_type_id = obj_type_id
++
++#     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
++#         batch_size, num_nodes, object_feature_length = batch_node_features.shape
++#         batch_data = []
++
++#         # Precompute node types for all batches
++#         chicken_mask = batch_node_features[:, :, -3] == 1
++#         lane_mask = batch_node_features[:, :, -2] == 1
++#         car_mask = batch_node_features[:, :, -1] == 1
++
++#         for b in range(batch_size):
++#             node_features = batch_node_features[b]
++#             graph = nx.Graph()
++
++#             # Add object nodes (vectorized)
++#             graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
++
++#             chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
++#             lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
++#             car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
++
++#             # Convert to sets for faster lookups
++#             chicken_set = set(chicken_indices)
++#             lane_set = set(lane_indices)
++#             car_set = set(car_indices)
++
++#             atom_index = num_nodes
++
++#             # Add atoms and edges (can be further optimized with matrix operations)
++#             for i in range(num_nodes):
++#                 if i in chicken_set or i in car_set:
++#                     for j in lane_set:
++#                         if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++#                             atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
++#                             graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
++#                             graph.add_edge(i, atom_index, position=0)
++#                             graph.add_edge(j, atom_index, position=1)
++#                             atom_index += 1
++
++#             # Add LaneNextToLane atoms and edges
++#             for i in range(len(lane_indices) - 1):
++#                 graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
++#                 graph.add_edge(lane_indices[i], atom_index, position=0)
++#                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
++#                 atom_index += 1
++
++#             batch_data.append(graph)
++
++#         return Batch.from_data_list(self.to_pyg_data(batch_data))
++
++#     def to_pyg_data(self, batch_graphs: List[nx.Graph]) -> List[HeteroData]:
++#         data_list = []
++
++#         for graph in batch_graphs:
++#             data = HeteroData()
++#             node_index_mapping = defaultdict(dict)
++#             obj_features = []
++#             atom_features_dict = defaultdict(list)
++#             edge_dict = defaultdict(list)
++
++#             current_obj_features = []
++#             current_atom_features_dict = defaultdict(list)
++
++#             for node, attrs in graph.nodes(data=True):
++#                 node_type = attrs['type']
++#                 features = attrs['features']
++#                 if node_type == self.obj_type_id:
++#                     node_index_mapping[node_type][node] = len(current_obj_features)
++#                     current_obj_features.append(features)
++#                 else:
++#                     node_index_mapping[node_type][node] = len(current_atom_features_dict[node_type])
++#                     current_atom_features_dict[node_type].append(features)
++
++#             if current_obj_features:
++#                 obj_features.append(torch.stack(current_obj_features))
++
++#             for node_type, features_list in current_atom_features_dict.items():
++#                 if features_list:
++#                     # Flatten the features if necessary
++#                     flattened_features = [f.view(-1) for f in features_list]
++#                     atom_features_dict[node_type].append(torch.stack(flattened_features))
++
++#             if obj_features:
++#                 data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
++
++#             for node_type, features_list in atom_features_dict.items():
++#                 if features_list:
++#                     data[node_type].x = torch.cat(features_list, dim=0)
++
++#             for src, dst, attr in graph.edges(data=True):
++#                 src_type = graph.nodes[src]['type']
++#                 dst_type = graph.nodes[dst]['type']
++#                 pos = str(attr['position'])
++#                 edge_type = (src_type, pos, dst_type)
++
++#                 src_idx = node_index_mapping[src_type][src]
++#                 dst_idx = node_index_mapping[dst_type][dst]
++#                 edge_dict[edge_type].append((src_idx, dst_idx))
++#                 # Add reverse edges for bidirectionality
++#                 reverse_edge_type = (dst_type, pos, src_type)
++#                 edge_dict[reverse_edge_type].append((dst_idx, src_idx))
++
++#             for edge_type, edges in edge_dict.items():
++#                 edge_tensor = torch.tensor(edges, dtype=torch.long).t().contiguous()
++#                 data[edge_type].edge_index = edge_tensor
++
++#             data_list.append(data)
++
++#         return data_list
++
+ class GraphEncoderFreeway:
+     def __init__(self, obj_type_id: str = "obj"):
+         self.obj_type_id = obj_type_id
+ 
+     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
+-        batch_size, num_nodes, object_feature_length = batch_node_features.shape
++        # remove the values from batch_node_features that have all zeros in the vector
++        # batch_node_features = batch_node_features[~torch.all(batch_node_features == 0, dim=1)]
+         batch_data = []
+-
+-        # Precompute node types for all batches
+-        chicken_mask = batch_node_features[:, :, -3] == 1
+-        lane_mask = batch_node_features[:, :, -2] == 1
+-        car_mask = batch_node_features[:, :, -1] == 1
++        batch_size = batch_node_features.size(0)
+ 
+         for b in range(batch_size):
+             node_features = batch_node_features[b]
++            num_nodes = node_features.size(0)
+             graph = nx.Graph()
+ 
+-            # Add object nodes (vectorized)
+-            graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
+-
+-            chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
+-            lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
+-            car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
++            object_feature_length = node_features.size(1)
+ 
+-            # Convert to sets for faster lookups
+-            chicken_set = set(chicken_indices)
+-            lane_set = set(lane_indices)
+-            car_set = set(car_indices)
++            # Add object nodes
++            for i in range(num_nodes):
++                graph.add_node(i, type=self.obj_type_id, features=node_features[i].tolist())
+ 
+             atom_index = num_nodes
+ 
+-            # Add atoms and edges (can be further optimized with matrix operations)
+-            for i in range(num_nodes):
+-                if i in chicken_set or i in car_set:
+-                    for j in lane_set:
+-                        if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+-                            atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
+-                            graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
+-                            graph.add_edge(i, atom_index, position=0)
+-                            graph.add_edge(j, atom_index, position=1)
+-                            atom_index += 1
++            # Add ChickenOnLane atoms and edges
++            chicken_indices = [i for i in range(num_nodes) if node_features[i, -3] == 1]
++            lane_indices = [i for i in range(num_nodes) if node_features[i, -2] == 1]
++
++            for i in chicken_indices:
++                for j in lane_indices:
++                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++                        atom_features = torch.zeros((2, object_feature_length)).tolist()
++                        graph.add_node(atom_index, type="ChickenOnLane", features=atom_features)
++                        graph.add_edge(i, atom_index, position=0)
++                        graph.add_edge(j, atom_index, position=1)
++                        atom_index += 1
++
++            # Add CarOnLane atoms and edges
++            car_indices = [i for i in range(num_nodes) if node_features[i, -1] == 1]
++
++            for i in car_indices:
++                for j in lane_indices:
++                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++                        atom_features = torch.zeros((2, object_feature_length)).tolist()
++                        graph.add_node(atom_index, type="CarOnLane", features=atom_features)
++                        graph.add_edge(i, atom_index, position=0)
++                        graph.add_edge(j, atom_index, position=1)
++                        atom_index += 1
+ 
+             # Add LaneNextToLane atoms and edges
+             for i in range(len(lane_indices) - 1):
+-                graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
++                atom_features = torch.zeros((2, object_feature_length)).tolist()
++                graph.add_node(atom_index, type="LaneNextToLane", features=atom_features)
+                 graph.add_edge(lane_indices[i], atom_index, position=0)
+                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
+                 atom_index += 1
+@@ -354,7 +474,7 @@ class GraphEncoderFreeway:
+ 
+             for node, attrs in graph.nodes(data=True):
+                 node_type = attrs['type']
+-                features = attrs['features']
++                features = torch.tensor(attrs['features'])
+                 if node_type == self.obj_type_id:
+                     node_index_mapping[node_type][node] = len(current_obj_features)
+                     current_obj_features.append(features)
+@@ -364,19 +484,16 @@ class GraphEncoderFreeway:
+ 
+             if current_obj_features:
+                 obj_features.append(torch.stack(current_obj_features))
+-
+             for node_type, features_list in current_atom_features_dict.items():
+                 if features_list:
+-                    # Flatten the features if necessary
+                     flattened_features = [f.view(-1) for f in features_list]
+                     atom_features_dict[node_type].append(torch.stack(flattened_features))
+ 
+             if obj_features:
+-                data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
+-
++                data[self.obj_type_id].x = torch.cat(obj_features)
+             for node_type, features_list in atom_features_dict.items():
+                 if features_list:
+-                    data[node_type].x = torch.cat(features_list, dim=0)
++                    data[node_type].x = torch.cat(features_list)
+ 
+             for src, dst, attr in graph.edges(data=True):
+                 src_type = graph.nodes[src]['type']
+@@ -398,8 +515,6 @@ class GraphEncoderFreeway:
+             data_list.append(data)
+ 
+         return data_list
+-
+-    
+ class GraphEncoderFreewayProximity:
+     def __init__(self, obj_type_id: str = "obj"):
+         self.obj_type_id = obj_type_id
+diff --git a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc
+index 7f7cf70..b9ee24e 100644
+Binary files a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc and b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc differ
+diff --git a/games/encoder/__pycache__/__init__.cpython-310.pyc b/games/encoder/__pycache__/__init__.cpython-310.pyc
+index e4059e9..7335618 100644
+Binary files a/games/encoder/__pycache__/__init__.cpython-310.pyc and b/games/encoder/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/__init__.cpython-310.pyc b/games/freeway/__pycache__/__init__.cpython-310.pyc
+index 8f6a241..ee44eda 100644
+Binary files a/games/freeway/__pycache__/__init__.cpython-310.pyc and b/games/freeway/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc
+index b518fb6..db7fb9e 100644
+Binary files a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc and b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc
+index 5560abe..43ec431 100644
+Binary files a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc and b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/freeway_env.py b/games/freeway/freeway_envs/freeway_env.py
+index 9bed93d..f913bc2 100644
+--- a/games/freeway/freeway_envs/freeway_env.py
++++ b/games/freeway/freeway_envs/freeway_env.py
+@@ -724,8 +724,8 @@ class FreewayEnvConstant(gym.Env):
+         self.frame_stack = frame_stack
+ 
+         self.lanes = [100, 200, 300, 400, 500, 600, 700]
+-        self.lanes = [50,80,120]
+-        self.max_cars = 10
++        self.lanes = [50,100]
++        self.max_cars = 5
+         # Define action and observation space
+         # Actions: 0 - Stay, 1 - Move Up, 2 - Move Down
+         self.action_space = spaces.Discrete(3)
+diff --git a/games/model/__pycache__/cnn_model.cpython-310.pyc b/games/model/__pycache__/cnn_model.cpython-310.pyc
+index aaea007..8ce27a0 100644
+Binary files a/games/model/__pycache__/cnn_model.cpython-310.pyc and b/games/model/__pycache__/cnn_model.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_gnn.cpython-310.pyc b/games/model/__pycache__/hetero_gnn.cpython-310.pyc
+index fae3973..212315f 100644
+Binary files a/games/model/__pycache__/hetero_gnn.cpython-310.pyc and b/games/model/__pycache__/hetero_gnn.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc
+index 8b8b9a9..8b90800 100644
+Binary files a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc and b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/policy.cpython-310.pyc b/games/model/__pycache__/policy.cpython-310.pyc
+index 57471c6..9044bb9 100644
+Binary files a/games/model/__pycache__/policy.cpython-310.pyc and b/games/model/__pycache__/policy.cpython-310.pyc differ
+diff --git a/games/model/hetero_gnn.py b/games/model/hetero_gnn.py
+index 141ee67..c1d824c 100644
+--- a/games/model/hetero_gnn.py
++++ b/games/model/hetero_gnn.py
+@@ -11,14 +11,6 @@ from torch_geometric.typing import Adj
+ 
+ from games.model.hetero_message_passing import FanInMP, FanOutMP
+ from torch_geometric.nn import GCNConv, GATConv
+-import torch
+-import torch_geometric as pyg
+-from torch import Tensor
+-from torch.nn import ModuleDict
+-from typing import Dict, Optional, List, Tuple, Union
+-from collections import defaultdict
+-from torch_geometric.data import Batch, HeteroData
+-from torch_geometric.nn import global_add_pool
+ 
+ class HeteroGNN(torch.nn.Module):
+     def __init__(
+@@ -129,122 +121,22 @@ class HeteroGNN(torch.nn.Module):
+         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
+ 
+ 
++class HeteroGCN(torch.nn.Module):
++    def __init__(self, in_channels_dict, out_channels):
++        super(HeteroGCN, self).__init__()
++        self.convs = torch.nn.ModuleDict()
++        for obj_type, in_channels in in_channels_dict.items():
++            self.convs[obj_type] = GCNConv(in_channels, out_channels)
+ 
++    def forward(self, data):
++        for obj_type in data.node_types:
++            x = data[obj_type].x
++            edge_index = data[obj_type, 'to', obj_type].edge_index
++            x = self.convs[obj_type](x, edge_index)
++            x = F.relu(x)
++            data[obj_type].x = x
+ 
+-# class HeteroGNN(torch.nn.Module):
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         num_layer: int,
+-#         obj_type_id: str,
+-#         arity_dict: Dict[str, int],
+-#         input_size: int = 7,  # Assuming initial input size is 7 for obj nodes
+-#         aggr: Optional[Union[str, pyg.nn.aggr.Aggregation]] = "sum",
+-#     ):
+-#         """
+-#         :param hidden_size: The size of object embeddings.
+-#         :param num_layer: Total number of message exchange iterations.
+-#         :param aggr: Aggregation function to be used for message passing.
+-#         :param obj_type_id: The type identifier of objects in the x_dict.
+-#         :param arity_dict: A dictionary mapping predicate names to their arity.
+-#         Creates one MLP for each predicate.
+-#         Note that predicates as well as goal-predicates are meant.
+-#         """
+-#         super().__init__()
+-
+-#         self.hidden_size: int = hidden_size
+-#         self.num_layer: int = num_layer
+-#         self.obj_type_id: str = obj_type_id
+-
+-#         # Initialize Linear layers for each node type based on arity
+-#         self.linear_layers = torch.nn.ModuleDict()
+-#         self.linear_layers[obj_type_id] = torch.nn.Linear(input_size, hidden_size)
+-#         for pred, arity in arity_dict.items():
+-#             if arity > 0:
+-#                 self.linear_layers[pred] = torch.nn.Linear(input_size * arity, hidden_size * arity)
+-
+-#         # Initialize MLPs for each predicate
+-#         mlp_dict = {
+-#             pred: HeteroGNN.mlp(hidden_size * arity, hidden_size * arity, hidden_size * arity)
+-#             for pred, arity in arity_dict.items()
+-#             if arity > 0
+-#         }
+-
+-#         self.obj_to_atom = FanOutMP(mlp_dict, src_name=obj_type_id)
+-
+-#         self.obj_update = HeteroGNN.mlp(
+-#             in_size=(hidden_size + hidden_size), hidden_size=(hidden_size + hidden_size) * 2, out_size=hidden_size
+-#         )
+-
+-#         self.atom_to_obj = FanInMP(
+-#             hidden_size=hidden_size,
+-#             dst_name=obj_type_id,
+-#             aggr=aggr,
+-#         )
+-
+-#         #self.readout = HeteroGNN.mlp(hidden_size, 2 * hidden_size, 1)
+-
+-#     def encode(self, x_dict: Dict[str, Tensor], device: torch.device) -> Dict[str, Tensor]:
+-#         # Apply linear transformation to all node types based on their arity
+-#         for k, v in x_dict.items():
+-#             arity = 1 if k == self.obj_type_id else v.size(1) // self.hidden_size
+-#             x_dict[k] = self.linear_layers[k](v.view(v.size(0), -1)).to(device)
+-#         return x_dict
+-
+-#     def layer(self, x_dict, edge_index_dict):
+-#         out = self.obj_to_atom(x_dict, edge_index_dict)
+-#         x_dict.update(out)
+-#         out = self.atom_to_obj(x_dict, edge_index_dict)
+-#         obj_emb = torch.cat([x_dict[self.obj_type_id], out[self.obj_type_id]], dim=1)
+-#         obj_emb = self.obj_update(obj_emb)
+-#         x_dict[self.obj_type_id] = obj_emb
+-        
+-
+-#     def forward(
+-#         self,
+-#         x_dict: Dict[str, Tensor],
+-#         edge_index_dict: Dict[str, Adj],
+-#         batch_dict: Optional[Dict[str, Tensor]] = None,
+-#     ):
+-#         device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+-#         x_dict = {k: v.to(device) for k, v in x_dict.items() if v.numel() != 0}
+-#         edge_index_dict = {k: v.to(device) for k, v in edge_index_dict.items() if v.numel() != 0}
+-
+-#         x_dict = self.encode(x_dict, device)  # Encode to hidden size
+-
+-#         for _ in range(self.num_layer):
+-#             self.layer(x_dict, edge_index_dict)
+-
+-#         obj_emb = x_dict[self.obj_type_id]
+-#         batch = (
+-#             batch_dict[self.obj_type_id].to(device)
+-#             if batch_dict is not None
+-#             else torch.zeros(obj_emb.shape[0], dtype=torch.long, device=obj_emb.device)
+-#         )
+-#         aggr = pyg.nn.global_add_pool(obj_emb, batch)
+-#         return aggr
+-
+-#     @staticmethod
+-#     def mlp(in_size: int, hidden_size: int, out_size: int):
+-#         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
+-
+-
+-# class HeteroGCN(torch.nn.Module):
+-#     def __init__(self, in_channels_dict, out_channels):
+-#         super(HeteroGCN, self).__init__()
+-#         self.convs = torch.nn.ModuleDict()
+-#         for obj_type, in_channels in in_channels_dict.items():
+-#             self.convs[obj_type] = GCNConv(in_channels, out_channels)
+-
+-#     def forward(self, data):
+-#         for obj_type in data.node_types:
+-#             x = data[obj_type].x
+-#             edge_index = data[obj_type, 'to', obj_type].edge_index
+-#             x = self.convs[obj_type](x, edge_index)
+-#             x = F.relu(x)
+-#             data[obj_type].x = x
+-
+-#         return data
++        return data
+ 
+ class HeteroGAT(torch.nn.Module):
+     def __init__(self, in_channels_dict, out_channels):
+diff --git a/games/model/hetero_message_passing.py b/games/model/hetero_message_passing.py
+index 0b4020c..230410f 100644
+--- a/games/model/hetero_message_passing.py
++++ b/games/model/hetero_message_passing.py
+@@ -1,183 +1,3 @@
+-# import abc
+-# from typing import Any, Dict, List, Optional, Union
+-
+-# import torch
+-# import torch_geometric as pyg
+-# from torch import Tensor
+-# from torch_geometric.nn import Aggregation, SimpleConv
+-# from torch_geometric.nn.conv.hetero_conv import group
+-# from torch_geometric.nn.module_dict import ModuleDict
+-# from torch_geometric.typing import Adj, EdgeType, OptPairTensor
+-
+-
+-# class HeteroRouting(torch.nn.Module):
+-#     """
+-#     Handles heterogeneous message passing very similar to pyg.nn.HeteroConv.
+-#     Instead of specifying a convolution for each EdgeType more generic rules can be used.
+-#     """
+-
+-#     def __init__(self, aggr: Optional[str | Aggregation] = None) -> None:
+-#         super().__init__()
+-#         self.aggr = aggr
+-
+-#     @abc.abstractmethod
+-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
+-#         pass
+-
+-#     @abc.abstractmethod
+-#     def _internal_forward(self, x, edges_index, edge_type: EdgeType):
+-#         pass
+-
+-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
+-#         aggregated: Dict[str, Tensor] = {}
+-#         for key, value in out_dict.items():
+-#             # hetero_conv.group does not yet support Aggregation modules
+-#             if isinstance(self.aggr, Aggregation):
+-#                 out = torch.stack(value, dim=0)
+-#                 out = self.aggr(out, dim=0)
+-#                 if out.dim() == 3 and out.shape[0] == 1:
+-#                     out = out[0]  # TODO Why does Softmax return one dim to much
+-#             else:
+-#                 out = group(value, self.aggr)
+-#             aggregated[key] = out
+-#         return aggregated
+-
+-#     def forward(self, x_dict, edge_index_dict):
+-#         """
+-#         Apply message passing to each edge_index key if the edge-type is accepted.
+-#         Calls the internal forward with a normal homogenous signature of x, edge_index
+-#         :param x_dict: Dictionary with a feature matrix for each node type
+-#         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
+-#         :return: Dictionary with each processed dst as key and their updated embedding as value.
+-#         """
+-       
+-#         out_dict: Dict[str, Any] = {}
+-#         for edge_type in edge_index_dict.keys():
+-#             src, rel, dst = edge_type
+-
+-#             if not self._accept_edge(src, rel, dst):
+-#                 continue
+-
+-#             if src == dst and src in x_dict:
+-#                 x = x_dict[src]
+-#             elif src in x_dict or dst in x_dict:
+-#                 x = (
+-#                     x_dict.get(src, None),
+-#                     x_dict.get(dst, None),
+-#                 )
+-#             else:
+-#                 raise ValueError(
+-#                     f"Neither src ({src}) nor destination ({dst})"
+-#                     + f" found in x_dict ({x_dict})"
+-#                 )
+-
+-#             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
+-#             if dst not in out_dict:
+-#                 out_dict[dst] = [out]
+-#             else:
+-#                 out_dict[dst].append(out)
+-
+-#         return self._group_out(out_dict)
+-
+-
+-# class FanOutMP(HeteroRouting):
+-#     """
+-#      Accepts EdgeTypes with the defined src_name.
+-#     1. For each destination concatenate all embeddings of the source.
+-#     2. Run the destination specific MLP on the concatenated embeddings.
+-#     3. Save the new embedding under the destination key.
+-#     FanOut should be aggregation free in theory.
+-#     Every atom gets only as many messages as the arity of its predicate.
+-#     :param update_mlp_by_dst: An MLP for each possible destination.
+-#         Needs the degree of incoming edges as input and output dimension
+-#     :param src_name: The node-type for which outgoing edges should be accepted.
+-#     """
+-
+-#     def __init__(
+-#         self,
+-#         update_mlp_by_dst: Dict[str, torch.nn.Module],
+-#         src_name: str,
+-#     ) -> None:
+-#         """ """
+-#         super().__init__()
+-#         self.update_mlp_by_dst = ModuleDict(update_mlp_by_dst)
+-#         self.simple = SimpleConv()
+-#         self.src_name = src_name
+-
+-#     def _accept_edge(self, src, rel, dst) -> bool:
+-#         return src == self.src_name
+-
+-#     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
+-#         position = int(edge_type[1])
+-        
+-#         # Debug: Print edge index and node features
+-
+-#         # Ensure edge indices are within bounds
+-#         max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
+-#         if edge_index.max() >= max_index:
+-#             raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
+-        
+-
+-#         out = self.simple(x, edge_index)
+-#         return position, out
+-
+-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
+-#         for dst, value in out_dict.items():
+-#             sorted_out = sorted(value, key=lambda tpl: tpl[0])
+-#             stacked = torch.cat([out for _, out in sorted_out], dim=1)
+-#             out_dict[dst] = self.update_mlp_by_dst[dst](stacked)
+-
+-#         return out_dict
+-
+-
+-# class FanInMP(HeteroRouting):
+-
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         dst_name: str,
+-#         aggr: Optional[Union[str, Aggregation]] = "sum",
+-#     ) -> None:
+-#         super().__init__(aggr)
+-#         self.select = SelectMP(hidden_size)
+-#         self.dst_name = dst_name
+-
+-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
+-#         return dst == self.dst_name
+-
+-#     def _internal_forward(self, x, edges_index, edge_type):
+-#         return self.select(x, edges_index, int(edge_type[1]))
+-
+-
+-# class SelectMP(pyg.nn.MessagePassing):
+-
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         aggr: Optional[str | List[str]] = "sum",
+-#         aggr_kwargs: Optional[Dict[str, Any]] = None,
+-#     ) -> None:
+-#         super().__init__(
+-#             aggr,
+-#             aggr_kwargs=aggr_kwargs,
+-#         )
+-#         self.hidden = hidden_size
+-
+-#     def forward(
+-#         self, x: Union[Tensor, OptPairTensor], edge_index: Adj, position: int
+-#     ) -> Tensor:
+-#         if isinstance(x, Tensor):
+-#             x = (x, x)
+-#         return self.propagate(edge_index, x=x, position=position)
+-
+-#     def message(self, x_j: Tensor, position: int) -> Tensor:
+-#         # Take the i-th hidden-number of elements from the last dimension
+-#         # e.g from [1, 2, 3, 4, 5, 6] with hidden=2 and position=1 -> [3, 4]
+-#         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
+-#         #               split[self.position]
+-#         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
+-#         return sliced
+-
+ import abc
+ from typing import Any, Dict, List, Optional, Union
+ 
+@@ -230,6 +50,7 @@ class HeteroRouting(torch.nn.Module):
+         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
+         :return: Dictionary with each processed dst as key and their updated embedding as value.
+         """
++       
+         out_dict: Dict[str, Any] = {}
+         for edge_type in edge_index_dict.keys():
+             src, rel, dst = edge_type
+@@ -251,7 +72,6 @@ class HeteroRouting(torch.nn.Module):
+                 )
+ 
+             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
+-
+             if dst not in out_dict:
+                 out_dict[dst] = [out]
+             else:
+@@ -289,6 +109,15 @@ class FanOutMP(HeteroRouting):
+ 
+     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
+         position = int(edge_type[1])
++        
++        # Debug: Print edge index and node features
++
++        # Ensure edge indices are within bounds
++        max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
++        if edge_index.max() >= max_index:
++            raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
++        
++
+         out = self.simple(x, edge_index)
+         return position, out
+ 
+@@ -347,4 +176,4 @@ class SelectMP(pyg.nn.MessagePassing):
+         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
+         #               split[self.position]
+         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
+-        return sliced
++        return sliced
+\ No newline at end of file
+diff --git a/games/model/policy.py b/games/model/policy.py
+index 7119db4..2d9ea67 100644
+--- a/games/model/policy.py
++++ b/games/model/policy.py
+@@ -1,5 +1,3 @@
+-import pstats
+-import time
+ import torch as th
+ import torch.nn as nn
+ import gymnasium as gym
+@@ -7,53 +5,48 @@ from stable_baselines3.common.policies import ActorCriticPolicy
+ from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
+ from games.model.hetero_gnn import HeteroGNN
+ from typing import Dict
+-from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
++from games.encoder.GraphEncoder import HeteroGNNEncoderPong
+ from gymnasium import spaces
++import torch
++import torch.nn as nn
++from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
++from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
++from games.model.hetero_gnn import HeteroGNN
+ import torch_geometric as pyg
+ from games.model.cnn_model import CNNgame
+-
++import time
+ class CustomHeteroGNN(BaseFeaturesExtractor):
+     def __init__(self, observation_space, features_dim=64, hidden_size=64, num_layer=2, obj_type_id='obj', arity_dict={'atom': 2}, game = 'pong'):
+         super().__init__(observation_space, features_dim=hidden_size)
+         if game == 'pong':
+             self.encoder = HeteroGNNEncoderPong()
+         elif game == 'freeway':
+-            self.encoder = GraphEncoderFreeway()
++            self.encoder = GraphEncoderFreeway() 
+         elif game == 'pacman':
+             self.encoder = GraphEncoderPacman()
+             self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=8)
+         elif game == 'breakout':
+             self.encoder = GraphEncoderBreakout()
+         
+-        self.counter = 0
+-
+         # set device to mps if available
+-        # self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
++        #self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
+         self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+-        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict).to(self.device)
++        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=7).to(self.device)
++
+ 
+     def forward(self, observations):
+         # Encode observations to a graph using the encoder
+-        self.counter+=1
+-        
+         start = time.time()
+         pyg_data = self.encoder.encode(observations)
+-
+         # if observations.shape[0] >1:
+         #     print(f"Time to encode: {time.time() - start}")
+ 
+-        #pyg_data = pyg_data.to(self.device) 
++        pyg_data = pyg_data.to(self.device) 
+         obj_emb = self.model(pyg_data.x_dict, pyg_data.edge_index_dict, pyg_data.batch_dict)
+         # Flatten or pool the embeddings if necessary to match the expected features_dim
+-        #print(f"Time to encode: {time.time() - start}")
+-        #total_time += 
+-        if self.counter % 2048/64 == 0:
+-            print(f"time to encode step size is: {time.time() - start}")
+-
+         return obj_emb
+ 
+ 
+-# Additional classes for the rest of the code remain unchanged
+ 
+ import torch
+ import torch.nn as nn
+@@ -101,5 +94,4 @@ class CustomCNN(BaseFeaturesExtractor):
+         
+         cnn_output = self.cnn(observations)
+         final_output = self.adjust_to_features_dim(cnn_output)
+-        return final_output
+-
++        return final_output
+\ No newline at end of file
+Submodule games/pacman contains modified content
+diff --git a/games/pacman/config.py b/games/pacman/config.py
+deleted file mode 100644
+index 73568ce..0000000
+--- a/games/pacman/config.py
++++ /dev/null
+@@ -1,40 +0,0 @@
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]+"/games/pacman"
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-# set up the colors 
+-ghostcolor = {}
+-ghostcolor[0] = (255, 0, 0, 255)
+-ghostcolor[1] = (255, 128, 255, 255)
+-ghostcolor[2] = (128, 255, 255, 255)
+-ghostcolor[3] = (255, 128, 0, 255)
+-ghostcolor[4] = (50, 50, 255, 255) # blue, vulnerable ghost
+-ghostcolor[5] = (255, 255, 255, 255) # white, flashing ghost
+\ No newline at end of file
+diff --git a/games/pacman/fruit.py b/games/pacman/fruit.py
+deleted file mode 100644
+index 51e2b1c..0000000
+--- a/games/pacman/fruit.py
++++ /dev/null
+@@ -1,112 +0,0 @@
+-from games.pacman.config import *
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        #self.thisGame = thisGame
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self, thisGame):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            #snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+diff --git a/games/pacman/game.py b/games/pacman/game.py
+deleted file mode 100644
+index 334c813..0000000
+--- a/games/pacman/game.py
++++ /dev/null
+@@ -1,214 +0,0 @@
+-from games.pacman.config import *
+-import os
+-import pygame
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self, thisFruit, player, screen):
+-        self.player = player
+-        self.screen = screen
+-        self.thisFruit = thisFruit
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 4 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self, thisLevel, tileID, tileIDImage, tileIDName):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 1 )
+-        thisLevel.LoadLevel( self.GetLevelNum(), tileID, tileIDImage , tileIDName)
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                #snd_extralife.play()
+-                self.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (self.thisFruit.imFruit[ self.thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self, thisLevel):
+-            
+-        possibleScreenX = self.player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = self.player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        self.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        self.thisLevel.LoadLevel( self.thisGame.GetLevelNum() )
+-        
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+\ No newline at end of file
+diff --git a/games/pacman/ghost.py b/games/pacman/ghost.py
+deleted file mode 100644
+index 628eb75..0000000
+--- a/games/pacman/ghost.py
++++ /dev/null
+@@ -1,174 +0,0 @@
+-from games.pacman.config import *
+-
+-class ghost ():
+-    def __init__ (self, ghostID, path, screen, player):
+-        self.player = player
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.ghostTimer = 0
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self, thisGame, tileID, tileIDImage, ghosts):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if self.player.x > self.x and self.player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif self.player.x < self.x and self.player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif self.player.x > self.x and self.player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif self.player.x < self.x and self.player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            self.screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            self.screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self, thisLevel, tileID):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay(thisLevel, tileID)
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = self.path.FindPath( (self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol) )
+-                self.FollowNextPathWay(thisLevel, tileID)
+-            
+-    def FollowNextPathWay(self, thisLevel, tileID, counter=0, max_recursion_depth=900):
+-        # Stop recursion if the maximum depth is reached
+-        if counter >= max_recursion_depth:
+-            return
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-            else:
+-                # this ghost has reached his destination!!
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1) 
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID['pellet'] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (randRow, randCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1)
+\ No newline at end of file
+diff --git a/games/pacman/images/blue.png b/games/pacman/images/blue.png
+deleted file mode 100644
+index c633636..0000000
+Binary files a/games/pacman/images/blue.png and /dev/null differ
+diff --git a/games/pacman/images/pacman.png b/games/pacman/images/pacman.png
+deleted file mode 100644
+index d005d4d..0000000
+Binary files a/games/pacman/images/pacman.png and /dev/null differ
+diff --git a/games/pacman/images/pink.png b/games/pacman/images/pink.png
+deleted file mode 100644
+index 9614f58..0000000
+Binary files a/games/pacman/images/pink.png and /dev/null differ
+diff --git a/games/pacman/images/play.png b/games/pacman/images/play.png
+deleted file mode 100644
+index 05842b1..0000000
+Binary files a/games/pacman/images/play.png and /dev/null differ
+diff --git a/games/pacman/images/red.png b/games/pacman/images/red.png
+deleted file mode 100644
+index 5c5ea84..0000000
+Binary files a/games/pacman/images/red.png and /dev/null differ
+diff --git a/games/pacman/images/win.png b/games/pacman/images/win.png
+deleted file mode 100644
+index 728ccdf..0000000
+Binary files a/games/pacman/images/win.png and /dev/null differ
+diff --git a/games/pacman/images/yellow.png b/games/pacman/images/yellow.png
+deleted file mode 100644
+index 8db5a0a..0000000
+Binary files a/games/pacman/images/yellow.png and /dev/null differ
+diff --git a/games/pacman/level.py b/games/pacman/level.py
+deleted file mode 100644
+index b5153ee..0000000
+--- a/games/pacman/level.py
++++ /dev/null
+@@ -1,471 +0,0 @@
+-from games.pacman.config import *
+-
+-class level ():
+-    
+-    def __init__ (self, game, player, ghosts, path, Fruit, screen):
+-        self.player = player
+-        self.ghosts = ghosts
+-        self.path = path
+-        self.thisFruit = Fruit
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        self.thisLevel = level
+-        # self.snd_pellet = snd_pellet
+-        # self.snd_powerpellet = snd_powerpellet
+-        self.map = {}
+-        self.thisGame = game
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        self.screen = screen
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > self.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > self.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = self.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-    def GetWallLocations(self):
+-        wallLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.IsWall(row, col):
+-                    wallLocations.append((row, col))
+-        return wallLocations 
+-    
+-    def GetPelletLocations(self):
+-        pelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 2:
+-                    pelletLocations.append((row*16, col*16))
+-        return pelletLocations
+-    
+-    def GetPowerPelletLocations(self):
+-        powerPelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 3:
+-                    powerPelletLocations.append((row, col))
+-        return powerPelletLocations
+-    
+-
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-        
+-    # check if player has hit a pellet, powerpellet or a wall
+-    def CheckIfHit(self, playerX, playerY, row, col, tileID):
+-        
+-            for iRow in range(row - 1, row + 2, 1):
+-                for iCol in range(col - 1, col + 2, 1):
+-                
+-                    if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                        # check the offending tile ID
+-                        result = self.GetMapTile(iRow, iCol)
+-            
+-                        if result == tileID:
+-                            return True   
+-                        elif result >= 100 and result <= 199:
+-                            return True
+-                        else:
+-                            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col, tileID):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = self.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_pellet[self.player.pelletSndNum].play()
+-                        self.player.pelletSndNum = 1 - self.player.pelletSndNum
+-                        
+-                        self.pellets -= 1
+-                        
+-                        self.thisGame.AddToScore(10)
+-                        
+-                        if self.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            self.thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_powerpellet.play()
+-                        
+-                        self.thisGame.AddToScore(100)
+-                        self.thisGame.ghostValue = 200
+-                        
+-                        self.thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if self.ghosts[i].state == 1:
+-                                self.ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, self.thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if self.thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    self.player.x = i * 16
+-                                    
+-                                    if self.player.velX > 0:
+-                                        self.player.x += 16
+-                                    else:
+-                                        self.player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, self.thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if self.thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    self.player.y = i * 16
+-                                    
+-                                    if self.player.velY > 0:
+-                                        self.player.y += 16
+-                                    else:
+-                                        self.player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self, tileID):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self,  tileID):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if self.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if self.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self, tileID, tileIDImage):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, self.thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, self.thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = self.thisGame.screenNearestTilePos[0] + row
+-                actualCol = self.thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        self.screen.blit (self.thisGame.imLogo, (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                        self.screen.blit(self.thisGame.imHiscores,(col*16-self.thisGame.screenPixelOffset[0],row*16-self.thisGame.screenPixelOffset[1]))
+-                    
+-              
+-                    else:
+-                        self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-    
+-    
+-    def GetCrossRef(self, tileIDName, tileID, tileIDImage):
+-        for key, value in tileIDName.items():
+-            thisID = key
+-            if thisID not in NO_GIF_TILES:
+-                tileIDImage[thisID] = pygame.image.load(os.path.join(SCRIPT_PATH, "res", "tiles", value + ".gif")).convert()
+-            else:
+-                tileIDImage[thisID] = pygame.Surface((16, 16))
+-
+-            # Change colors in tileIDImage to match maze colors
+-            for y in range(16):
+-                for x in range(16):
+-                    current_color = tileIDImage[thisID].get_at((x, y))
+-                    if current_color == (255, 206, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeLightColor)
+-                    elif current_color == (132, 0, 132, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.fillColor)
+-                    elif current_color == (255, 0, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeShadowColor)
+-                    elif current_color == (128, 0, 128, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.pelletColor)
+-
+-
+-
+-    def LoadLevel (self, levelNum, tileID, tileIDImage, tileIDName):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    self.thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            self.player.homeX = k * 16
+-                            self.player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the self.ghosts
+-                            
+-                            self.ghosts[thisID - 10].homeX = k * 16
+-                            self.ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        self.GetCrossRef(tileIDName, tileID, tileIDImage)
+-
+-        # load map into the pathfinder object
+-        self.path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, self.path.size[0], 1):
+-            for col in range(0, self.path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    self.path.SetType( row, col, 1 )
+-                else:
+-                    self.path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart(tileID)
+-        
+-    def Restart (self, tileID):
+-        
+-        for i in range(0, 4, 1):
+-            # move self.ghosts back to home
+-
+-            self.ghosts[i].x = self.ghosts[i].homeX
+-            self.ghosts[i].y = self.ghosts[i].homeY
+-            self.ghosts[i].velX = 0
+-            self.ghosts[i].velY = 0
+-            self.ghosts[i].state = 1
+-            self.ghosts[i].speed = 1
+-            self.ghosts[i].Move(self, tileID)
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            self.ghosts[i].currentPath = self.path.FindPath( (self.ghosts[i].nearestRow, self.ghosts[i].nearestCol), (randRow, randCol) )
+-            self.ghosts[i].FollowNextPathWay(self, tileID)
+-            
+-        self.thisFruit.active = False
+-            
+-        self.thisGame.fruitTimer = 0
+-
+-        self.player.x = self.player.homeX
+-        self.player.y = self.player.homeY
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        self.player.animFrame = 3
+-
+-
+diff --git a/games/pacman/pacman.py b/games/pacman/pacman.py
+deleted file mode 100644
+index 70436f3..0000000
+--- a/games/pacman/pacman.py
++++ /dev/null
+@@ -1,686 +0,0 @@
+-import random
+-import pygame
+-import numpy as np
+-from pygame.math import Vector2
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-        # create a 2d grid numpy array of 20x20
+-
+-
+-
+-    
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-        self.ghost_eating = False
+-        self.position = Vector2(x, y)  # Current position as a vector
+-        self.goal = Vector2()  # Goal position initialized to zero vector
+-        self.directions = {
+-            'up': Vector2(0, -1),
+-            'down': Vector2(0, 1),
+-            'left': Vector2(-1, 0),
+-            'right': Vector2(1, 0)
+-        }
+-
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-   
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-    
+-
+-
+-class Ghost(Player):
+-    """
+-    Class to handle ghosts, inheriting from Player.
+-    """
+-    def __init__(self, x, y, filename, game):
+-        super().__init__(x, y, filename)
+-        self.game = game
+-
+-    def update_behavior(self, pacman):
+-        self.mode = "flee" if pacman.ghost_eating else "chase"
+-
+-    def move(self, pacman):
+-        self.update_behavior(pacman)
+-        direction = self.chase_pacman() if self.mode == "chase" else self.run_away_from_pacman()
+-        if direction:
+-            movement = self.calculate_movement(direction)
+-            self.change_speed(*movement)
+-
+-    def chase_pacman(self):
+-        return self.goal_direction(self.game.game_map)
+-
+-    def run_away_from_pacman(self):
+-        furthest_point = self.find_furthest_point()
+-        self.set_goal(*furthest_point)
+-        return self.goal_direction(self.game.game_map)
+-
+-    def find_furthest_point(self):
+-        max_distance = 0
+-        furthest_point = (self.rect.x, self.rect.y)
+-        for y in range(self.game.path_finder.size[0]):
+-            for x in range(self.game.path_finder.size[1]):
+-                if self.game.game_map[y][x] == 0:
+-                    distance = (Vector2(x, y) - self.position).length_squared()
+-                    if distance > max_distance:
+-                        max_distance = distance
+-                        furthest_point = (x, y)
+-        return furthest_point
+-
+-    def goal_direction(self, game_map):
+-        TILEWIDTH = 30
+-        distances = []
+-        directions = list(self.directions.keys())
+-        for direction in directions:
+-            next_position = self.position + self.directions[direction] * TILEWIDTH
+-            if game_map[int(next_position.y // TILEWIDTH)][int(next_position.x // TILEWIDTH)] == 1:
+-                distances.append(float('inf'))
+-            else:
+-                vec = next_position - self.goal
+-                distances.append(vec.length_squared())
+-        if min(distances) == float('inf'):
+-            return None
+-        else:
+-            index = distances.index(min(distances))
+-            return directions[index]
+-
+-    def calculate_movement(self, direction):
+-        movement_map = {
+-            'up': (0, -30),
+-            'down': (0, 30),
+-            'left': (-30, 0),
+-         'right': (30, 0)
+-        }
+-        return movement_map.get(direction, (0, 0)) 
+-    
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.cell_size = 30
+-        self.grid_width = 20
+-        self.grid_height = 20
+-        #self.path_finder = path_finder()
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-       
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        self.block_list = pygame.sprite.RenderPlain()
+-        self.ghost_list = pygame.sprite.RenderPlain()
+-        self.pacman_collide = pygame.sprite.RenderPlain()
+-        self.wall_list = self.setup_walls()
+-
+-        self.gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        self.pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(self.pacman)
+-        self.pacman_collide.add(self.pacman)
+-
+-        self.ghost_two = Ghost(w, b_h, 'images/red.png', self)
+-        self.ghost_list.add(self.ghost_two)
+-        self.all_sprites_list.add(self.ghost_two)
+-
+-        self.ghost_one = Ghost(w, m_h, 'images/pink.png', self)
+-        self.ghost_list.add(self.ghost_one)
+-        self.all_sprites_list.add(self.ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png',self)
+-        self.ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png',self)
+-        self.ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-        grid = [[0 for _ in range(19)] for _ in range(19)]
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, self.wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, self.pacman_collide, False)
+-                    if b_collide:
+-                        grid[row][column] = 1
+-
+-                        continue
+-
+-                    elif p_collide:
+-                        grid[row][column] = 0
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        grid[row][column] = 0
+-                        self.block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # create new grid which is 20x20 with edges as 1 from grid
+-        
+-        new_grid = [[1 if i == 0 or i == 19 or j == 0 or j == 19 else grid[i-1][j-1] for j in range(20)] for i in range(20)] 
+-        self.game_map = new_grid
+-        self.path_finder.ResizeMap(20, 20)
+-        self.update_path_finder_with_walls(new_grid)
+-        blocks = list(self.block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-        self.power_pellet_list = pygame.sprite.RenderPlain()
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            self.power_pellet_list.add(power_pellet)
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        self.bll = len(self.block_list)
+-
+-
+-   
+-
+-    def update_path_finder_with_walls(self, grid):
+-        for i in range(len(grid[0])):
+-            for j in range(len(grid[1])):
+-                self.path_finder.SetType(i,j, grid[i][j])
+-
+-
+-
+-    def get_maze_size(self):
+-        max_width = 0
+-        max_height = 0
+-
+-        for wall in self.walls:
+-            x, y, width, height = wall
+-            # Calculate the furthest extents of the walls
+-            max_width = max(max_width, x + width)
+-            max_height = max(max_height, y + height)
+-
+-        return max_width, max_height
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate 
+-    
+-
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-
+-
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-       
+-
+-        
+-                
+-       
+-
+-        # Get the unique row indices
+-
+-        
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, -30)
+-
+-            self.pacman.update(self.wall_list, self.gate) 
+-
+-            # Assuming new_grid is your grid
+-            
+-
+-            # Check if the two grids are the same
+-            # print(f"new_grid_np: {new_grid_np}")
+-            # print(f"path_finder_grid: {path_finder_grid}")
+-            # print(f"Are the grids equal? {are_grids_equal}")
+-        # whic
+-            #self.ghost_one.move(self.pacman)
+-            self.ghost_two.move(self.pacman)
+-            # ghost_three.move(pacman)
+-            # ghost_four.move(pacman)
+-
+-            # ghost_one.update(wall_list, None)
+-            self.ghost_two.update(self.wall_list, None)
+-            print(f"Ghost Two position: {self.ghost_two.rect.x}, {self.ghost_two.rect.y}")
+-            print("Is Ghost Two in all_sprites_list?", self.ghost_two in self.all_sprites_list)
+-            print("Is Ghost Two in ghost_list?", self.ghost_two in self.ghost_list)
+-            # ghost_three.update(wall_list, None)
+-            # ghost_four.update(wall_list, None)
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(self.pacman, self.block_list, True) 
+-            power_pellets_hit_list = pygame.sprite.spritecollide(self.pacman, self.power_pellet_list, True)
+-            # check if pacman hits any power pellet
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            self.wall_list.draw(self.screen)
+-            self.gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            self.ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(self.bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == self.bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(self.pacman, self.ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_env.py b/games/pacman/pacman_env.py
+deleted file mode 100644
+index e185f02..0000000
+--- a/games/pacman/pacman_env.py
++++ /dev/null
+@@ -1,370 +0,0 @@
+-import gym
+-from gym import spaces
+-import pygame
+-import numpy as np
+-import os
+-import sys
+-from pygame.locals import *
+-import time
+-# Import your game modules
+-from games.pacman.player import pacman
+-from games.pacman.ghost import ghost
+-from games.pacman.path import path_finder
+-from games.pacman.level import level
+-from games.pacman.game import game
+-from games.pacman.fruit import fruit
+-from games.pacman.config import *
+-import networkx as nx
+-from games.encoder.GraphEncoder import GraphConverter
+-
+-class PacmanEnv(gym.Env):
+-    metadata = {'render.modes': ['human', 'rgb_array']}
+-    def __init__(self):
+-        super(PacmanEnv, self).__init__()
+-
+-        # Action space (4 directions)
+-        self.action_space = spaces.Discrete(4)  # [Up, Down, Left, Right]
+-
+-        # Observation space (Assuming a RGB image of the screen)
+-        self.observation_space = spaces.Box(low=0, high=255,
+-                                            shape=(self.window_height, self.window_width, 3 * self.frame_stack),
+-                                            dtype=np.uint8)
+-        # Initialize the game
+-        pygame.init()
+-        self.window = pygame.display.set_mode((1, 1))
+-        img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-        pygame.display.set_caption("Pacman")
+-        self.screen = pygame.display.get_surface()
+-        self.tileID = {}
+-        self.tileIDName = {}
+-        self.tileIDImage = {}
+-        self.NO_GIF_TILES = set()
+-        self.path = path_finder()
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen)
+-        self.frame_stack = 4 
+-        self.window_width = 336
+-        self.window_height = 400
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        self.load_resources()
+-
+-
+-    def load_resources(self):
+-        lineNum = 0
+-        self.SCRIPT_PATH = os.path.dirname(__file__)
+-        res_path = os.path.join(self.SCRIPT_PATH, "res")
+-        # Load background images
+-        self.img_Background = pygame.image.load(os.path.join(res_path, "backgrounds", "1.gif")).convert()
+-        
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-
+-        # Load tile images and other assets by initializing the cross-reference data structures
+-          # Define this properly based on your game's requirements
+-
+-        # Assume crossref.txt has the mappings from tile ID to tile names and their associated images
+-        for i in f.readlines():
+-            # print " ========= Line " + str(lineNum) + " ============ "
+-            while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-            while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-            str_splitBySpace = i.split(' ')
+-            
+-            j = str_splitBySpace[0]
+-                
+-            if (j == "'" or j == "" or j == "#"):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-            else:
+-                # print str(wordNum) + ". " + j
+-                useLine = True
+-            
+-            if useLine == True:
+-                self.tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-                self.tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-                
+-                thisID = int(str_splitBySpace[0])
+-                if not thisID in NO_GIF_TILES:
+-                    self.tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-                else:
+-                        self.tileIDImage[ thisID ] = pygame.Surface((16,16))
+-                
+-                # change colors in tileIDImage to match maze colors
+-                for y in range(0, 16, 1):
+-                    for x in range(0, 16, 1):
+-                    
+-                        if self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                            # wall edge
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeLightColor )
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                            # wall fill
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.fillColor ) 
+-
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeShadowColor )   
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.pelletColor )   
+-                    
+-                # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-            lineNum += 1
+-    
+-    def reset(self):
+-        # Reset the game
+-                # Load resources
+-        #self.load_resources()
+-        
+-        # Game components
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen) 
+-        self.load_resources()
+-        #self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.clock = pygame.time.Clock()
+-        self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.level.LoadLevel( self.game.GetLevelNum(), self.tileID, self.tileIDImage, self.tileIDName )
+-        self.window = pygame.display.set_mode( self.game.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def step(self, action):
+-        reward = 0
+-        done = False
+-        # Map action to game controls
+-        #print(self.game.mode)
+-        if self.game.mode == 1:
+-            if action == 0:
+-                if not self.level.CheckIfHitWall(self.player.x + self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = self.player.speed
+-                    self.player.velY = 0
+-                    
+-            elif action == 1:
+-                if not self.level.CheckIfHitWall(self.player.x - self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = -self.player.speed
+-                    self.player.velY = 0
+-                
+-            elif action == 2:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.speed, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = 0
+-                    self.player.velY = self.player.speed
+-                
+-            elif action == 3:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.speed, self.player.nearestRow, self.player.nearestCol):
+-                    self.player.velX = 0
+-                    self.player.velY = -self.player.speed
+-            # Game logic
+-            
+-            score = self.game.score
+-            self.game.modeTimer += 1
+-            self.player.Move(self.game, self.level, self.ghosts, self.fruit, self.tileID)
+-            for ghost in self.ghosts.values():
+-                ghost.Move(self.level, self.tileID)
+-           
+-            new_score = self.game.score
+-            reward = new_score - score  # Reward for eating pellets
+-            #reward = eaten_pellets * 10  # Reward for eating pellets
+-
+-        elif self.game.mode == 2:
+-                reward = -100
+-                self.game.modeTimer += 1
+-        
+-                if self.game.modeTimer == 90:
+-                    self.level.Restart(self.tileID)
+-                #self.level.Restart(self.tileID)
+-                self.game.lives -= 1
+-                if self.game.lives == -1:
+-                    done = True
+-            
+-        elif self.game.mode == 5:
+-            reward = 100
+-            self.game.mode = 1
+-        
+-        elif self.game.mode == 6:
+-            reward = 1000
+-            done = True
+-
+-
+-        info = self.get_graph_data()  # Additional data, not used now but required by Gym's API
+-
+-            # Get observation
+-        observation = self._get_observation()
+-
+-        return observation, reward, done, info
+-
+-      # Return initial state
+-    def _get_observation(self):
+-        # You can also choose to return other representations of the game state
+-        frame = pygame.surfarray.array3d(pygame.display.get_surface())
+-        frame = frame.transpose((1, 0, 2))  # Correct the shape to (height, width, channels)
+-        # Update frame buffer
+-        self.frame_buffer = np.roll(self.frame_buffer, -3, axis=2)
+-        self.frame_buffer[:, :, -3:] = frame
+-        return self.frame_buffer
+-
+-    
+-    def get_graph_data(self):
+-        # Initialize a NetworkX graph
+-        graph = nx.Graph()
+-
+-        # Define object features and add nodes
+-        pacman_features = [self.player.x, self.player.y, self.player.velX, self.player.velY, 1, 0, 0, 0]
+-        graph.add_node("pacman", type="object", features=pacman_features)
+-
+-        ghost_features = [[ghost.x, ghost.y, ghost.velX, ghost.velY,0,1,0,0] for ghost in self.ghosts.values()]
+-        for i, features in enumerate(ghost_features):
+-            graph.add_node(f"ghost_{i}", type="object", features=features)
+-
+-        pellet_features = [[pellet[0], pellet[1],0,0,0,0,1,0] for pellet in self.level.GetPelletLocations()]
+-        for i, features in enumerate(pellet_features):
+-            graph.add_node(f"pellet_{i}", type="object", features=features)
+-
+-        power_pellet_features = [[pellet[0], pellet[1],0,0,0,0,0,1] for pellet in self.level.GetPowerPelletLocations()]
+-        for i, features in enumerate(power_pellet_features):
+-            graph.add_node(f"power_pellet_{i}", type="object", features=features)
+-
+-        # Combine object positions
+-        object_positions = {
+-            "pacman": pacman_features[:2],
+-        }
+-        for i, ghost in enumerate(self.ghosts.values()):
+-            object_positions[f"ghost_{i}"] = ghost_features[i][:2]
+-        for i, pellet in enumerate(self.level.GetPelletLocations()):
+-            object_positions[f"pellet_{i}"] = pellet_features[i][:2]
+-        for i, power_pellet in enumerate(self.level.GetPowerPelletLocations()):
+-            object_positions[f"power_pellet_{i}"] = power_pellet_features[i][:2]
+-
+-        # Proximity threshold for creating atoms
+-        #proximity_threshold = self.proximity_threshold
+-
+-        # Create atom nodes and edges based on proximity
+-        atom_index = len(object_positions)  # Start indexing atoms after all objects
+-
+-        # Determine wall proximity around Pac-Man
+-        walls = {
+-            'up': self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.velY, self.player.y - 1, self.player.x),
+-            'down': self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.velY, self.player.y + 1, self.player.x),
+-            'left': self.level.CheckIfHitWall(self.player.x - self.player.velX, self.player.y, self.player.y, self.player.x - 1),
+-            'right': self.level.CheckIfHitWall(self.player.x + self.player.velX, self.player.y, self.player.y, self.player.x + 1)
+-        }
+-
+-        standard_feature_vector_size = len(pacman_features)
+-        empty_feature_vector = [0] *(2* standard_feature_vector_size)
+-
+-        # Add wall direction atoms and edges for Pac-Man
+-        for direction, hit in walls.items():
+-            if hit:
+-                atom_node = f"Wall{direction.capitalize()}_{atom_index}"
+-                graph.add_node(atom_node, type="atom", features=empty_feature_vector, predicate=f"Wall{direction.capitalize()}")
+-                graph.add_edge("pacman", atom_node, position=0)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for ghosts
+-        for i, ghost_pos in enumerate(ghost_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(ghost_pos[:2]))
+-            direction = np.array(pacman_features[:2]) - np.array(ghost_pos[:2])
+-            
+-            atom_node_distance = f"Distance_Pacman_Ghost_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"ghost_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-            if pacman_features[0] == ghost_pos[0]:
+-                atom_node_same_row = f"SameRow_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_row, features=empty_feature_vector,type="atom", predicate="SameRow")
+-                graph.add_edge("pacman", atom_node_same_row, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_row, position=1)
+-                atom_index += 1
+-
+-            if pacman_features[1] == ghost_pos[1]:
+-                atom_node_same_column = f"SameColumn_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_column, features=empty_feature_vector, type="atom", predicate="SameColumn")
+-                graph.add_edge("pacman", atom_node_same_column, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_column, position=1)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for pellets
+-        for i, pellet_pos in enumerate(pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_Pellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance, features=empty_feature_vector,type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Add distance and direction atoms and edges for power pellets
+-        for i, power_pellet_pos in enumerate(power_pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(power_pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_PowerPellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"power_pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Create a GraphConverter object
+-        converter = GraphConverter()
+-
+-        # Convert the NetworkX graph to a PyG Data object
+-        data = converter.to_pyg_data(graph)
+-        return data
+-    
+-
+-    
+-    def render(self, mode='human'):
+-        self.screen.blit(self.img_Background, (0, 0))
+-        self.level.DrawMap(self.tileID, self.tileIDImage)
+-        
+-        if self.game.fruitScoreTimer > 0:
+-            if self.game.modeTimer % 2 == 0:
+-                self.game.DrawNumber (2500, self.fruit.x - self.game.screenPixelPos[0] - 16, self.fruit.y - self.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            self.ghosts[i].Draw(self.game,self.tileID, self.tileIDImage, self.ghosts)
+-        self.fruit.Draw(self.game)
+-        self.player.Draw(self.game)
+-        if mode == 'human':
+-            
+-            pygame.display.flip()
+-        elif mode == 'rgb_array':
+-            return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def close(self):
+-        pygame.quit()
+-
+-# Usage Example
+-if __name__ == "__main__":
+-    env = PacmanEnv()
+-    obs = env.reset()
+-    done = False
+-
+-    while not done:
+-        #env.render()  # Ensure the environment is rendered every loop
+-        action = env.action_space.sample()
+-        
+-        obs, reward, done, info = env.step(action)
+-        if reward<0:
+-            print("Ghost collision")
+-        #print(f"Action: {action}, Reward: {reward}")
+-        #time.sleep(0.1)  # Add a delay to make changes observable
+-
+-        if done:
+-            print("Game Over. Restarting...")
+-            obs = env.reset()
+-            done = False
+-            time.sleep(2)  # Pause before restarting
+-
+-    env.close()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_new.py b/games/pacman/pacman_new.py
+deleted file mode 100644
+index 1baea23..0000000
+--- a/games/pacman/pacman_new.py
++++ /dev/null
+@@ -1,1583 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self):
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 3 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                snd_extralife.play()
+-                thisGame.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (thisFruit.imFruit[ thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self):
+-            
+-        possibleScreenX = player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        thisGame.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-        
+-        player.velX = 0
+-        player.velY = 0
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    def draw (self):
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-            
+-                thisTile = self.GetType((row, col))
+-                screen.blit (tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+-class ghost ():
+-    def __init__ (self, ghostID):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if player.x > self.x and player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif player.x < self.x and player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif player.x > self.x and player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif player.x < self.x and player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay()
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                self.FollowNextPathWay()
+-            
+-    def FollowNextPathWay (self):
+-        
+-        # print "Ghost " + str(self.id) + " rem: " + self.currentPath
+-        
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-                    
+-            else:
+-                # this ghost has reached his destination!!
+-                
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                    self.FollowNextPathWay()
+-                
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-                    
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (randRow, randCol) )
+-                    self.FollowNextPathWay()
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-
+-class pacman ():
+-    
+-    def __init__ (self):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self):
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos()[0]+1, thisLevel.GetGhostBoxPos()[1]) )
+-                        ghosts[i].FollowNextPathWay()
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos()
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+-class level ():
+-    
+-    def __init__ (self):
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > thisLevel.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > thisLevel.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = thisLevel.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = thisLevel.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_pellet[player.pelletSndNum].play()
+-                        player.pelletSndNum = 1 - player.pelletSndNum
+-                        
+-                        thisLevel.pellets -= 1
+-                        
+-                        thisGame.AddToScore(10)
+-                        
+-                        if thisLevel.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_powerpellet.play()
+-                        
+-                        thisGame.AddToScore(100)
+-                        thisGame.ghostValue = 200
+-                        
+-                        thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if ghosts[i].state == 1:
+-                                ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    player.x = i * 16
+-                                    
+-                                    if player.velX > 0:
+-                                        player.x += 16
+-                                    else:
+-                                        player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    player.y = i * 16
+-                                    
+-                                    if player.velY > 0:
+-                                        player.y += 16
+-                                    else:
+-                                        player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if thisLevel.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if thisLevel.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = thisGame.screenNearestTilePos[0] + row
+-                actualCol = thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        screen.blit (thisGame.imLogo, (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                            screen.blit(thisGame.imHiscores,(col*16-thisGame.screenPixelOffset[0],row*16-thisGame.screenPixelOffset[1]))
+-                    
+-                    else:
+-                        screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-        
+-    def LoadLevel (self, levelNum):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            player.homeX = k * 16
+-                            player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the ghosts
+-                            
+-                            ghosts[thisID - 10].homeX = k * 16
+-                            ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        GetCrossRef()
+-
+-        # load map into the pathfinder object
+-        path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, path.size[0], 1):
+-            for col in range(0, path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    path.SetType( row, col, 1 )
+-                else:
+-                    path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart()
+-        
+-    def Restart (self):
+-        
+-        for i in range(0, 4, 1):
+-            # move ghosts back to home
+-
+-            ghosts[i].x = ghosts[i].homeX
+-            ghosts[i].y = ghosts[i].homeY
+-            ghosts[i].velX = 0
+-            ghosts[i].velY = 0
+-            ghosts[i].state = 1
+-            ghosts[i].speed = 1
+-            ghosts[i].Move()
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (randRow, randCol) )
+-            ghosts[i].FollowNextPathWay()
+-            
+-        thisFruit.active = False
+-            
+-        thisGame.fruitTimer = 0
+-
+-        player.x = player.homeX
+-        player.y = player.homeY
+-        player.velX = 0
+-        player.velY = 0
+-        
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        player.animFrame = 3
+-
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 3:
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame()
+-            
+-
+-    
+-#      _____________________________________________
+-# ___/  function: Get ID-Tilename Cross References  \______________________________________ 
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-
+-# create the pacman
+-player = pacman()
+-
+-# create a path_finder object
+-path = path_finder()
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i)
+-    
+-# create piece of fruit
+-thisFruit = fruit()
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-# create game and level objects and load first level
+-thisGame = game()
+-thisLevel = level()
+-thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move()
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move()
+-        thisFruit.Move()
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisLevel.Restart()
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen()
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap()
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw()
+-        thisFruit.Draw()
+-        player.Draw()
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+\ No newline at end of file
+diff --git a/games/pacman/pacman_old.py b/games/pacman/pacman_old.py
+deleted file mode 100644
+index fc711fe..0000000
+--- a/games/pacman/pacman_old.py
++++ /dev/null
+@@ -1,970 +0,0 @@
+-import pygame
+-import random
+-import numpy as np
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-
+-
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    
+-        
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-
+-
+-class Ghost(Player):
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor Function
+-        """
+-        super().__init__(x, y, filename)
+-        self.ghost_eating = False 
+-        self.goal = None
+-    """
+-    Class to handle ghosts
+-    """
+-    def flee_or_chase(self, player):
+-        """
+-        Determine if the ghost should flee from or chase the player
+-        :param player: the player character, Pacman
+-        """
+-        if player.ghost_eating:
+-            self.run_away_from_pacman(player)
+-        else:
+-            self.chase_pacman(player)
+-
+-    def run_away_from_pacman(self, player):
+-        """
+-        Set direction away from Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost moves in the opposite direction of Pacman
+-        self.change_x = -5 if dx > 0 else 5
+-        self.change_y = -5 if dy > 0 else 5
+-
+-    def chase_pacman(self, player):
+-        """
+-        Set direction towards Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost reduces the distance to Pacman
+-        self.change_x = 5 if dx > 0 else -5
+-        self.change_y = 5 if dy > 0 else -5
+-
+-    def ghost_change_speed(self, direction_list, ghost, turn, steps, l):
+-        """
+-        Change the speed of the ghost
+-        :param direction_list: 
+-        :type direction_list: 
+-        :param ghost: 
+-        :type ghost: 
+-        :param turn: 
+-        :type turn: 
+-        :param steps: 
+-        :type steps: 
+-        :param l: 
+-        :type l: 
+-        :return: 
+-        :rtype: 
+-        """
+-        try:
+-            z = direction_list[turn][2]
+-            if steps < z:
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps += 1
+-            else:
+-                if turn < l:
+-                    turn += 1
+-                elif ghost == 'ghost_four':
+-                    turn = 2
+-                else:
+-                    turn = 0
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps = 0
+-            return [turn, steps]
+-        except IndexError:
+-            return [0, 0]
+-
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-        self.ghost_one_directions = [
+-            [0, -30, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [-15, 0, 23],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 19],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 7],
+-            [0, 15, 3],
+-            [-15, 0, 19],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.ghost_two_directions = [
+-            [0, -15, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, -15, 15],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 7],
+-            [0, -15, 3],
+-            [15, 0, 15],
+-            [0, 15, 15],
+-            [-15, 0, 3],
+-            [0, 15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 5],
+-        ]
+-
+-        self.ghost_three_directions = [
+-            [30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 10],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 15],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, 15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [-15, 0, 11],
+-            [0, 15, 7],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 15],
+-            [15, 0, 15],
+-            [0, 15, 3],
+-            [-15, 0, 15],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 1],
+-        ]
+-
+-        self.ghost_four_directions = [
+-            [-30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 5],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 7],
+-            [0, 15, 15],
+-            [15, 0, 15],
+-            [0, -15, 3],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-        pl = len(self.ghost_one_directions) - 1
+-        bl = len(self.ghost_two_directions) - 1
+-        il = len(self.ghost_three_directions) - 1
+-        cl = len(self.ghost_four_directions) - 1
+-
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        block_list = pygame.sprite.RenderPlain()
+-        ghost_list = pygame.sprite.RenderPlain()
+-        pacman_collide = pygame.sprite.RenderPlain()
+-        wall_list = self.setup_walls()
+-
+-        gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(pacman)
+-        pacman_collide.add(pacman)
+-
+-        ghost_two = Ghost(w, b_h, 'images/red.png')
+-        ghost_list.add(ghost_two)
+-        self.all_sprites_list.add(ghost_two)
+-
+-        ghost_one = Ghost(w, m_h, 'images/pink.png')
+-        ghost_list.add(ghost_one)
+-        self.all_sprites_list.add(ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png')
+-        ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png')
+-        ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, pacman_collide, False)
+-                    if b_collide:
+-                        continue
+-                    elif p_collide:
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # Randomly select four blocks
+-        blocks = list(block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        bll = len(block_list)
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, -30)
+-
+-            pacman.update(wall_list, gate)
+-            returned = ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            p_turn = returned[0]
+-            p_steps = returned[1]
+-            ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            ghost_one.update(wall_list, False)
+-
+-            returned = ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            b_turn = returned[0]
+-            b_steps = returned[1]
+-            ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            ghost_two.update(wall_list, False)
+-
+-            returned = ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            i_turn = returned[0]
+-            i_steps = returned[1]
+-            ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            ghost_three.update(wall_list, False)
+-
+-            returned = ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            c_turn = returned[0]
+-            c_steps = returned[1]
+-            ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            ghost_four.update(wall_list, False)
+-
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(pacman, block_list, True) 
+-            # check if pacman hits any power pellet
+-            pellet_hit_list = pygame.sprite.spritecollide(pacman, self.power_pellets,True)
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            wall_list.draw(self.screen)
+-            gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(pacman, ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_test.py b/games/pacman/pacman_test.py
+deleted file mode 100644
+index dab7b16..0000000
+--- a/games/pacman/pacman_test.py
++++ /dev/null
+@@ -1,366 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-from player import pacman
+-from ghost import ghost
+-from path import path_finder
+-from level import level
+-from game import game
+-from fruit import fruit
+-from config import *
+-
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 4 :
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame(thisLevel, tileID, tileIDImage, tileIDName)
+-            
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-    
+-#      _____________________________
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-# create a path_finder object
+-
+-f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-# ANDY -- edit
+-#fileOutput = f.read()
+-#str_splitByLine = fileOutput.split('\n')
+-
+-lineNum = 0
+-useLine = False
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-
+-path = path_finder()
+-
+-# create pacman object
+-player = pacman(path, screen)
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i, path, screen, player)
+-    
+-# create piece of fruit
+-thisFruit = fruit() 
+-
+-
+-
+-
+-
+-# create game and level objects and load first level
+-thisGame = game(thisFruit, player, screen)
+-thisLevel = level( thisGame, player, ghosts, path, thisFruit, screen)
+-for i in f.readlines():
+-    # print " ========= Line " + str(lineNum) + " ============ "
+-    while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-    while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-    str_splitBySpace = i.split(' ')
+-    
+-    j = str_splitBySpace[0]
+-        
+-    if (j == "'" or j == "" or j == "#"):
+-        # comment / whitespace line
+-        # print " ignoring comment line.. "
+-        useLine = False
+-    else:
+-        # print str(wordNum) + ". " + j
+-        useLine = True
+-    
+-    if useLine == True:
+-        tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-        tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-        
+-        thisID = int(str_splitBySpace[0])
+-        if not thisID in NO_GIF_TILES:
+-            tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-        else:
+-                tileIDImage[ thisID ] = pygame.Surface((16,16))
+-        
+-        # change colors in tileIDImage to match maze colors
+-        for y in range(0, 16, 1):
+-            for x in range(0, 16, 1):
+-            
+-                if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                    # wall edge
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                    # wall fill
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-            
+-        # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-    lineNum += 1
+-thisLevel.LoadLevel( thisGame.GetLevelNum(), tileID, tileIDImage, tileIDName )
+-thisGame.StartNewGame( thisLevel, tileID, tileIDImage, tileIDName )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-print(tileID)
+-
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move(thisGame, thisLevel, ghosts, thisFruit, tileID)
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move(thisLevel, tileID)
+-        thisFruit.Move(thisGame)
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            # close the game
+-            #pygame.quit()
+-            thisLevel.Restart(tileID)
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        print("Game Over")
+-        running = False
+-        #pygame.quit()
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        print("Waiting to start")
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen(thisLevel)
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap(tileID, tileIDImage)
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw(thisGame, tileID, tileIDImage, ghosts)
+-        thisFruit.Draw(thisGame)
+-        player.Draw(thisGame)
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+-
+diff --git a/games/pacman/path.py b/games/pacman/path.py
+deleted file mode 100644
+index bd3d8a6..0000000
+--- a/games/pacman/path.py
++++ /dev/null
+@@ -1,238 +0,0 @@
+-from games.pacman.config import *
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self,):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    # def draw (self):
+-    #     for row in range(0, self.size[0], 1):
+-    #         for col in range(0, self.size[1], 1):
+-            
+-    #             thisTile = self.GetType((row, col))
+-    #             screen.blit (self.tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+\ No newline at end of file
+diff --git a/games/pacman/player.py b/games/pacman/player.py
+deleted file mode 100644
+index 6ddd81e..0000000
+--- a/games/pacman/player.py
++++ /dev/null
+@@ -1,153 +0,0 @@
+-import pygame 
+-import os
+-from games.pacman.config import SCRIPT_PATH
+-class pacman ():
+-    
+-    def __init__ (self, path, screen):
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self, thisGame, thisLevel, ghosts, thisFruit, tileID):   
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol, tileID)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        #snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = self.path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos(tileID)[0]+1, thisLevel.GetGhostBoxPos(tileID)[1]) )
+-                        ghosts[i].FollowNextPathWay(thisLevel, tileID)
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    #snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos(tileID)
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = self.path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        self.screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+\ No newline at end of file
+diff --git a/games/pacman/res/VeraMoBd.ttf b/games/pacman/res/VeraMoBd.ttf
+deleted file mode 100644
+index 9be6547..0000000
+Binary files a/games/pacman/res/VeraMoBd.ttf and /dev/null differ
+diff --git a/games/pacman/res/backgrounds/1.gif b/games/pacman/res/backgrounds/1.gif
+deleted file mode 100644
+index fddeb90..0000000
+Binary files a/games/pacman/res/backgrounds/1.gif and /dev/null differ
+diff --git a/games/pacman/res/crossref.txt b/games/pacman/res/crossref.txt
+deleted file mode 100644
+index bfb3780..0000000
+--- a/games/pacman/res/crossref.txt
++++ /dev/null
+@@ -1,68 +0,0 @@
+-'    ____                  ____             ____
+-'   / __/_ _____  ___ ____/ __/__________  / / /
+-'  _\ \/ // / _ \/ -_) __/\ \/ __/ __/ _ \/ / / 
+-' /___/\_,_/ .__/\__/_/ /___/\__/_/  \___/_/_/  
+-'         /_/                  game engine
+-'
+-' Cross-reference for tiles and sprites.
+-'
+-' Syntax for each line is:
+-'      [number] [tilename] [tile description]
+-' Ex.  5130 wirecornerul upper-left corner of wire path
+-'
+-' Tile numbers may go from 1-32767. (Tile 0 is empty space.)
+-' Tiles 9000-9999 are invisible during gameplay.
+-'
+-' Commands:
+-'      # tiles              < tile declarations start here
+-'      # sprites            < sprite descriptions start here
+-' __________________________________________________________
+-
+-
+-# tiles
+-
+-1 ghost-door wall of the ghost box
+-2 pellet a normal pellet (required)
+-3 pellet-power a power pellet (makes pac-man invincible)
+-4 start the starting position for pac-man
+-
+-10 ghost-blinky blinky
+-11 ghost-pinky pinky
+-12 ghost-inky inky
+-13 ghost-sue sue
+-
+-20 door-h horizontal door (flip to other side of maze)
+-21 door-v vertical door (flip to other side of maze)
+-22 showlogo causes the logo to be drawn
+-23 hiscores generate and draw a hi-score list
+-
+-100 wall-straight-horiz a horizontal wall
+-101 wall-straight-vert a vertical wall
+-
+-105 wall-corner-ll lower-left corner of a wall
+-106 wall-corner-lr lower-right corner of a wall
+-107 wall-corner-ul upper-left corner of a wall
+-108 wall-corner-ur upper-right corner of a wall
+-
+-110 wall-end-b bottom end of a wall
+-111 wall-end-l left end of a wall
+-112 wall-end-r right end of a wall
+-113 wall-end-t top end of a wall
+-
+-120 wall-nub a one-tile "nub" wall
+-
+-130 wall-t-bottom a "T"-shaped wall, bottom-orientation
+-131 wall-t-left a "T"-shaped wall, left-orientation
+-132 wall-t-right a "T"-shaped wall, right-orientation
+-133 wall-t-top a "T"-shaped wall, top-orientation
+-
+-140 wall-x a four-way wall
+-
+-300 glasses ghost glasses
+-
+-500 x-paintwall use this tile to paint walls automatically
+-
+-
+-
+-# sprites
+-
+diff --git a/games/pacman/res/hiscore.txt b/games/pacman/res/hiscore.txt
+deleted file mode 100644
+index 48bdfbf..0000000
+--- a/games/pacman/res/hiscore.txt
++++ /dev/null
+@@ -1,6 +0,0 @@
+-135260 David
+-100000 David
+-80000 Andy
+-60000 Count Pacula
+-40000 Cleopacra
+-24790 User
+diff --git a/games/pacman/res/levels/0.txt b/games/pacman/res/levels/0.txt
+deleted file mode 100644
+index cd90d89..0000000
+--- a/games/pacman/res/levels/0.txt
++++ /dev/null
+@@ -1,48 +0,0 @@
+-# lvlwidth 35
+-# lvlheight 35
+-# bgcolor 0 0 0
+-# edgelightcolor 0 0 255
+-# edgeshadowcolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 107 100 100 100 100 100 100 100 108 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 100 100 100 100 100 100 106 2 0 0 0 0 0 2 105 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-20 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 4 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 20 
+-120 0 111 100 100 100 100 100 100 100 100 100 100 108 2 0 0 0 0 0 2 107 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 100 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 107 112 1 111 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 101 11 12 13 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/1.txt b/games/pacman/res/levels/1.txt
+deleted file mode 100644
+index f6a84e6..0000000
+--- a/games/pacman/res/levels/1.txt
++++ /dev/null
+@@ -1,37 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgecolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 3 120 2 113 2 111 100 108 2 107 100 112 2 113 2 120 3 101 0 
+-0 101 2 2 2 101 2 2 2 101 2 101 2 2 2 101 2 2 2 101 0 
+-0 101 2 111 100 106 2 113 2 110 2 110 2 113 2 105 100 112 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 120 2 111 100 130 100 112 2 111 100 130 100 112 2 120 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 113 2 111 100 100 100 100 100 112 2 113 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 0 0 10 0 0 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 105 112 2 107 112 1 111 108 2 111 106 2 105 100 100 112 
+-20 0 0 0 2 0 0 2 101 11 12 13 101 2 0 0 2 0 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 0 0 2 0 0 0 0 0 2 0 0 2 2 2 101 0 
+-0 101 2 120 2 107 112 2 111 100 100 100 112 2 111 108 2 120 2 101 0 
+-0 101 2 2 2 101 2 2 0 0 4 0 0 2 2 101 2 2 2 101 0 
+-0 105 133 112 2 110 2 111 100 100 133 100 100 112 2 110 2 111 133 106 0 
+-0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 0 0 
+-0 0 101 2 111 112 2 111 108 2 101 2 107 112 2 111 112 2 101 0 0 
+-107 100 106 2 2 2 2 2 101 2 101 2 101 2 2 2 2 2 105 100 108 
+-101 2 2 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 2 2 101 
+-101 3 120 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 120 3 101 
+-101 2 2 2 107 100 100 100 100 108 0 107 100 100 100 100 108 2 2 2 101 
+-105 100 100 100 106 0 0 0 0 110 21 110 0 0 0 0 105 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/10.txt b/games/pacman/res/levels/10.txt
+deleted file mode 100644
+index e254045..0000000
+--- a/games/pacman/res/levels/10.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 128 0 64
+-# fillcolor 215 0 107
+-# pelletcolor 0 255 0
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 120 2 111 100 108 2 111 100 112 2 107 100 112 2 120 3 105 112 
+-20 0 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 0 20 
+-111 100 100 112 2 120 2 110 2 113 2 113 2 110 2 120 2 111 100 100 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-111 108 0 120 2 113 2 111 100 106 2 105 100 112 2 113 2 120 0 107 112 
+-0 101 2 2 2 101 2 0 0 0 10 0 0 0 2 101 2 2 2 101 0 
+-0 101 2 111 100 130 112 2 107 112 1 111 108 2 111 130 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 2 101 0 
+-0 101 2 111 133 100 112 2 105 100 100 100 106 2 111 100 133 112 2 101 0 
+-0 101 2 2 101 2 2 2 0 0 0 0 0 2 2 2 101 2 2 101 0 
+-0 131 112 2 110 2 107 100 112 0 113 0 111 100 108 2 110 2 111 132 0 
+-0 101 2 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 2 101 0 
+-111 106 2 120 0 111 106 2 120 2 101 2 120 2 105 112 0 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 20 
+-111 100 100 112 2 111 108 2 111 100 130 100 112 2 107 112 2 111 100 100 112 
+-20 0 2 2 2 2 101 2 2 2 4 2 2 2 101 2 2 2 2 0 20 
+-111 108 3 111 112 2 105 100 112 2 120 2 111 100 106 2 111 112 3 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/11.txt b/games/pacman/res/levels/11.txt
+deleted file mode 100644
+index c546ac7..0000000
+--- a/games/pacman/res/levels/11.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 203 211 44
+-# edgeshadowcolor 0 64 0
+-# fillcolor 0 0 0
+-# pelletcolor 255 0 0
+-# fruittype 1
+-
+-# startleveldata
+-113 21 107 100 100 100 100 100 100 100 133 100 100 100 100 100 100 100 108 21 113 
+-101 0 110 0 0 2 2 2 2 2 110 2 2 2 2 2 0 0 110 0 101 
+-101 0 0 0 113 2 113 2 113 2 2 2 113 2 113 2 113 0 0 0 101 
+-131 100 100 100 106 3 110 2 110 2 113 2 110 2 110 3 105 100 100 100 132 
+-101 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 100 112 2 113 0 111 100 140 100 112 0 113 2 111 100 108 2 101 
+-101 2 101 2 2 2 101 0 0 0 101 0 0 0 101 2 2 2 101 2 101 
+-101 2 110 2 111 100 130 100 112 0 110 0 111 100 130 100 112 2 110 2 101 
+-101 2 2 2 0 0 0 0 0 0 10 0 0 0 0 0 0 2 2 2 101 
+-101 2 111 100 100 100 108 0 107 112 1 111 108 0 107 100 100 100 112 2 101 
+-101 2 2 2 2 2 110 0 101 11 12 13 101 0 110 2 2 2 2 2 101 
+-105 100 100 100 112 2 2 2 131 100 100 100 132 2 2 2 111 100 100 100 106 
+-20 0 0 0 0 0 113 2 110 0 0 0 110 2 113 0 0 0 0 0 20 
+-107 100 100 100 100 100 106 2 0 0 113 0 0 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 111 100 140 100 112 2 2 2 2 2 2 2 101 
+-101 2 113 2 107 100 108 0 0 0 101 0 0 0 107 100 108 2 113 2 101 
+-101 2 101 2 110 0 105 100 112 0 110 0 111 100 106 0 110 2 101 2 101 
+-101 2 101 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 101 2 101 
+-101 2 110 2 120 2 111 100 108 2 113 2 107 100 112 2 120 2 110 2 101 
+-101 2 2 2 3 2 2 2 101 2 101 2 101 2 2 2 3 2 2 2 101 
+-101 0 113 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 113 0 101 
+-101 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 101 
+-110 21 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/12.txt b/games/pacman/res/levels/12.txt
+deleted file mode 100644
+index 137aad1..0000000
+--- a/games/pacman/res/levels/12.txt
++++ /dev/null
+@@ -1,40 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 27
+-# bgcolor 0 0 0
+-# edgelightcolor 52 61 139
+-# edgeshadowcolor 35 41 95
+-# fillcolor 0 0 0
+-# pelletcolor 238 183 128
+-# fruittype 3
+-
+-# startleveldata
+-111 112 21 111 100 100 100 100 100 100 100 100 100 100 100 100 100 112 21 111 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 107 100 100 100 100 100 100 100 100 100 100 100 100 100 108 2 107 112 
+-0 101 2 101 22 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-0 101 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-111 106 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 105 112 
+-20 0 2 105 100 100 133 100 100 100 133 100 100 100 133 100 100 106 2 0 20 
+-111 108 2 2 2 2 110 2 2 2 110 2 2 2 110 2 2 2 2 107 112 
+-0 101 2 111 108 2 2 2 113 0 10 0 113 2 2 2 107 112 2 101 0 
+-0 101 2 2 110 0 120 0 131 112 1 111 132 0 120 0 110 2 2 101 0 
+-0 131 108 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 107 132 0 
+-111 130 106 2 111 100 112 2 105 100 100 100 106 2 111 100 112 2 105 130 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 113 2 120 2 113 2 120 0 120 2 113 2 120 2 113 2 107 112 
+-0 101 2 101 2 2 2 101 2 2 4 2 2 101 2 2 2 101 2 101 0 
+-0 101 2 110 2 111 100 130 100 112 0 111 100 130 100 112 2 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 2 120 3 120 2 120 2 113 2 113 2 120 2 120 3 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 2 0 20 
+-111 108 2 111 100 112 2 111 100 106 2 105 100 112 2 111 100 112 2 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 100 133 100 100 100 100 100 100 108 0 0 0 
+-0 107 100 106 2 2 2 2 2 2 110 2 2 2 2 2 2 105 100 108 0 
+-0 101 2 2 2 107 100 100 108 2 2 2 107 100 100 108 2 2 2 101 0 
+-0 110 21 111 100 106 0 0 105 100 100 100 106 0 0 105 100 112 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/2.txt b/games/pacman/res/levels/2.txt
+deleted file mode 100644
+index b65a9eb..0000000
+--- a/games/pacman/res/levels/2.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 33
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 85 0 170
+-# fillcolor 128 0 255
+-# pelletcolor 255 255 255
+-# fruittype 2
+-
+-# startleveldata
+-0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 
+-0 101 0 105 100 100 100 100 100 100 133 100 100 100 100 106 0 105 100 100 100 100 133 100 100 100 100 100 100 106 0 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 111 112 2 113 2 113 2 110 2 111 100 100 100 133 100 100 100 112 2 110 2 113 2 113 2 111 112 3 105 112 
+-20 0 2 2 2 2 101 2 101 0 0 2 2 2 2 2 101 2 2 2 2 2 0 0 101 2 101 2 2 2 2 0 20 
+-111 108 0 111 100 100 106 2 105 100 112 2 111 100 108 0 101 0 107 100 112 2 111 100 106 2 105 100 100 112 0 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 0 0 110 0 110 0 110 0 0 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 131 100 100 112 2 111 100 108 2 107 100 112 0 0 0 10 0 0 0 111 100 108 2 107 100 112 2 111 100 100 132 0 
+-0 101 2 2 2 2 2 2 110 2 110 0 0 0 107 112 1 111 108 0 0 0 110 2 110 2 2 2 2 2 2 101 0 
+-0 101 2 120 0 111 112 2 2 2 2 2 113 0 101 11 12 13 101 0 113 2 2 2 2 2 111 112 0 120 2 101 0 
+-0 101 2 2 2 2 2 2 120 0 111 100 132 2 105 100 100 100 106 2 131 100 112 0 120 2 2 2 2 2 2 101 0 
+-0 101 2 111 100 100 112 2 2 2 3 2 110 2 2 2 2 2 2 2 110 2 3 2 2 2 111 100 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 113 0 113 2 2 2 113 2 113 2 113 2 2 2 113 0 113 2 2 2 2 2 2 101 0 
+-0 101 2 111 112 0 120 2 110 0 110 2 111 100 106 2 110 2 105 100 112 2 110 0 110 2 120 0 111 112 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 107 112 0 111 100 100 100 112 0 111 100 133 100 112 0 111 100 100 100 112 0 111 108 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 101 2 113 2 111 133 100 100 100 108 2 110 2 107 100 100 100 133 112 2 113 2 101 2 105 100 100 112 
+-20 0 0 0 2 101 2 101 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 101 2 101 2 0 0 0 20 
+-111 108 0 120 3 110 2 105 112 2 110 2 113 2 110 2 120 2 110 2 113 2 110 2 111 106 2 110 3 120 0 107 112 
+-0 101 0 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 0 101 0 
+-0 101 0 107 100 100 100 100 100 100 100 100 130 100 100 108 0 107 100 100 130 100 100 100 100 100 100 100 100 108 0 101 0 
+-0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/3.txt b/games/pacman/res/levels/3.txt
+deleted file mode 100644
+index e72d1c4..0000000
+--- a/games/pacman/res/levels/3.txt
++++ /dev/null
+@@ -1,38 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgelightcolor 251 233 130
+-# edgeshadowcolor 124 70 16
+-# fillcolor 225 151 51
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 108 0 101 0 101 0 107 100 100 100 100 100 100 112 
+-20 0 3 2 2 2 2 101 0 101 0 101 0 101 2 2 2 2 3 0 20 
+-111 108 2 107 100 108 2 101 0 101 0 101 0 101 2 107 100 108 2 107 112 
+-0 101 2 101 0 101 2 105 100 106 0 105 100 106 2 101 0 101 2 101 0 
+-0 101 2 101 0 101 2 2 2 2 2 2 2 2 2 101 0 101 2 101 0 
+-0 101 2 101 0 131 133 133 133 133 133 133 133 133 133 132 0 101 2 101 0 
+-0 101 2 131 133 140 140 130 130 130 130 130 130 130 140 140 133 132 2 101 0 
+-0 101 2 105 130 130 106 2 2 2 10 2 2 2 105 130 130 106 2 101 0 
+-0 101 0 2 2 0 0 2 107 112 1 111 108 2 0 0 2 2 0 101 0 
+-0 105 100 108 2 107 108 2 101 11 12 13 101 2 107 108 2 107 100 106 0 
+-0 0 0 101 2 105 106 2 105 100 100 100 106 2 105 106 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 113 2 107 100 100 100 100 100 108 2 113 2 101 0 0 0 
+-0 0 0 101 0 101 2 110 0 0 4 0 0 110 2 101 0 101 0 0 0 
+-0 107 100 106 0 101 2 2 2 111 133 112 2 2 2 101 0 105 100 108 0 
+-0 101 2 2 2 110 2 113 2 2 101 2 2 113 2 110 2 2 2 101 0 
+-0 101 2 113 0 0 2 131 108 2 101 2 107 132 2 0 0 113 2 101 0 
+-111 106 2 105 100 108 2 105 106 2 110 2 105 106 2 107 100 106 2 105 112 
+-20 0 3 2 2 101 2 2 2 2 0 2 2 2 2 101 2 2 3 0 20 
+-111 100 100 108 2 110 2 111 100 100 133 100 100 112 2 110 2 107 100 100 112 
+-0 0 0 101 0 2 2 2 2 2 110 2 2 2 2 2 0 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 2 2 2 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 105 108 0 107 106 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/4.txt b/games/pacman/res/levels/4.txt
+deleted file mode 100644
+index 11394c2..0000000
+--- a/games/pacman/res/levels/4.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 128 255 0
+-# edgeshadowcolor 128 255 0
+-# fillcolor 0 128 0
+-# pelletcolor 0 255 255
+-# fruittype 4
+-
+-# startleveldata
+-107 100 100 100 108 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-101 3 2 2 105 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-101 2 113 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-101 2 105 133 100 108 2 111 100 108 2 107 100 112 2 107 100 108 2 101 0 
+-101 2 2 101 0 101 2 2 2 101 2 101 2 2 2 101 0 101 2 101 0 
+-105 108 2 105 100 106 2 113 2 110 2 110 2 113 2 105 100 106 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 113 2 111 100 130 100 112 2 111 100 130 100 112 2 113 2 101 0 
+-0 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 
+-0 101 2 110 2 113 2 111 100 100 100 100 100 112 2 113 2 110 2 101 0 
+-0 101 3 2 2 101 2 2 0 0 10 0 0 2 2 101 2 2 3 101 0 
+-111 130 100 112 2 105 112 2 107 112 1 111 108 2 111 106 2 111 100 130 112 
+-20 0 0 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 113 0 107 112 2 111 100 100 100 112 2 111 108 0 113 2 101 0 
+-0 101 2 101 0 101 2 2 0 0 4 0 0 2 2 101 0 101 2 101 0 
+-0 101 2 110 0 110 2 111 100 100 133 100 100 112 2 110 0 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 120 2 120 2 111 112 2 110 2 111 112 2 120 2 120 2 101 0 
+-0 101 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-0 105 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/5.txt b/games/pacman/res/levels/5.txt
+deleted file mode 100644
+index 74a735a..0000000
+--- a/games/pacman/res/levels/5.txt
++++ /dev/null
+@@ -1,78 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 65
+-# bgcolor 0 0 0
+-# edgelightcolor 255 0 128
+-# edgeshadowcolor 0 0 0
+-# fillcolor 0 0 0
+-# pelletcolor 0 0 255
+-# fruittype 4
+-
+-# startleveldata
+-113 21 113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 113 21 113 
+-101 0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 101 
+-101 0 0 0 2 2 2 2 2 0 0 0 2 2 2 2 2 0 0 0 101 
+-131 100 100 112 3 120 2 113 2 111 100 112 2 113 2 120 3 111 100 100 132 
+-101 2 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 2 101 
+-101 2 111 108 2 111 100 140 100 112 2 111 100 140 100 112 2 107 112 2 101 
+-101 2 2 101 2 2 2 101 2 2 2 2 2 101 2 2 2 101 2 2 101 
+-131 112 2 101 2 113 2 110 2 111 133 112 2 110 2 113 2 101 2 111 132 
+-101 2 2 101 2 101 2 2 2 2 101 2 2 2 2 101 2 101 2 2 101 
+-101 2 111 132 2 105 100 100 112 2 110 2 111 100 100 106 2 131 112 2 101 
+-101 2 2 101 2 2 2 2 2 2 0 2 2 2 2 2 2 101 2 2 101 
+-105 108 2 110 2 113 2 120 2 111 100 112 2 120 2 113 2 110 2 107 106 
+-0 101 2 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 2 101 0 
+-111 130 100 112 2 105 100 100 100 108 2 107 100 100 100 106 2 111 100 130 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-107 100 100 100 100 100 100 112 2 110 2 110 2 111 100 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 108 3 120 0 113 0 111 133 112 0 113 0 120 3 107 108 2 101 
+-101 2 131 132 2 0 0 101 0 0 101 0 0 101 0 0 2 131 132 2 101 
+-101 2 131 132 2 111 100 130 112 0 101 0 111 130 100 112 2 131 132 2 101 
+-101 2 131 132 2 2 2 2 2 2 101 2 2 2 2 2 2 131 132 2 101 
+-101 2 131 132 2 107 112 2 113 2 110 2 113 2 111 108 2 131 132 2 101 
+-101 2 131 132 2 110 2 2 101 2 2 2 101 2 2 110 2 131 132 2 101 
+-101 2 131 132 2 0 2 111 132 0 120 0 131 112 2 0 2 131 132 2 101 
+-101 2 131 132 2 113 2 2 101 0 0 0 101 2 2 113 2 131 132 2 101 
+-101 2 131 106 2 105 112 2 110 0 113 0 110 2 111 106 2 105 132 2 101 
+-110 2 101 0 2 2 2 2 2 2 101 2 2 2 2 2 2 0 101 2 110 
+-20 2 101 0 111 112 2 107 112 2 101 2 111 108 2 111 112 0 101 2 20 
+-113 2 101 2 2 2 2 101 2 2 101 2 2 101 2 2 2 2 101 2 113 
+-101 2 101 2 113 2 111 106 2 111 130 112 2 105 112 2 113 2 101 2 101 
+-101 2 101 2 101 2 2 2 2 0 0 0 2 2 2 2 101 2 101 2 101 
+-101 2 101 2 105 100 100 100 112 0 113 0 111 100 100 100 106 2 101 2 101 
+-101 2 101 2 2 2 2 0 0 0 101 0 0 0 2 2 2 2 101 2 101 
+-101 2 101 3 111 112 2 111 100 100 130 100 100 112 2 111 112 3 101 2 101 
+-101 2 101 2 2 2 2 2 0 0 10 0 0 2 2 2 2 2 101 2 101 
+-101 2 131 133 133 133 108 2 107 112 1 111 108 2 107 133 133 133 132 2 101 
+-101 2 105 130 130 130 106 2 101 11 12 13 101 2 105 130 130 130 106 2 101 
+-101 2 2 2 2 2 2 2 105 100 100 100 106 2 2 2 2 2 2 2 101 
+-131 133 133 133 133 133 108 0 0 0 0 0 0 0 107 133 133 133 133 133 132 
+-131 140 140 130 130 130 130 100 100 108 2 107 100 100 130 130 130 130 140 140 132 
+-105 130 132 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 131 130 106 
+-20 0 110 2 107 100 100 112 2 110 2 110 2 111 100 100 108 2 110 0 20 
+-113 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 113 
+-101 2 111 133 132 2 111 100 100 100 133 100 100 100 112 2 131 133 112 2 101 
+-101 2 2 131 132 2 2 2 2 2 101 2 2 2 2 2 131 132 2 2 101 
+-131 108 2 105 106 2 113 2 113 2 101 2 113 2 113 2 105 106 2 107 132 
+-131 132 2 2 2 2 101 2 110 2 110 2 110 2 101 2 2 2 2 131 132 
+-131 140 133 133 108 2 101 2 0 2 2 2 0 2 101 2 107 133 133 140 132 
+-131 140 140 140 132 2 101 2 107 112 2 111 108 2 101 2 131 140 140 140 132 
+-131 140 140 140 106 2 110 2 110 2 4 2 110 2 110 2 105 140 140 140 132 
+-105 130 130 106 2 2 2 2 2 2 113 2 2 2 2 2 2 105 130 130 106 
+-20 0 0 2 2 113 2 111 100 100 140 100 100 112 2 113 2 2 0 0 20 
+-113 0 113 2 107 132 2 2 2 2 110 2 2 2 2 131 108 2 113 0 113 
+-101 0 101 2 131 132 3 111 112 2 0 2 111 112 3 131 132 2 101 0 101 
+-101 0 101 2 105 132 2 0 0 2 113 2 0 0 2 131 106 2 101 0 101 
+-101 0 101 2 2 101 2 111 112 2 101 2 111 112 2 101 2 2 101 0 101 
+-101 0 131 108 2 101 2 2 2 2 101 2 2 2 2 101 2 107 132 0 101 
+-101 0 131 106 2 101 2 111 100 100 130 100 100 112 2 101 2 105 132 0 101 
+-101 0 101 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 101 0 101 
+-101 0 101 2 107 132 2 111 100 108 2 107 100 112 2 131 108 2 101 0 101 
+-101 0 101 2 131 132 2 2 2 101 2 101 2 2 2 131 132 2 101 0 101 
+-101 0 101 2 105 130 100 112 2 110 2 110 2 111 100 130 106 2 101 0 101 
+-101 0 101 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 101 0 101 
+-101 0 131 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 132 0 101 
+-110 21 105 130 130 130 130 130 130 130 130 130 130 130 130 130 130 130 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/6.txt b/games/pacman/res/levels/6.txt
+deleted file mode 100644
+index fe40285..0000000
+--- a/games/pacman/res/levels/6.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 255 255 255
+-# edgeshadowcolor 0 128 255
+-# fillcolor 129 11 168
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-107 100 100 100 133 100 100 100 100 100 100 100 100 100 100 100 133 100 100 100 108 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-101 3 120 2 110 2 113 2 111 100 100 100 112 2 113 2 110 2 120 3 101 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-131 100 112 2 120 2 105 100 100 100 133 100 100 100 106 2 120 2 111 100 132 
+-101 2 2 2 0 2 2 2 2 2 101 2 2 2 2 2 0 2 2 2 101 
+-101 2 111 100 112 2 107 100 112 2 110 2 111 100 108 2 111 100 112 2 101 
+-101 2 0 2 2 2 110 2 2 2 2 2 2 2 110 2 2 2 0 2 101 
+-105 100 108 2 120 2 0 0 111 100 100 100 112 0 0 2 120 2 107 100 106 
+-0 0 101 2 2 2 113 0 0 0 10 0 0 0 113 2 2 2 101 0 0 
+-0 0 105 100 108 2 101 0 107 112 1 111 108 0 101 2 107 100 106 0 0 
+-0 0 0 0 101 2 101 0 101 11 12 13 101 0 101 2 101 0 0 0 0 
+-111 100 100 100 106 2 110 0 105 100 100 100 106 0 110 2 105 100 100 100 112 
+-20 0 0 0 0 2 2 2 2 2 4 2 2 2 2 2 0 0 0 0 20 
+-111 100 100 100 108 2 113 2 111 100 100 100 112 2 113 2 107 100 100 100 112 
+-0 0 0 0 101 2 101 2 2 2 0 2 2 2 101 2 101 0 0 0 0 
+-0 0 107 100 106 2 131 100 112 2 113 2 111 100 132 2 105 100 108 0 0 
+-0 0 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 0 0 
+-107 100 106 2 120 2 101 2 111 100 130 100 112 2 101 2 120 2 105 100 108 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-101 3 120 2 113 2 105 100 112 2 120 2 111 100 106 2 113 2 120 3 101 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-105 100 100 100 130 100 100 100 100 100 100 100 100 100 100 100 130 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/7.txt b/games/pacman/res/levels/7.txt
+deleted file mode 100644
+index a34c0a9..0000000
+--- a/games/pacman/res/levels/7.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 255 128 128
+-# fillcolor 100 100 100
+-# pelletcolor 170 0 85
+-# fruittype 0
+-
+-# startleveldata
+-120 21 111 100 108 0 107 100 100 100 100 100 100 100 108 0 107 100 112 21 120 
+-20 2 2 2 105 100 106 2 2 2 2 2 2 2 105 100 106 2 2 2 20 
+-113 3 120 2 2 2 2 2 111 100 133 100 112 2 2 2 2 2 120 3 113 
+-101 2 2 2 107 100 108 2 2 2 101 2 2 2 107 100 108 2 2 2 101 
+-105 100 100 100 106 0 101 2 113 2 101 2 113 2 101 0 105 100 100 100 106 
+-0 0 0 0 0 0 101 2 101 2 101 2 101 2 101 0 0 0 0 0 0 
+-107 100 100 100 100 100 106 2 101 2 110 2 101 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 101 2 2 2 101 2 2 2 2 2 2 2 101 
+-101 2 113 2 113 2 111 100 130 112 0 111 130 100 112 2 113 2 113 2 101 
+-101 2 101 2 101 2 2 2 2 2 4 2 2 2 2 2 101 2 101 2 101 
+-101 2 110 2 105 100 100 112 2 113 0 113 2 111 100 100 106 2 110 2 101 
+-101 2 2 2 2 2 2 2 2 101 0 101 2 2 2 2 2 2 2 2 101 
+-105 100 108 2 107 112 2 107 100 106 0 105 100 108 2 111 108 2 107 100 106 
+-0 0 101 2 101 2 2 101 2 2 2 2 2 101 2 2 101 2 101 0 0 
+-0 0 101 2 110 2 111 106 2 111 100 112 2 105 112 2 110 2 101 0 0 
+-0 0 101 2 2 2 2 2 2 0 10 0 2 2 2 2 2 2 101 0 0 
+-0 0 105 100 108 2 120 2 107 112 1 111 108 2 120 2 107 100 106 0 0 
+-0 0 0 0 101 2 2 2 101 11 12 13 101 2 2 2 101 0 0 0 0 
+-0 0 0 0 101 2 120 2 105 100 100 100 106 2 120 2 101 0 0 0 0 
+-0 0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 0 
+-111 100 100 100 106 0 113 2 111 100 100 100 112 2 113 0 105 100 100 100 112 
+-20 0 0 0 0 0 101 2 2 2 3 2 2 2 101 0 0 0 0 0 20 
+-120 21 111 100 100 100 130 100 100 100 100 100 100 100 130 100 100 100 112 21 120 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/8.txt b/games/pacman/res/levels/8.txt
+deleted file mode 100644
+index 21d3396..0000000
+--- a/games/pacman/res/levels/8.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 0 128 192
+-# edgeshadowcolor 0 51 51
+-# fillcolor 0 0 0
+-# pelletcolor 255 128 0
+-# fruittype 2
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 113 21 113 21 113 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 106 0 110 0 105 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 107 100 106 2 113 2 120 2 111 133 112 2 120 0 113 2 105 100 108 0 
+-0 101 2 2 2 101 2 2 2 2 101 2 2 2 0 110 2 0 0 101 0 
+-0 101 2 107 100 106 0 111 112 0 110 2 111 112 2 2 2 113 0 101 0 
+-107 106 2 110 2 2 2 0 2 2 2 2 0 0 2 120 3 110 0 105 108 
+-101 2 2 2 2 113 2 113 2 113 2 111 100 108 2 0 0 10 0 0 101 
+-101 2 107 100 100 106 2 110 2 101 2 2 2 101 2 107 112 1 111 133 106 
+-101 2 110 2 2 2 2 0 2 105 100 112 2 110 2 101 11 12 13 101 0 
+-101 2 0 3 120 2 111 108 2 2 2 2 2 2 2 105 100 100 100 130 108 
+-101 2 113 2 2 2 2 105 100 108 2 107 100 112 2 2 2 2 2 2 101 
+-101 2 105 100 100 108 2 2 2 101 2 101 2 2 2 107 100 100 112 2 101 
+-101 2 0 0 0 105 100 112 2 110 2 110 2 111 100 106 2 2 2 2 101 
+-101 2 111 108 2 2 2 2 2 2 2 2 2 2 2 2 2 107 112 2 101 
+-101 2 2 110 2 111 100 112 2 120 4 111 100 112 2 120 2 110 2 2 101 
+-105 108 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 107 106 
+-0 101 2 111 112 0 107 100 112 2 113 0 111 100 108 2 111 112 2 101 0 
+-0 101 2 2 2 3 101 2 2 2 101 0 0 0 101 2 2 2 2 101 0 
+-0 105 100 108 2 111 106 2 111 100 130 100 112 0 105 112 2 107 100 106 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 0 113 0 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 110 21 110 21 110 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/9.txt b/games/pacman/res/levels/9.txt
+deleted file mode 100644
+index 3661b14..0000000
+--- a/games/pacman/res/levels/9.txt
++++ /dev/null
+@@ -1,46 +0,0 @@
+-# lvlwidth 34
+-# lvlheight 33
+-# bgcolor 0 0 0
+-# edgelightcolor 128 0 255
+-# edgeshadowcolor 64 0 64
+-# fillcolor 0 0 0
+-# pelletcolor 0 255 0
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-111 100 100 106 3 111 100 133 100 112 2 111 100 100 100 108 2 113 2 113 2 111 108 2 113 0 120 3 113 2 105 100 100 112 
+-20 0 0 0 2 2 2 101 2 2 2 2 2 2 2 101 2 101 2 101 2 2 101 2 101 0 0 0 101 2 0 0 0 20 
+-111 100 100 108 2 113 2 110 2 111 100 133 100 112 2 101 2 101 2 105 112 2 110 2 101 0 111 100 106 2 107 100 100 112 
+-0 0 0 101 2 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 101 0 0 0 0 2 101 0 0 0 
+-0 0 0 101 2 131 100 112 2 113 2 101 2 111 100 106 2 105 100 100 100 100 112 2 131 100 100 100 112 2 101 0 0 0 
+-0 0 0 101 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 2 111 100 132 2 110 2 111 100 100 100 100 100 100 100 100 112 2 101 2 111 100 108 0 101 0 0 0 
+-0 0 0 101 2 0 2 2 2 101 2 2 2 0 0 0 0 0 0 0 10 0 0 2 101 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 112 2 110 0 113 2 107 100 100 108 0 107 112 1 111 108 2 110 2 120 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 0 0 101 2 101 0 0 101 0 101 11 12 13 101 2 2 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 100 100 100 100 132 2 105 100 100 106 0 105 100 100 100 106 2 111 100 108 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 2 0 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 0 111 100 100 100 108 2 110 0 113 2 113 2 111 100 100 100 100 100 100 112 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 107 100 112 2 105 100 112 2 101 2 101 2 111 100 100 133 100 100 112 2 111 106 2 110 0 101 0 0 0 
+-0 0 0 101 2 101 0 4 2 2 2 2 2 101 2 101 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 0 107 100 100 100 112 0 110 2 110 2 111 112 2 101 2 107 100 100 100 100 100 108 2 101 0 0 0 
+-0 0 0 101 2 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 2 2 2 110 2 101 0 0 0 
+-0 0 0 101 2 111 100 106 2 113 2 113 2 120 2 113 0 111 112 2 101 2 101 0 113 2 113 2 2 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 3 101 2 101 2 2 2 101 2 2 2 2 101 2 101 0 110 3 105 100 112 2 101 0 0 0 
+-111 100 100 106 2 111 100 100 100 106 2 101 2 120 2 110 2 111 112 0 110 2 101 2 2 2 2 2 2 2 105 100 100 112 
+-20 0 0 0 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 107 108 2 107 108 2 0 0 0 20 
+-111 100 100 108 2 111 100 100 100 112 2 105 100 100 100 112 0 111 100 100 100 100 106 2 105 106 2 105 106 2 107 100 100 112 
+-0 0 0 101 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/sounds/eatfruit.wav b/games/pacman/res/sounds/eatfruit.wav
+deleted file mode 100644
+index d180209..0000000
+Binary files a/games/pacman/res/sounds/eatfruit.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/eatgh2.wav b/games/pacman/res/sounds/eatgh2.wav
+deleted file mode 100644
+index 7d8b90e..0000000
+Binary files a/games/pacman/res/sounds/eatgh2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/extralife.wav b/games/pacman/res/sounds/extralife.wav
+deleted file mode 100644
+index 2db3c19..0000000
+Binary files a/games/pacman/res/sounds/extralife.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/fruitbounce.wav b/games/pacman/res/sounds/fruitbounce.wav
+deleted file mode 100644
+index 6e17741..0000000
+Binary files a/games/pacman/res/sounds/fruitbounce.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet1.wav b/games/pacman/res/sounds/pellet1.wav
+deleted file mode 100644
+index 1d39b64..0000000
+Binary files a/games/pacman/res/sounds/pellet1.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet2.wav b/games/pacman/res/sounds/pellet2.wav
+deleted file mode 100644
+index d8363d0..0000000
+Binary files a/games/pacman/res/sounds/pellet2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/powerpellet.wav b/games/pacman/res/sounds/powerpellet.wav
+deleted file mode 100644
+index 489de59..0000000
+Binary files a/games/pacman/res/sounds/powerpellet.wav and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 0.gif b/games/pacman/res/sprite/fruit 0.gif
+deleted file mode 100644
+index 8cc3dc4..0000000
+Binary files a/games/pacman/res/sprite/fruit 0.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 1.gif b/games/pacman/res/sprite/fruit 1.gif
+deleted file mode 100644
+index 8adcf61..0000000
+Binary files a/games/pacman/res/sprite/fruit 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 2.gif b/games/pacman/res/sprite/fruit 2.gif
+deleted file mode 100644
+index bda9369..0000000
+Binary files a/games/pacman/res/sprite/fruit 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 3.gif b/games/pacman/res/sprite/fruit 3.gif
+deleted file mode 100644
+index ea8f006..0000000
+Binary files a/games/pacman/res/sprite/fruit 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 4.gif b/games/pacman/res/sprite/fruit 4.gif
+deleted file mode 100644
+index 0be5f73..0000000
+Binary files a/games/pacman/res/sprite/fruit 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 1.gif b/games/pacman/res/sprite/ghost 1.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/sprite/ghost 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 2.gif b/games/pacman/res/sprite/ghost 2.gif
+deleted file mode 100644
+index 89845aa..0000000
+Binary files a/games/pacman/res/sprite/ghost 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 3.gif b/games/pacman/res/sprite/ghost 3.gif
+deleted file mode 100644
+index 5777f39..0000000
+Binary files a/games/pacman/res/sprite/ghost 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 4.gif b/games/pacman/res/sprite/ghost 4.gif
+deleted file mode 100644
+index e95b7d7..0000000
+Binary files a/games/pacman/res/sprite/ghost 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 5.gif b/games/pacman/res/sprite/ghost 5.gif
+deleted file mode 100644
+index 9956c84..0000000
+Binary files a/games/pacman/res/sprite/ghost 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 6.gif b/games/pacman/res/sprite/ghost 6.gif
+deleted file mode 100644
+index 56533bf..0000000
+Binary files a/games/pacman/res/sprite/ghost 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 1.gif b/games/pacman/res/sprite/pacman-d 1.gif
+deleted file mode 100644
+index b3db2db..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 2.gif b/games/pacman/res/sprite/pacman-d 2.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 3.gif b/games/pacman/res/sprite/pacman-d 3.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 4.gif b/games/pacman/res/sprite/pacman-d 4.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 5.gif b/games/pacman/res/sprite/pacman-d 5.gif
+deleted file mode 100644
+index 5fa29e9..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 6.gif b/games/pacman/res/sprite/pacman-d 6.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 7.gif b/games/pacman/res/sprite/pacman-d 7.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 8.gif b/games/pacman/res/sprite/pacman-d 8.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 1.gif b/games/pacman/res/sprite/pacman-l 1.gif
+deleted file mode 100644
+index ee7f79a..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 2.gif b/games/pacman/res/sprite/pacman-l 2.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 3.gif b/games/pacman/res/sprite/pacman-l 3.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 4.gif b/games/pacman/res/sprite/pacman-l 4.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 5.gif b/games/pacman/res/sprite/pacman-l 5.gif
+deleted file mode 100644
+index b446def..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 6.gif b/games/pacman/res/sprite/pacman-l 6.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 7.gif b/games/pacman/res/sprite/pacman-l 7.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 8.gif b/games/pacman/res/sprite/pacman-l 8.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 1.gif b/games/pacman/res/sprite/pacman-r 1.gif
+deleted file mode 100644
+index 7719686..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 2.gif b/games/pacman/res/sprite/pacman-r 2.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 3.gif b/games/pacman/res/sprite/pacman-r 3.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 4.gif b/games/pacman/res/sprite/pacman-r 4.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 5.gif b/games/pacman/res/sprite/pacman-r 5.gif
+deleted file mode 100644
+index 1fe5419..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 6.gif b/games/pacman/res/sprite/pacman-r 6.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 7.gif b/games/pacman/res/sprite/pacman-r 7.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 8.gif b/games/pacman/res/sprite/pacman-r 8.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 1.gif b/games/pacman/res/sprite/pacman-u 1.gif
+deleted file mode 100644
+index 01ef0a3..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 2.gif b/games/pacman/res/sprite/pacman-u 2.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 3.gif b/games/pacman/res/sprite/pacman-u 3.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 4.gif b/games/pacman/res/sprite/pacman-u 4.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 5.gif b/games/pacman/res/sprite/pacman-u 5.gif
+deleted file mode 100644
+index d4698b0..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 6.gif b/games/pacman/res/sprite/pacman-u 6.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 7.gif b/games/pacman/res/sprite/pacman-u 7.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 8.gif b/games/pacman/res/sprite/pacman-u 8.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman.gif b/games/pacman/res/sprite/pacman.gif
+deleted file mode 100644
+index a584c10..0000000
+Binary files a/games/pacman/res/sprite/pacman.gif and /dev/null differ
+diff --git a/games/pacman/res/text/0.gif b/games/pacman/res/text/0.gif
+deleted file mode 100644
+index f01b653..0000000
+Binary files a/games/pacman/res/text/0.gif and /dev/null differ
+diff --git a/games/pacman/res/text/1.gif b/games/pacman/res/text/1.gif
+deleted file mode 100644
+index 7349994..0000000
+Binary files a/games/pacman/res/text/1.gif and /dev/null differ
+diff --git a/games/pacman/res/text/2.gif b/games/pacman/res/text/2.gif
+deleted file mode 100644
+index 3254d6f..0000000
+Binary files a/games/pacman/res/text/2.gif and /dev/null differ
+diff --git a/games/pacman/res/text/3.gif b/games/pacman/res/text/3.gif
+deleted file mode 100644
+index c88635d..0000000
+Binary files a/games/pacman/res/text/3.gif and /dev/null differ
+diff --git a/games/pacman/res/text/4.gif b/games/pacman/res/text/4.gif
+deleted file mode 100644
+index f3b5c3b..0000000
+Binary files a/games/pacman/res/text/4.gif and /dev/null differ
+diff --git a/games/pacman/res/text/5.gif b/games/pacman/res/text/5.gif
+deleted file mode 100644
+index dae0fd7..0000000
+Binary files a/games/pacman/res/text/5.gif and /dev/null differ
+diff --git a/games/pacman/res/text/6.gif b/games/pacman/res/text/6.gif
+deleted file mode 100644
+index dae7821..0000000
+Binary files a/games/pacman/res/text/6.gif and /dev/null differ
+diff --git a/games/pacman/res/text/7.gif b/games/pacman/res/text/7.gif
+deleted file mode 100644
+index dda359b..0000000
+Binary files a/games/pacman/res/text/7.gif and /dev/null differ
+diff --git a/games/pacman/res/text/8.gif b/games/pacman/res/text/8.gif
+deleted file mode 100644
+index 01305d4..0000000
+Binary files a/games/pacman/res/text/8.gif and /dev/null differ
+diff --git a/games/pacman/res/text/9.gif b/games/pacman/res/text/9.gif
+deleted file mode 100644
+index b29bb19..0000000
+Binary files a/games/pacman/res/text/9.gif and /dev/null differ
+diff --git a/games/pacman/res/text/gameover.gif b/games/pacman/res/text/gameover.gif
+deleted file mode 100644
+index e854b89..0000000
+Binary files a/games/pacman/res/text/gameover.gif and /dev/null differ
+diff --git a/games/pacman/res/text/life.gif b/games/pacman/res/text/life.gif
+deleted file mode 100644
+index 0e8f1bf..0000000
+Binary files a/games/pacman/res/text/life.gif and /dev/null differ
+diff --git a/games/pacman/res/text/logo.gif b/games/pacman/res/text/logo.gif
+deleted file mode 100644
+index 1cd71a7..0000000
+Binary files a/games/pacman/res/text/logo.gif and /dev/null differ
+diff --git a/games/pacman/res/text/ready.gif b/games/pacman/res/text/ready.gif
+deleted file mode 100644
+index 0cdcd89..0000000
+Binary files a/games/pacman/res/text/ready.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/blank.gif b/games/pacman/res/tiles/blank.gif
+deleted file mode 100644
+index ae631b0..0000000
+Binary files a/games/pacman/res/tiles/blank.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-h.gif b/games/pacman/res/tiles/door-h.gif
+deleted file mode 100644
+index 49687f5..0000000
+Binary files a/games/pacman/res/tiles/door-h.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-v.gif b/games/pacman/res/tiles/door-v.gif
+deleted file mode 100644
+index 2e7568d..0000000
+Binary files a/games/pacman/res/tiles/door-v.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-blinky.gif b/games/pacman/res/tiles/ghost-blinky.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/tiles/ghost-blinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-door.gif b/games/pacman/res/tiles/ghost-door.gif
+deleted file mode 100644
+index cffd09a..0000000
+Binary files a/games/pacman/res/tiles/ghost-door.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-inky.gif b/games/pacman/res/tiles/ghost-inky.gif
+deleted file mode 100644
+index 4753970..0000000
+Binary files a/games/pacman/res/tiles/ghost-inky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-pinky.gif b/games/pacman/res/tiles/ghost-pinky.gif
+deleted file mode 100644
+index 6fd82ec..0000000
+Binary files a/games/pacman/res/tiles/ghost-pinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-sue.gif b/games/pacman/res/tiles/ghost-sue.gif
+deleted file mode 100644
+index 14b057d..0000000
+Binary files a/games/pacman/res/tiles/ghost-sue.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/glasses.gif b/games/pacman/res/tiles/glasses.gif
+deleted file mode 100644
+index f17ba54..0000000
+Binary files a/games/pacman/res/tiles/glasses.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/hiscores.gif b/games/pacman/res/tiles/hiscores.gif
+deleted file mode 100644
+index c504d3c..0000000
+Binary files a/games/pacman/res/tiles/hiscores.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet-power.gif b/games/pacman/res/tiles/pellet-power.gif
+deleted file mode 100644
+index 806f7f4..0000000
+Binary files a/games/pacman/res/tiles/pellet-power.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet.gif b/games/pacman/res/tiles/pellet.gif
+deleted file mode 100644
+index 5284dd8..0000000
+Binary files a/games/pacman/res/tiles/pellet.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/showlogo.gif b/games/pacman/res/tiles/showlogo.gif
+deleted file mode 100644
+index 35abd50..0000000
+Binary files a/games/pacman/res/tiles/showlogo.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/start.gif b/games/pacman/res/tiles/start.gif
+deleted file mode 100644
+index 8b0fafe..0000000
+Binary files a/games/pacman/res/tiles/start.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ll.gif b/games/pacman/res/tiles/wall-corner-ll.gif
+deleted file mode 100644
+index 86b0398..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ll.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-lr.gif b/games/pacman/res/tiles/wall-corner-lr.gif
+deleted file mode 100644
+index c43af41..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-lr.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ul.gif b/games/pacman/res/tiles/wall-corner-ul.gif
+deleted file mode 100644
+index 5acadaa..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ul.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ur.gif b/games/pacman/res/tiles/wall-corner-ur.gif
+deleted file mode 100644
+index be16253..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ur.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-b.gif b/games/pacman/res/tiles/wall-end-b.gif
+deleted file mode 100644
+index 9041b06..0000000
+Binary files a/games/pacman/res/tiles/wall-end-b.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-l.gif b/games/pacman/res/tiles/wall-end-l.gif
+deleted file mode 100644
+index 2ed728a..0000000
+Binary files a/games/pacman/res/tiles/wall-end-l.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-r.gif b/games/pacman/res/tiles/wall-end-r.gif
+deleted file mode 100644
+index 25c7848..0000000
+Binary files a/games/pacman/res/tiles/wall-end-r.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-t.gif b/games/pacman/res/tiles/wall-end-t.gif
+deleted file mode 100644
+index 2155e70..0000000
+Binary files a/games/pacman/res/tiles/wall-end-t.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-nub.gif b/games/pacman/res/tiles/wall-nub.gif
+deleted file mode 100644
+index 113941b..0000000
+Binary files a/games/pacman/res/tiles/wall-nub.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-horiz.gif b/games/pacman/res/tiles/wall-straight-horiz.gif
+deleted file mode 100644
+index 6308eef..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-horiz.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-vert.gif b/games/pacman/res/tiles/wall-straight-vert.gif
+deleted file mode 100644
+index 6b7ddb7..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-vert.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-bottom.gif b/games/pacman/res/tiles/wall-t-bottom.gif
+deleted file mode 100644
+index 10ac483..0000000
+Binary files a/games/pacman/res/tiles/wall-t-bottom.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-left.gif b/games/pacman/res/tiles/wall-t-left.gif
+deleted file mode 100644
+index 3006e2a..0000000
+Binary files a/games/pacman/res/tiles/wall-t-left.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-right.gif b/games/pacman/res/tiles/wall-t-right.gif
+deleted file mode 100644
+index 27bb644..0000000
+Binary files a/games/pacman/res/tiles/wall-t-right.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-top.gif b/games/pacman/res/tiles/wall-t-top.gif
+deleted file mode 100644
+index 11f0e1e..0000000
+Binary files a/games/pacman/res/tiles/wall-t-top.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-x.gif b/games/pacman/res/tiles/wall-x.gif
+deleted file mode 100644
+index 3ba8eaa..0000000
+Binary files a/games/pacman/res/tiles/wall-x.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/x-paintwall.gif b/games/pacman/res/tiles/x-paintwall.gif
+deleted file mode 100644
+index 78f60c4..0000000
+Binary files a/games/pacman/res/tiles/x-paintwall.gif and /dev/null differ
+diff --git a/ppo_custom_heterognn_Freeway.zip b/ppo_custom_heterognn_Freeway.zip
+index 2ab5bea..4df678f 100644
+Binary files a/ppo_custom_heterognn_Freeway.zip and b/ppo_custom_heterognn_Freeway.zip differ
+diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
+index 45c0c79..89bbbe1 120000
+--- a/wandb/debug-internal.log
++++ b/wandb/debug-internal.log
+@@ -1 +1 @@
+-run-20240729_191107-3eokwam7/logs/debug-internal.log
+\ No newline at end of file
++run-20240729_234426-w18fykjp/logs/debug-internal.log
+\ No newline at end of file
+diff --git a/wandb/debug.log b/wandb/debug.log
+index a5e6cab..21e6109 120000
+--- a/wandb/debug.log
++++ b/wandb/debug.log
+@@ -1 +1 @@
+-run-20240729_191107-3eokwam7/logs/debug.log
+\ No newline at end of file
++run-20240729_234426-w18fykjp/logs/debug.log
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+deleted file mode 100644
+index 043386e..0000000
+--- a/wandb/latest-run
++++ /dev/null
+@@ -1 +0,0 @@
+-run-20240715_125454-7cw9smqu
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+new file mode 120000
+index 0000000..2448c4e
+--- /dev/null
++++ b/wandb/latest-run
+@@ -0,0 +1 @@
++run-20240729_234426-w18fykjp
+\ No newline at end of file
diff --git a/wandb/run-20240729_234426-w18fykjp/files/output.log b/wandb/run-20240729_234426-w18fykjp/files/output.log
new file mode 100644
index 0000000..c4b47da
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/output.log
@@ -0,0 +1,10 @@
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 196, in _run_module_as_main
+    return _run_code(code, main_globals, None,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 86, in _run_code
+    exec(code, run_globals)
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/run_supervised_gnn.py", line 209, in <module>
+    env = FreewayEnvConstant(render_mode='human', observation_type='graph')
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/freeway_envs/freeway_env.py", line 736, in __init__
+    self.max_objects = self.max_cars_init + 4
+AttributeError: 'FreewayEnvConstant' object has no attribute 'max_cars_init'
\ No newline at end of file
diff --git a/wandb/run-20240729_234426-w18fykjp/files/requirements.txt b/wandb/run-20240729_234426-w18fykjp/files/requirements.txt
new file mode 100644
index 0000000..717b9d3
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/requirements.txt
@@ -0,0 +1,83 @@
+AutoROM.accept-rom-license==0.6.1
+AutoROM==0.4.2
+Farama-Notifications==0.0.4
+GitPython==3.1.43
+Jinja2==3.1.4
+Markdown==3.6
+MarkupSafe==2.1.5
+PyYAML==6.0.1
+Shimmy==0.2.1
+Werkzeug==3.0.3
+absl-py==2.1.0
+aiohttp==3.9.5
+aiosignal==1.3.1
+ale-py==0.8.1
+async-timeout==4.0.3
+atari-py==0.2.5
+attrs==23.2.0
+certifi==2024.2.2
+charset-normalizer==3.3.2
+click==8.1.7
+cloudpickle==3.0.0
+contourpy==1.2.1
+cycler==0.12.1
+docker-pycreds==0.4.0
+filelock==3.14.0
+fonttools==4.52.4
+frozenlist==1.4.1
+fsspec==2024.5.0
+gitdb==4.0.11
+grpcio==1.64.0
+gymnasium==0.29.1
+idna==3.7
+imageio==2.34.1
+importlib_resources==6.4.0
+joblib==1.4.2
+kiwisolver==1.4.5
+lazy_loader==0.4
+lightning-utilities==0.11.2
+lightning==2.2.5
+matplotlib==3.9.0
+mpmath==1.3.0
+multidict==6.0.5
+networkx==3.3
+numpy==1.26.4
+opencv-python==4.10.0.84
+packaging==24.0
+pandas==2.2.2
+pillow==10.3.0
+pip==23.3.1
+platformdirs==4.2.2
+protobuf==4.25.3
+psutil==5.9.8
+pygame==2.5.2
+pyparsing==3.1.2
+python-dateutil==2.9.0.post0
+pytorch-lightning==2.2.5
+pytz==2024.1
+requests==2.32.2
+sb3_contrib==2.3.0
+scikit-image==0.23.2
+scikit-learn==1.5.0
+scipy==1.13.1
+sentry-sdk==2.3.1
+setproctitle==1.3.3
+setuptools==68.2.2
+six==1.16.0
+smmap==5.0.1
+stable_baselines3==2.3.2
+sympy==1.12
+tensorboard-data-server==0.7.2
+tensorboard==2.16.2
+threadpoolctl==3.5.0
+tifffile==2024.5.22
+torch==2.3.0
+torch_geometric==2.5.3
+torchmetrics==1.4.0.post0
+tqdm==4.66.4
+typing_extensions==4.12.0
+tzdata==2024.1
+urllib3==2.2.1
+wandb==0.17.0
+wheel==0.42.0
+yarl==1.9.4
\ No newline at end of file
diff --git a/wandb/run-20240729_234426-w18fykjp/files/wandb-metadata.json b/wandb/run-20240729_234426-w18fykjp/files/wandb-metadata.json
new file mode 100644
index 0000000..488c4b7
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/wandb-metadata.json
@@ -0,0 +1,48 @@
+{
+    "os": "macOS-14.0-arm64-arm-64bit",
+    "python": "3.10.14",
+    "heartbeatAt": "2024-07-29T21:44:27.281169",
+    "startedAt": "2024-07-29T21:44:26.284567",
+    "docker": null,
+    "cuda": null,
+    "args": [],
+    "state": "running",
+    "program": "-m games.freeway.run_supervised_gnn",
+    "codePathLocal": null,
+    "git": {
+        "remote": "https://github.com/rb248/Master-Thesis-GNN.git",
+        "commit": "658fe2953cac0367c1821fdd348158955a06af8a"
+    },
+    "email": "rishabhbhatia315@gmail.com",
+    "root": "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN",
+    "host": "rishubs-MBP.fritz.box",
+    "username": "rishubbhatia",
+    "executable": "/Users/rishubbhatia/miniforge3/envs/games/bin/python",
+    "cpu_count": 8,
+    "cpu_count_logical": 8,
+    "cpu_freq": {
+        "current": 3204,
+        "min": 600,
+        "max": 3204
+    },
+    "cpu_freq_per_core": [
+        {
+            "current": 3204,
+            "min": 600,
+            "max": 3204
+        }
+    ],
+    "disk": {
+        "/": {
+            "total": 228.27386474609375,
+            "used": 13.797981262207031
+        }
+    },
+    "gpuapple": {
+        "type": "arm",
+        "vendor": "Apple"
+    },
+    "memory": {
+        "total": 8.0
+    }
+}
diff --git a/wandb/run-20240729_234426-w18fykjp/files/wandb-summary.json b/wandb/run-20240729_234426-w18fykjp/files/wandb-summary.json
new file mode 100644
index 0000000..13ed209
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/files/wandb-summary.json
@@ -0,0 +1 @@
+{"_wandb": {"runtime": 7}}
\ No newline at end of file
diff --git a/wandb/run-20240729_234426-w18fykjp/logs/debug-internal.log b/wandb/run-20240729_234426-w18fykjp/logs/debug-internal.log
new file mode 100644
index 0000000..4452d65
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/logs/debug-internal.log
@@ -0,0 +1,238 @@
+2024-07-29 23:44:26,320 INFO    StreamThr :72263 [internal.py:wandb_internal():85] W&B internal server running at pid: 72263, started at: 2024-07-29 23:44:26.314503
+2024-07-29 23:44:26,321 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: status
+2024-07-29 23:44:26,323 INFO    WriterThread:72263 [datastore.py:open_for_write():87] open: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/run-w18fykjp.wandb
+2024-07-29 23:44:26,326 DEBUG   SenderThread:72263 [sender.py:send():378] send: header
+2024-07-29 23:44:26,374 DEBUG   SenderThread:72263 [sender.py:send():378] send: run
+2024-07-29 23:44:26,821 INFO    SenderThread:72263 [dir_watcher.py:__init__():211] watching files in: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files
+2024-07-29 23:44:26,821 INFO    SenderThread:72263 [sender.py:_start_run_threads():1123] run started: w18fykjp with start time 1722289466.316361
+2024-07-29 23:44:26,842 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: check_version
+2024-07-29 23:44:26,842 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: check_version
+2024-07-29 23:44:26,943 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: run_start
+2024-07-29 23:44:26,953 DEBUG   HandlerThread:72263 [system_info.py:__init__():26] System info init
+2024-07-29 23:44:26,953 DEBUG   HandlerThread:72263 [system_info.py:__init__():41] System info init done
+2024-07-29 23:44:26,953 INFO    HandlerThread:72263 [system_monitor.py:start():194] Starting system monitor
+2024-07-29 23:44:26,953 INFO    SystemMonitor:72263 [system_monitor.py:_start():158] Starting system asset monitoring threads
+2024-07-29 23:44:26,953 INFO    HandlerThread:72263 [system_monitor.py:probe():214] Collecting system info
+2024-07-29 23:44:26,954 INFO    SystemMonitor:72263 [interfaces.py:start():188] Started cpu monitoring
+2024-07-29 23:44:26,956 INFO    SystemMonitor:72263 [interfaces.py:start():188] Started disk monitoring
+2024-07-29 23:44:26,960 INFO    SystemMonitor:72263 [interfaces.py:start():188] Started gpuapple monitoring
+2024-07-29 23:44:26,962 INFO    SystemMonitor:72263 [interfaces.py:start():188] Started memory monitoring
+2024-07-29 23:44:26,962 INFO    SystemMonitor:72263 [interfaces.py:start():188] Started network monitoring
+2024-07-29 23:44:27,277 ERROR   HandlerThread:72263 [gpu_apple.py:probe():176] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 164, in probe
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:44:27,281 DEBUG   HandlerThread:72263 [system_info.py:probe():150] Probing system
+2024-07-29 23:44:27,291 DEBUG   HandlerThread:72263 [system_info.py:_probe_git():135] Probing git
+2024-07-29 23:44:27,361 DEBUG   HandlerThread:72263 [system_info.py:_probe_git():143] Probing git done
+2024-07-29 23:44:27,361 DEBUG   HandlerThread:72263 [system_info.py:probe():198] Probing system done
+2024-07-29 23:44:27,361 DEBUG   HandlerThread:72263 [system_monitor.py:probe():223] {'os': 'macOS-14.0-arm64-arm-64bit', 'python': '3.10.14', 'heartbeatAt': '2024-07-29T21:44:27.281169', 'startedAt': '2024-07-29T21:44:26.284567', 'docker': None, 'cuda': None, 'args': (), 'state': 'running', 'program': '-m games.freeway.run_supervised_gnn', 'codePathLocal': None, 'git': {'remote': 'https://github.com/rb248/Master-Thesis-GNN.git', 'commit': '658fe2953cac0367c1821fdd348158955a06af8a'}, 'email': 'rishabhbhatia315@gmail.com', 'root': '/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN', 'host': 'rishubs-MBP.fritz.box', 'username': 'rishubbhatia', 'executable': '/Users/rishubbhatia/miniforge3/envs/games/bin/python', 'cpu_count': 8, 'cpu_count_logical': 8, 'cpu_freq': {'current': 3204, 'min': 600, 'max': 3204}, 'cpu_freq_per_core': [{'current': 3204, 'min': 600, 'max': 3204}], 'disk': {'/': {'total': 228.27386474609375, 'used': 13.797981262207031}}, 'gpuapple': {'type': 'arm', 'vendor': 'Apple'}, 'memory': {'total': 8.0}}
+2024-07-29 23:44:27,361 INFO    HandlerThread:72263 [system_monitor.py:probe():224] Finished collecting system info
+2024-07-29 23:44:27,361 INFO    HandlerThread:72263 [system_monitor.py:probe():227] Publishing system info
+2024-07-29 23:44:27,361 DEBUG   HandlerThread:72263 [system_info.py:_save_conda():207] Saving list of conda packages installed into the current environment
+2024-07-29 23:44:27,402 ERROR   gpuapple  :72263 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:44:27,832 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml
+2024-07-29 23:44:29,518 ERROR   gpuapple  :72263 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:44:30,980 DEBUG   HandlerThread:72263 [system_info.py:_save_conda():222] Saving conda packages done
+2024-07-29 23:44:30,981 DEBUG   HandlerThread:72263 [system_info.py:_save_code():44] Saving code
+2024-07-29 23:44:30,981 WARNING HandlerThread:72263 [system_info.py:_save_code():46] unable to save code -- program entry not found
+2024-07-29 23:44:30,981 DEBUG   HandlerThread:72263 [system_info.py:_save_patches():82] Saving git patches
+2024-07-29 23:44:31,730 ERROR   gpuapple  :72263 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:44:31,855 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml
+2024-07-29 23:44:32,817 DEBUG   HandlerThread:72263 [system_info.py:_save_patches():124] Saving git patches done
+2024-07-29 23:44:32,818 INFO    HandlerThread:72263 [system_monitor.py:probe():229] Finished publishing system info
+2024-07-29 23:44:32,842 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:44:32,842 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: keepalive
+2024-07-29 23:44:32,842 DEBUG   SenderThread:72263 [sender.py:send():378] send: files
+2024-07-29 23:44:32,842 INFO    SenderThread:72263 [sender.py:_save_file():1389] saving file wandb-metadata.json with policy now
+2024-07-29 23:44:32,843 INFO    SenderThread:72263 [sender.py:_save_file():1389] saving file diff.patch with policy now
+2024-07-29 23:44:32,859 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/wandb-metadata.json
+2024-07-29 23:44:32,859 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/diff.patch
+2024-07-29 23:44:33,086 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: python_packages
+2024-07-29 23:44:33,086 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: python_packages
+2024-07-29 23:44:33,087 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:44:33,088 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:44:33,589 DEBUG   SenderThread:72263 [sender.py:send():378] send: telemetry
+2024-07-29 23:44:33,743 INFO    wandb-upload_0:72263 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmp4dd9vftswandb/qlrdsj13-wandb-metadata.json
+2024-07-29 23:44:33,861 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/requirements.txt
+2024-07-29 23:44:33,982 ERROR   gpuapple  :72263 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:44:34,354 INFO    wandb-upload_1:72263 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmp4dd9vftswandb/j8er4thr-diff.patch
+2024-07-29 23:44:34,637 DEBUG   SenderThread:72263 [sender.py:send():378] send: exit
+2024-07-29 23:44:34,638 INFO    SenderThread:72263 [sender.py:send_exit():585] handling exit code: 1
+2024-07-29 23:44:34,639 INFO    SenderThread:72263 [sender.py:send_exit():587] handling runtime: 7
+2024-07-29 23:44:34,653 INFO    SenderThread:72263 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:44:34,665 INFO    SenderThread:72263 [sender.py:send_exit():593] send defer
+2024-07-29 23:44:34,666 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,666 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 0
+2024-07-29 23:44:34,667 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,667 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 0
+2024-07-29 23:44:34,667 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 1
+2024-07-29 23:44:34,667 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,668 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 1
+2024-07-29 23:44:34,668 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,668 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 1
+2024-07-29 23:44:34,668 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 2
+2024-07-29 23:44:34,668 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,668 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 2
+2024-07-29 23:44:34,668 INFO    HandlerThread:72263 [system_monitor.py:finish():203] Stopping system monitor
+2024-07-29 23:44:34,668 DEBUG   SystemMonitor:72263 [system_monitor.py:_start():172] Starting system metrics aggregation loop
+2024-07-29 23:44:34,669 INFO    HandlerThread:72263 [interfaces.py:finish():200] Joined cpu monitor
+2024-07-29 23:44:34,669 DEBUG   SystemMonitor:72263 [system_monitor.py:_start():179] Finished system metrics aggregation loop
+2024-07-29 23:44:34,670 DEBUG   SystemMonitor:72263 [system_monitor.py:_start():183] Publishing last batch of metrics
+2024-07-29 23:44:34,670 INFO    HandlerThread:72263 [interfaces.py:finish():200] Joined disk monitor
+2024-07-29 23:44:34,672 INFO    HandlerThread:72263 [interfaces.py:finish():200] Joined gpuapple monitor
+2024-07-29 23:44:34,672 INFO    HandlerThread:72263 [interfaces.py:finish():200] Joined memory monitor
+2024-07-29 23:44:34,672 INFO    HandlerThread:72263 [interfaces.py:finish():200] Joined network monitor
+2024-07-29 23:44:34,673 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,673 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 2
+2024-07-29 23:44:34,673 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 3
+2024-07-29 23:44:34,673 DEBUG   SenderThread:72263 [sender.py:send():378] send: telemetry
+2024-07-29 23:44:34,674 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,674 DEBUG   SenderThread:72263 [sender.py:send():378] send: stats
+2024-07-29 23:44:34,674 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 3
+2024-07-29 23:44:34,674 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,674 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 3
+2024-07-29 23:44:34,674 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 4
+2024-07-29 23:44:34,674 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,674 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 4
+2024-07-29 23:44:34,674 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,674 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 4
+2024-07-29 23:44:34,674 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 5
+2024-07-29 23:44:34,675 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,675 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 5
+2024-07-29 23:44:34,675 DEBUG   SenderThread:72263 [sender.py:send():378] send: summary
+2024-07-29 23:44:34,690 INFO    SenderThread:72263 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:44:34,691 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,691 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 5
+2024-07-29 23:44:34,691 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 6
+2024-07-29 23:44:34,691 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,691 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 6
+2024-07-29 23:44:34,691 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,691 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 6
+2024-07-29 23:44:34,694 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:44:34,846 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 7
+2024-07-29 23:44:34,846 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:34,846 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 7
+2024-07-29 23:44:34,846 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:34,846 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 7
+2024-07-29 23:44:34,862 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/config.yaml
+2024-07-29 23:44:34,862 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/wandb-summary.json
+2024-07-29 23:44:34,863 INFO    Thread-12 :72263 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/output.log
+2024-07-29 23:44:35,615 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:44:36,660 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 8
+2024-07-29 23:44:36,663 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:44:36,663 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:36,664 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 8
+2024-07-29 23:44:36,665 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:36,665 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 8
+2024-07-29 23:44:36,665 INFO    SenderThread:72263 [job_builder.py:build():432] Attempting to build job artifact
+2024-07-29 23:44:36,670 INFO    SenderThread:72263 [job_builder.py:_get_source_type():565] is repo sourced job
+2024-07-29 23:44:36,670 WARNING SenderThread:72263 [job_builder.py:_log_if_verbose():267] No program path found, not creating job artifact. See https://docs.wandb.ai/guides/launch/create-job
+2024-07-29 23:44:36,670 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 9
+2024-07-29 23:44:36,670 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:36,670 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 9
+2024-07-29 23:44:36,672 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:36,672 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 9
+2024-07-29 23:44:36,672 INFO    SenderThread:72263 [dir_watcher.py:finish():358] shutting down directory watcher
+2024-07-29 23:44:36,872 INFO    SenderThread:72263 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/output.log
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():388] scan: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/diff.patch diff.patch
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/requirements.txt requirements.txt
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/output.log output.log
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/config.yaml config.yaml
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/wandb-summary.json wandb-summary.json
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml conda-environment.yaml
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/wandb-metadata.json wandb-metadata.json
+2024-07-29 23:44:36,873 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 10
+2024-07-29 23:44:36,874 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:36,874 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 10
+2024-07-29 23:44:36,874 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:36,874 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 10
+2024-07-29 23:44:36,874 INFO    SenderThread:72263 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:44:37,257 INFO    wandb-upload_2:72263 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/requirements.txt
+2024-07-29 23:44:37,258 INFO    wandb-upload_0:72263 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/output.log
+2024-07-29 23:44:37,383 INFO    wandb-upload_1:72263 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/wandb-summary.json
+2024-07-29 23:44:37,395 INFO    wandb-upload_3:72263 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/config.yaml
+2024-07-29 23:44:37,425 INFO    wandb-upload_4:72263 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/files/conda-environment.yaml
+2024-07-29 23:44:37,623 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:44:37,623 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:44:37,629 INFO    Thread-11 (_thread_body):72263 [sender.py:transition_state():613] send defer: 11
+2024-07-29 23:44:37,630 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:37,630 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 11
+2024-07-29 23:44:37,631 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:37,632 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 11
+2024-07-29 23:44:37,632 INFO    SenderThread:72263 [file_pusher.py:join():175] waiting for file pusher
+2024-07-29 23:44:37,633 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 12
+2024-07-29 23:44:37,634 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:37,634 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 12
+2024-07-29 23:44:37,634 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:37,635 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 12
+2024-07-29 23:44:37,635 INFO    SenderThread:72263 [file_stream.py:finish():601] file stream finish called
+2024-07-29 23:44:37,784 INFO    SenderThread:72263 [file_stream.py:finish():605] file stream finish is done
+2024-07-29 23:44:37,784 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 13
+2024-07-29 23:44:37,784 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:37,784 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 13
+2024-07-29 23:44:37,785 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:37,785 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 13
+2024-07-29 23:44:37,785 INFO    SenderThread:72263 [sender.py:transition_state():613] send defer: 14
+2024-07-29 23:44:37,786 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:44:37,786 DEBUG   SenderThread:72263 [sender.py:send():378] send: final
+2024-07-29 23:44:37,786 INFO    HandlerThread:72263 [handler.py:handle_request_defer():184] handle defer: 14
+2024-07-29 23:44:37,786 DEBUG   SenderThread:72263 [sender.py:send():378] send: footer
+2024-07-29 23:44:37,786 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:44:37,786 INFO    SenderThread:72263 [sender.py:send_request_defer():609] handle sender defer: 14
+2024-07-29 23:44:37,787 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:44:37,787 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:44:37,788 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:44:37,788 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:44:37,788 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: server_info
+2024-07-29 23:44:37,789 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: get_summary
+2024-07-29 23:44:37,789 DEBUG   SenderThread:72263 [sender.py:send_request():405] send_request: server_info
+2024-07-29 23:44:37,789 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: sampled_history
+2024-07-29 23:44:37,791 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: internal_messages
+2024-07-29 23:44:37,936 INFO    MainThread:72263 [wandb_run.py:_footer_history_summary_info():3994] rendering history
+2024-07-29 23:44:37,936 INFO    MainThread:72263 [wandb_run.py:_footer_history_summary_info():4026] rendering summary
+2024-07-29 23:44:37,937 INFO    MainThread:72263 [wandb_run.py:_footer_sync_info():3953] logging synced files
+2024-07-29 23:44:37,937 DEBUG   HandlerThread:72263 [handler.py:handle_request():158] handle_request: shutdown
+2024-07-29 23:44:37,937 INFO    HandlerThread:72263 [handler.py:finish():882] shutting down handler
+2024-07-29 23:44:38,794 INFO    WriterThread:72263 [datastore.py:close():296] close: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/run-w18fykjp.wandb
+2024-07-29 23:44:38,937 INFO    SenderThread:72263 [sender.py:finish():1545] shutting down sender
+2024-07-29 23:44:38,937 INFO    SenderThread:72263 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:44:38,937 INFO    SenderThread:72263 [file_pusher.py:join():175] waiting for file pusher
diff --git a/wandb/run-20240729_234426-w18fykjp/logs/debug.log b/wandb/run-20240729_234426-w18fykjp/logs/debug.log
new file mode 100644
index 0000000..1ab2125
--- /dev/null
+++ b/wandb/run-20240729_234426-w18fykjp/logs/debug.log
@@ -0,0 +1,30 @@
+2024-07-29 23:44:26,298 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Configure stats pid to 72175
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:44:26,299 WARNING MainThread:72175 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/logs/debug.log
+2024-07-29 23:44:26,299 INFO    MainThread:72175 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234426-w18fykjp/logs/debug-internal.log
+2024-07-29 23:44:26,300 INFO    MainThread:72175 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:44:26,300 INFO    MainThread:72175 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:44:26,300 INFO    MainThread:72175 [wandb_init.py:init():610] starting backend
+2024-07-29 23:44:26,301 INFO    MainThread:72175 [wandb_init.py:init():614] setting up manager
+2024-07-29 23:44:26,309 INFO    MainThread:72175 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=spawn,fork,forkserver, using: spawn
+2024-07-29 23:44:26,315 INFO    MainThread:72175 [wandb_init.py:init():622] backend started and connected
+2024-07-29 23:44:26,323 INFO    MainThread:72175 [wandb_init.py:init():711] updated telemetry
+2024-07-29 23:44:26,373 INFO    MainThread:72175 [wandb_init.py:init():744] communicating run to backend with 90.0 second timeout
+2024-07-29 23:44:26,842 INFO    MainThread:72175 [wandb_run.py:_on_init():2396] communicating current version
+2024-07-29 23:44:26,937 INFO    MainThread:72175 [wandb_run.py:_on_init():2405] got version response upgrade_message: "wandb version 0.17.5 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"
+
+2024-07-29 23:44:26,937 INFO    MainThread:72175 [wandb_init.py:init():795] starting run threads in backend
+2024-07-29 23:44:33,086 INFO    MainThread:72175 [wandb_run.py:_console_start():2374] atexit reg
+2024-07-29 23:44:33,086 INFO    MainThread:72175 [wandb_run.py:_redirect():2229] redirect: wrap_raw
+2024-07-29 23:44:33,087 INFO    MainThread:72175 [wandb_run.py:_redirect():2294] Wrapping output streams.
+2024-07-29 23:44:33,087 INFO    MainThread:72175 [wandb_run.py:_redirect():2319] Redirects installed.
+2024-07-29 23:44:33,092 INFO    MainThread:72175 [wandb_init.py:init():838] run started, returning control to user process
+2024-07-29 23:44:38,943 WARNING MsgRouterThr:72175 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_234426-w18fykjp/run-w18fykjp.wandb b/wandb/run-20240729_234426-w18fykjp/run-w18fykjp.wandb
new file mode 100644
index 0000000..28a2e65
Binary files /dev/null and b/wandb/run-20240729_234426-w18fykjp/run-w18fykjp.wandb differ
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml b/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml
new file mode 100644
index 0000000..2d5ad15
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml
@@ -0,0 +1,103 @@
+name: games
+channels:
+  - http://conda.anaconda.org/gurobi
+  - apple
+  - conda-forge
+  - defaults
+dependencies:
+  - bzip2=1.0.8=h93a5062_5
+  - ca-certificates=2024.2.2=hf0a4a13_0
+  - libffi=3.4.2=h3422bc3_5
+  - libsqlite=3.45.3=h091b4b1_0
+  - libzlib=1.2.13=h53f4e23_5
+  - ncurses=6.5=hb89a1cb_0
+  - openssl=3.3.0=hfb2fe0b_3
+  - pip=23.3.1=pyhd8ed1ab_0
+  - python=3.10.14=h2469fbe_0_cpython
+  - readline=8.2=h92ec313_1
+  - setuptools=68.2.2=pyhd8ed1ab_0
+  - tk=8.6.13=h5083fa2_1
+  - wheel=0.42.0=pyhd8ed1ab_0
+  - xz=5.2.6=h57fd34a_0
+  - pip:
+      - absl-py==2.1.0
+      - aiohttp==3.9.5
+      - aiosignal==1.3.1
+      - ale-py==0.8.1
+      - async-timeout==4.0.3
+      - atari-py==0.2.5
+      - attrs==23.2.0
+      - autorom==0.4.2
+      - autorom-accept-rom-license==0.6.1
+      - certifi==2024.2.2
+      - charset-normalizer==3.3.2
+      - click==8.1.7
+      - cloudpickle==3.0.0
+      - contourpy==1.2.1
+      - cycler==0.12.1
+      - docker-pycreds==0.4.0
+      - farama-notifications==0.0.4
+      - filelock==3.14.0
+      - fonttools==4.52.4
+      - frozenlist==1.4.1
+      - fsspec==2024.5.0
+      - gitdb==4.0.11
+      - gitpython==3.1.43
+      - grpcio==1.64.0
+      - gymnasium==0.29.1
+      - idna==3.7
+      - imageio==2.34.1
+      - importlib-resources==6.4.0
+      - jinja2==3.1.4
+      - joblib==1.4.2
+      - kiwisolver==1.4.5
+      - lazy-loader==0.4
+      - lightning==2.2.5
+      - lightning-utilities==0.11.2
+      - markdown==3.6
+      - markupsafe==2.1.5
+      - matplotlib==3.9.0
+      - mpmath==1.3.0
+      - multidict==6.0.5
+      - networkx==3.3
+      - numpy==1.26.4
+      - opencv-python==4.10.0.84
+      - packaging==24.0
+      - pandas==2.2.2
+      - pillow==10.3.0
+      - platformdirs==4.2.2
+      - protobuf==4.25.3
+      - psutil==5.9.8
+      - pygame==2.5.2
+      - pyparsing==3.1.2
+      - python-dateutil==2.9.0.post0
+      - pytorch-lightning==2.2.5
+      - pytz==2024.1
+      - pyyaml==6.0.1
+      - requests==2.32.2
+      - sb3-contrib==2.3.0
+      - scikit-image==0.23.2
+      - scikit-learn==1.5.0
+      - scipy==1.13.1
+      - sentry-sdk==2.3.1
+      - setproctitle==1.3.3
+      - shimmy==0.2.1
+      - six==1.16.0
+      - smmap==5.0.1
+      - stable-baselines3==2.3.2
+      - sympy==1.12
+      - tensorboard==2.16.2
+      - tensorboard-data-server==0.7.2
+      - threadpoolctl==3.5.0
+      - tifffile==2024.5.22
+      - torch==2.3.0
+      - torch-geometric==2.5.3
+      - torchmetrics==1.4.0.post0
+      - tqdm==4.66.4
+      - typing-extensions==4.12.0
+      - tzdata==2024.1
+      - urllib3==2.2.1
+      - wandb==0.17.0
+      - werkzeug==3.0.3
+      - yarl==1.9.4
+prefix: /Users/rishubbhatia/miniforge3/envs/games
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/config.yaml b/wandb/run-20240729_234531-uyq0rg9d/files/config.yaml
new file mode 100644
index 0000000..0ea6401
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/config.yaml
@@ -0,0 +1,29 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    python_version: 3.10.14
+    cli_version: 0.17.0
+    framework: torch
+    is_jupyter_run: false
+    is_kaggle_kernel: false
+    start_time: 1722289531
+    t:
+      1:
+      - 1
+      - 55
+      - 77
+      2:
+      - 1
+      - 55
+      - 77
+      3:
+      - 23
+      - 35
+      4: 3.10.14
+      5: 0.17.0
+      8:
+      - 4
+      - 5
+      13: darwin-arm64
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/diff.patch b/wandb/run-20240729_234531-uyq0rg9d/files/diff.patch
new file mode 100644
index 0000000..8556869
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/diff.patch
@@ -0,0 +1,7570 @@
+diff --git a/games/__pycache__/__init__.cpython-310.pyc b/games/__pycache__/__init__.cpython-310.pyc
+index 1b00a1b..347bbb7 100644
+Binary files a/games/__pycache__/__init__.cpython-310.pyc and b/games/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/encoder/GraphEncoder.py b/games/encoder/GraphEncoder.py
+index 7e34464..a0dbe69 100644
+--- a/games/encoder/GraphEncoder.py
++++ b/games/encoder/GraphEncoder.py
+@@ -286,51 +286,171 @@ class HeteroGNNEncoderPongProximity:
+ #         return data_list 
+ 
+ 
++# class GraphEncoderFreeway:
++#     def __init__(self, obj_type_id: str = "obj"):
++#         self.obj_type_id = obj_type_id
++
++#     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
++#         batch_size, num_nodes, object_feature_length = batch_node_features.shape
++#         batch_data = []
++
++#         # Precompute node types for all batches
++#         chicken_mask = batch_node_features[:, :, -3] == 1
++#         lane_mask = batch_node_features[:, :, -2] == 1
++#         car_mask = batch_node_features[:, :, -1] == 1
++
++#         for b in range(batch_size):
++#             node_features = batch_node_features[b]
++#             graph = nx.Graph()
++
++#             # Add object nodes (vectorized)
++#             graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
++
++#             chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
++#             lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
++#             car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
++
++#             # Convert to sets for faster lookups
++#             chicken_set = set(chicken_indices)
++#             lane_set = set(lane_indices)
++#             car_set = set(car_indices)
++
++#             atom_index = num_nodes
++
++#             # Add atoms and edges (can be further optimized with matrix operations)
++#             for i in range(num_nodes):
++#                 if i in chicken_set or i in car_set:
++#                     for j in lane_set:
++#                         if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++#                             atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
++#                             graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
++#                             graph.add_edge(i, atom_index, position=0)
++#                             graph.add_edge(j, atom_index, position=1)
++#                             atom_index += 1
++
++#             # Add LaneNextToLane atoms and edges
++#             for i in range(len(lane_indices) - 1):
++#                 graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
++#                 graph.add_edge(lane_indices[i], atom_index, position=0)
++#                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
++#                 atom_index += 1
++
++#             batch_data.append(graph)
++
++#         return Batch.from_data_list(self.to_pyg_data(batch_data))
++
++#     def to_pyg_data(self, batch_graphs: List[nx.Graph]) -> List[HeteroData]:
++#         data_list = []
++
++#         for graph in batch_graphs:
++#             data = HeteroData()
++#             node_index_mapping = defaultdict(dict)
++#             obj_features = []
++#             atom_features_dict = defaultdict(list)
++#             edge_dict = defaultdict(list)
++
++#             current_obj_features = []
++#             current_atom_features_dict = defaultdict(list)
++
++#             for node, attrs in graph.nodes(data=True):
++#                 node_type = attrs['type']
++#                 features = attrs['features']
++#                 if node_type == self.obj_type_id:
++#                     node_index_mapping[node_type][node] = len(current_obj_features)
++#                     current_obj_features.append(features)
++#                 else:
++#                     node_index_mapping[node_type][node] = len(current_atom_features_dict[node_type])
++#                     current_atom_features_dict[node_type].append(features)
++
++#             if current_obj_features:
++#                 obj_features.append(torch.stack(current_obj_features))
++
++#             for node_type, features_list in current_atom_features_dict.items():
++#                 if features_list:
++#                     # Flatten the features if necessary
++#                     flattened_features = [f.view(-1) for f in features_list]
++#                     atom_features_dict[node_type].append(torch.stack(flattened_features))
++
++#             if obj_features:
++#                 data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
++
++#             for node_type, features_list in atom_features_dict.items():
++#                 if features_list:
++#                     data[node_type].x = torch.cat(features_list, dim=0)
++
++#             for src, dst, attr in graph.edges(data=True):
++#                 src_type = graph.nodes[src]['type']
++#                 dst_type = graph.nodes[dst]['type']
++#                 pos = str(attr['position'])
++#                 edge_type = (src_type, pos, dst_type)
++
++#                 src_idx = node_index_mapping[src_type][src]
++#                 dst_idx = node_index_mapping[dst_type][dst]
++#                 edge_dict[edge_type].append((src_idx, dst_idx))
++#                 # Add reverse edges for bidirectionality
++#                 reverse_edge_type = (dst_type, pos, src_type)
++#                 edge_dict[reverse_edge_type].append((dst_idx, src_idx))
++
++#             for edge_type, edges in edge_dict.items():
++#                 edge_tensor = torch.tensor(edges, dtype=torch.long).t().contiguous()
++#                 data[edge_type].edge_index = edge_tensor
++
++#             data_list.append(data)
++
++#         return data_list
++
+ class GraphEncoderFreeway:
+     def __init__(self, obj_type_id: str = "obj"):
+         self.obj_type_id = obj_type_id
+ 
+     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
+-        batch_size, num_nodes, object_feature_length = batch_node_features.shape
++        # remove the values from batch_node_features that have all zeros in the vector
++        # batch_node_features = batch_node_features[~torch.all(batch_node_features == 0, dim=1)]
+         batch_data = []
+-
+-        # Precompute node types for all batches
+-        chicken_mask = batch_node_features[:, :, -3] == 1
+-        lane_mask = batch_node_features[:, :, -2] == 1
+-        car_mask = batch_node_features[:, :, -1] == 1
++        batch_size = batch_node_features.size(0)
+ 
+         for b in range(batch_size):
+             node_features = batch_node_features[b]
++            num_nodes = node_features.size(0)
+             graph = nx.Graph()
+ 
+-            # Add object nodes (vectorized)
+-            graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
+-
+-            chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
+-            lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
+-            car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
++            object_feature_length = node_features.size(1)
+ 
+-            # Convert to sets for faster lookups
+-            chicken_set = set(chicken_indices)
+-            lane_set = set(lane_indices)
+-            car_set = set(car_indices)
++            # Add object nodes
++            for i in range(num_nodes):
++                graph.add_node(i, type=self.obj_type_id, features=node_features[i].tolist())
+ 
+             atom_index = num_nodes
+ 
+-            # Add atoms and edges (can be further optimized with matrix operations)
+-            for i in range(num_nodes):
+-                if i in chicken_set or i in car_set:
+-                    for j in lane_set:
+-                        if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+-                            atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
+-                            graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
+-                            graph.add_edge(i, atom_index, position=0)
+-                            graph.add_edge(j, atom_index, position=1)
+-                            atom_index += 1
++            # Add ChickenOnLane atoms and edges
++            chicken_indices = [i for i in range(num_nodes) if node_features[i, -3] == 1]
++            lane_indices = [i for i in range(num_nodes) if node_features[i, -2] == 1]
++
++            for i in chicken_indices:
++                for j in lane_indices:
++                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++                        atom_features = torch.zeros((2, object_feature_length)).tolist()
++                        graph.add_node(atom_index, type="ChickenOnLane", features=atom_features)
++                        graph.add_edge(i, atom_index, position=0)
++                        graph.add_edge(j, atom_index, position=1)
++                        atom_index += 1
++
++            # Add CarOnLane atoms and edges
++            car_indices = [i for i in range(num_nodes) if node_features[i, -1] == 1]
++
++            for i in car_indices:
++                for j in lane_indices:
++                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++                        atom_features = torch.zeros((2, object_feature_length)).tolist()
++                        graph.add_node(atom_index, type="CarOnLane", features=atom_features)
++                        graph.add_edge(i, atom_index, position=0)
++                        graph.add_edge(j, atom_index, position=1)
++                        atom_index += 1
+ 
+             # Add LaneNextToLane atoms and edges
+             for i in range(len(lane_indices) - 1):
+-                graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
++                atom_features = torch.zeros((2, object_feature_length)).tolist()
++                graph.add_node(atom_index, type="LaneNextToLane", features=atom_features)
+                 graph.add_edge(lane_indices[i], atom_index, position=0)
+                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
+                 atom_index += 1
+@@ -354,7 +474,7 @@ class GraphEncoderFreeway:
+ 
+             for node, attrs in graph.nodes(data=True):
+                 node_type = attrs['type']
+-                features = attrs['features']
++                features = torch.tensor(attrs['features'])
+                 if node_type == self.obj_type_id:
+                     node_index_mapping[node_type][node] = len(current_obj_features)
+                     current_obj_features.append(features)
+@@ -364,19 +484,16 @@ class GraphEncoderFreeway:
+ 
+             if current_obj_features:
+                 obj_features.append(torch.stack(current_obj_features))
+-
+             for node_type, features_list in current_atom_features_dict.items():
+                 if features_list:
+-                    # Flatten the features if necessary
+                     flattened_features = [f.view(-1) for f in features_list]
+                     atom_features_dict[node_type].append(torch.stack(flattened_features))
+ 
+             if obj_features:
+-                data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
+-
++                data[self.obj_type_id].x = torch.cat(obj_features)
+             for node_type, features_list in atom_features_dict.items():
+                 if features_list:
+-                    data[node_type].x = torch.cat(features_list, dim=0)
++                    data[node_type].x = torch.cat(features_list)
+ 
+             for src, dst, attr in graph.edges(data=True):
+                 src_type = graph.nodes[src]['type']
+@@ -398,8 +515,6 @@ class GraphEncoderFreeway:
+             data_list.append(data)
+ 
+         return data_list
+-
+-    
+ class GraphEncoderFreewayProximity:
+     def __init__(self, obj_type_id: str = "obj"):
+         self.obj_type_id = obj_type_id
+diff --git a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc
+index 7f7cf70..b9ee24e 100644
+Binary files a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc and b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc differ
+diff --git a/games/encoder/__pycache__/__init__.cpython-310.pyc b/games/encoder/__pycache__/__init__.cpython-310.pyc
+index e4059e9..7335618 100644
+Binary files a/games/encoder/__pycache__/__init__.cpython-310.pyc and b/games/encoder/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/__init__.cpython-310.pyc b/games/freeway/__pycache__/__init__.cpython-310.pyc
+index 8f6a241..ee44eda 100644
+Binary files a/games/freeway/__pycache__/__init__.cpython-310.pyc and b/games/freeway/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc
+index b518fb6..db7fb9e 100644
+Binary files a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc and b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc
+index 5560abe..74cb2a0 100644
+Binary files a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc and b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/freeway_env.py b/games/freeway/freeway_envs/freeway_env.py
+index 9bed93d..7f2629c 100644
+--- a/games/freeway/freeway_envs/freeway_env.py
++++ b/games/freeway/freeway_envs/freeway_env.py
+@@ -708,7 +708,7 @@ class FreewayEnvConstant(gym.Env):
+     metadata = {'render_modes': ['human', 'rgb_array']}
+ 
+     def __init__(self, render_mode='human', observation_type='pixel', frame_stack=4):
+-        super(FreewayEnvConstant, self).__init__()
++        super(FreewayEnv, self).__init__()
+         pygame.init()
+         self.last_time = pygame.time.get_ticks()
+         self.render_mode = render_mode
+@@ -724,8 +724,8 @@ class FreewayEnvConstant(gym.Env):
+         self.frame_stack = frame_stack
+ 
+         self.lanes = [100, 200, 300, 400, 500, 600, 700]
+-        self.lanes = [50,80,120]
+-        self.max_cars = 10
++        self.lanes = [50,100]
++        self.max_cars = 5
+         # Define action and observation space
+         # Actions: 0 - Stay, 1 - Move Up, 2 - Move Down
+         self.action_space = spaces.Discrete(3)
+@@ -733,8 +733,7 @@ class FreewayEnvConstant(gym.Env):
+         if observation_type == "pixel":
+             self.observation_space = spaces.Box(low=0, high=255, shape=(self.frame_stack, 84, 84), dtype=np.uint8)
+         else:
+-            self.max_objects = self.max_cars_init + 4
+-            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.max_objects, 7), dtype=np.float32)
++            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.max_cars+ len(self.lanes)+1, 7), dtype=np.float32)
+ 
+         self.window = pygame.display.set_mode((self.window_width, self.window_height))
+         self.background_image = pygame.image.load("games/images/Atari - background.png")
+@@ -744,10 +743,9 @@ class FreewayEnvConstant(gym.Env):
+         self.car_image = pygame.image.load("games/images/car2.png").convert_alpha()
+         self.car_image = pygame.transform.scale(self.car_image, (self.car_width, self.car_height))
+         self.frame_buffer = np.zeros((self.frame_stack, 84, 84), dtype=np.uint8)
+-        self.player_speed = 0
++
+         self.clock = pygame.time.Clock()
+         self.reset()
+-
+     def seed(self, seed=None):
+         self.np_random, seed = gym.utils.seeding.np_random(seed)
+         random.seed(seed)
+@@ -762,36 +760,27 @@ class FreewayEnvConstant(gym.Env):
+                                        self.window_height - self.player_height - 10,
+                                        self.player_width, self.player_height)
+         self.score = 0
+-        lane_combinations = [[50,80,120],[50,80],[50,120],[80,120]]
+-        number_cars = [10,15,20]
+-        car_speeds = [1,2,3]
+-        self.lanes = random.choice(lane_combinations)
+-        self.max_cars = random.choice(number_cars)
+-        self.car_speed = random.choice(car_speeds)
+         self.cars = [{'x': random.randint(0, self.window_width - self.car_width),
+                       'lane': random.choice(self.lanes),
+-                      'speed': self.car_speed} for car in range(self.max_cars)]
++                      'speed': random.randint(1, 2)} for _ in range(self.max_cars)]
+         self.done = False
+         self.episode_start_time = pygame.time.get_ticks()
+         self.frame_buffer = np.zeros((self.frame_stack, 84, 84), dtype=np.uint8)
+-        self.player_speed = 0
+         if self.observation_type == "pixel":
+             for _ in range(self.frame_stack):
+-                self.frame_buffer.append(self._get_obs())
+-            return np.array(self.frame_buffer), {}
++                self.update_frame_buffer()
++            return self.get_observation(), {}
+         else:
+             return self.get_object_data(), {}
+ 
+     def step(self, action):
++        reward = 0
+         reward = -0.5
+         current_time = pygame.time.get_ticks()
+-        previous_y = self.player_rect.y
+-
+         if action == 1:  # Up
+             self.player_rect.y = max(0, self.player_rect.y - 5)
+         elif action == 2:  # Down
+             self.player_rect.y = min(self.window_height - self.player_height, self.player_rect.y + 5)
+-        self.player_speed = self.player_rect.y - previous_y
+ 
+         for car in self.cars:
+             car['x'] += car['speed']
+@@ -799,40 +788,38 @@ class FreewayEnvConstant(gym.Env):
+                 car['x'] = -random.randint(100, 300)
+                 car['speed'] = random.randint(1,2)
+ 
++        # Collision detection
+         hit = any(self.player_rect.colliderect(pygame.Rect(car['x'], car['lane'], self.car_width, self.car_height)) for car in self.cars)
+         if hit:
++            #self.score = -1
+             self.player_rect.y = self.window_height - self.player_height - 10
++        
+             self.last_time = current_time
+-        done = False
+-       
+-
++        if current_time - self.episode_start_time >= 60000:  # 60000 milliseconds = 1 minute
++            self.done = True
++            
+         if self.player_rect.y <= 0:  # Reached top
+-            self.score += 1
+-            reward += 10 * (len(self.lanes))
++            self.score +=1
++            reward += 10*(len(self.lanes))
++
+             self.player_rect.y = self.window_height - self.player_height - 10
+-        truncated = False
+-        info = {}  
++
+         if self.observation_type == "pixel":
++            self.update_frame_buffer()
+             observation = self.get_observation()
+-            return np.array(self.frame_buffer), reward, done, truncated, info
+         else:
+-            return self.get_object_data(), reward, done, truncated, info
+-
++            observation = self.get_object_data()
+ 
++        return observation, reward, self.done, False, {}
+ 
+-    def _get_obs(self):
++    def update_frame_buffer(self):
+         frame = self.render_to_array()
+-    
+-        # Convert to grayscale
+-        grayscale = rgb2gray(frame)
+-        
+-        # Normalize the grayscale image to enhance contrast
+-        normalized_frame = (grayscale - grayscale.min()) / (grayscale.max() - grayscale.min())
+-        
+-        # Resize the frame
+-        resized_frame = resize(normalized_frame, (84, 84), anti_aliasing=True, mode='reflect', preserve_range=True)
+-        
+-        return resized_frame
++        grayscale = np.dot(frame[..., :3], [0.2989, 0.5870, 0.1140]).astype(np.uint8)  # Convert to grayscale
++        resized_frame = pygame.transform.scale(pygame.surfarray.make_surface(grayscale), (84, 84))
++        frame_array = pygame.surfarray.array3d(resized_frame).transpose(1, 0, 2)[:, :, 0]
++
++        self.frame_buffer = np.roll(self.frame_buffer, shift=-1, axis=0)
++        self.frame_buffer[-1] = frame_array
+ 
+     def render_to_array(self):
+         self.window.blit(self.background_image, (0, 0))
+@@ -846,18 +833,18 @@ class FreewayEnvConstant(gym.Env):
+ 
+     def get_object_data(self):
+         objects = [
+-            [self.player_rect.x, self.player_rect.y, self.player_speed, 0, 1, 0, 0],  # Player
++            [self.player_rect.x, self.player_rect.y, 0, 0, 1, 0, 0],  # Player
+             
+         ] 
+         # add lanes
+         for lane in self.lanes:
+-            objects.append([self.window_width // 2, lane, 0, 0, 0, 1, 0])
++            objects.append([self.window_width//2, lane, 0, 0, 0, 1, 0])
+ 
+-        for car in self.cars:
++        for i, car in enumerate(self.cars):
+             objects.append([car['x'], car['lane'], car['speed'], 0, 0, 0, 1])
+ 
+-        while len(objects) < self.max_objects:
+-            objects.append([0, 0, 0, 0, 0, 0, 0])
++        # while len(objects) < self.max_cars + 10:  # Ensure the list has a constant length
++        #     objects.append([0, 0, 0, 0, 0, 0, 0])
+ 
+         return torch.tensor(objects, dtype=torch.float32)
+ 
+@@ -867,40 +854,7 @@ class FreewayEnvConstant(gym.Env):
+             self.window.blit(self.car_image, (car['x'], car['lane']))
+         self.window.blit(self.player_image, (self.player_rect.x, self.player_rect.y))
+         pygame.display.update()
+-        self.clock.tick(60)
+ 
+     def close(self):
+         pygame.quit()
+ 
+-
+-if __name__=="__main__":
+-    env = FreewayEnvConstant(render_mode='human', observation_type='graph')
+-
+-    #model = PPO.load("best_model")
+-    #model = PPO.load("ppo_freeway_pixel")
+-    #model = PPO.load("logs/Freeway-GNN-training/best_model.zip")
+-    model = PPO.load("ppo_custom_heterognn")
+-
+-    # # Evaluate the agent
+-    # mean_reward, std_reward = evaluate_policy(model, env, n_eval_episodes=1, render=True)
+-    # print(f"Mean reward: {mean_reward} ± {std_reward}")
+-
+-    obs,_ = env.reset()
+-    done = False
+-    total_reward = 0
+-    n_episodes = 10
+-    for i in range(n_episodes):
+-        while not done:
+-            action, _ = model.predict(obs)
+-            #action = env.action_space.sample()
+-            obs, reward, done, _,_ = env.step(action)
+-            total_reward += reward
+-            pygame.time.delay(50)
+-            env.render()
+-
+-        print(f"Episode {i+1}/{n_episodes}: Total reward = {total_reward}")
+-        total_reward = 0
+-        obs,_ = env.reset()
+-        done = False
+-
+-    print(f"Total reward: {total_reward}")
+\ No newline at end of file
+diff --git a/games/model/__pycache__/cnn_model.cpython-310.pyc b/games/model/__pycache__/cnn_model.cpython-310.pyc
+index aaea007..8ce27a0 100644
+Binary files a/games/model/__pycache__/cnn_model.cpython-310.pyc and b/games/model/__pycache__/cnn_model.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_gnn.cpython-310.pyc b/games/model/__pycache__/hetero_gnn.cpython-310.pyc
+index fae3973..212315f 100644
+Binary files a/games/model/__pycache__/hetero_gnn.cpython-310.pyc and b/games/model/__pycache__/hetero_gnn.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc
+index 8b8b9a9..8b90800 100644
+Binary files a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc and b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/policy.cpython-310.pyc b/games/model/__pycache__/policy.cpython-310.pyc
+index 57471c6..9044bb9 100644
+Binary files a/games/model/__pycache__/policy.cpython-310.pyc and b/games/model/__pycache__/policy.cpython-310.pyc differ
+diff --git a/games/model/hetero_gnn.py b/games/model/hetero_gnn.py
+index 141ee67..c1d824c 100644
+--- a/games/model/hetero_gnn.py
++++ b/games/model/hetero_gnn.py
+@@ -11,14 +11,6 @@ from torch_geometric.typing import Adj
+ 
+ from games.model.hetero_message_passing import FanInMP, FanOutMP
+ from torch_geometric.nn import GCNConv, GATConv
+-import torch
+-import torch_geometric as pyg
+-from torch import Tensor
+-from torch.nn import ModuleDict
+-from typing import Dict, Optional, List, Tuple, Union
+-from collections import defaultdict
+-from torch_geometric.data import Batch, HeteroData
+-from torch_geometric.nn import global_add_pool
+ 
+ class HeteroGNN(torch.nn.Module):
+     def __init__(
+@@ -129,122 +121,22 @@ class HeteroGNN(torch.nn.Module):
+         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
+ 
+ 
++class HeteroGCN(torch.nn.Module):
++    def __init__(self, in_channels_dict, out_channels):
++        super(HeteroGCN, self).__init__()
++        self.convs = torch.nn.ModuleDict()
++        for obj_type, in_channels in in_channels_dict.items():
++            self.convs[obj_type] = GCNConv(in_channels, out_channels)
+ 
++    def forward(self, data):
++        for obj_type in data.node_types:
++            x = data[obj_type].x
++            edge_index = data[obj_type, 'to', obj_type].edge_index
++            x = self.convs[obj_type](x, edge_index)
++            x = F.relu(x)
++            data[obj_type].x = x
+ 
+-# class HeteroGNN(torch.nn.Module):
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         num_layer: int,
+-#         obj_type_id: str,
+-#         arity_dict: Dict[str, int],
+-#         input_size: int = 7,  # Assuming initial input size is 7 for obj nodes
+-#         aggr: Optional[Union[str, pyg.nn.aggr.Aggregation]] = "sum",
+-#     ):
+-#         """
+-#         :param hidden_size: The size of object embeddings.
+-#         :param num_layer: Total number of message exchange iterations.
+-#         :param aggr: Aggregation function to be used for message passing.
+-#         :param obj_type_id: The type identifier of objects in the x_dict.
+-#         :param arity_dict: A dictionary mapping predicate names to their arity.
+-#         Creates one MLP for each predicate.
+-#         Note that predicates as well as goal-predicates are meant.
+-#         """
+-#         super().__init__()
+-
+-#         self.hidden_size: int = hidden_size
+-#         self.num_layer: int = num_layer
+-#         self.obj_type_id: str = obj_type_id
+-
+-#         # Initialize Linear layers for each node type based on arity
+-#         self.linear_layers = torch.nn.ModuleDict()
+-#         self.linear_layers[obj_type_id] = torch.nn.Linear(input_size, hidden_size)
+-#         for pred, arity in arity_dict.items():
+-#             if arity > 0:
+-#                 self.linear_layers[pred] = torch.nn.Linear(input_size * arity, hidden_size * arity)
+-
+-#         # Initialize MLPs for each predicate
+-#         mlp_dict = {
+-#             pred: HeteroGNN.mlp(hidden_size * arity, hidden_size * arity, hidden_size * arity)
+-#             for pred, arity in arity_dict.items()
+-#             if arity > 0
+-#         }
+-
+-#         self.obj_to_atom = FanOutMP(mlp_dict, src_name=obj_type_id)
+-
+-#         self.obj_update = HeteroGNN.mlp(
+-#             in_size=(hidden_size + hidden_size), hidden_size=(hidden_size + hidden_size) * 2, out_size=hidden_size
+-#         )
+-
+-#         self.atom_to_obj = FanInMP(
+-#             hidden_size=hidden_size,
+-#             dst_name=obj_type_id,
+-#             aggr=aggr,
+-#         )
+-
+-#         #self.readout = HeteroGNN.mlp(hidden_size, 2 * hidden_size, 1)
+-
+-#     def encode(self, x_dict: Dict[str, Tensor], device: torch.device) -> Dict[str, Tensor]:
+-#         # Apply linear transformation to all node types based on their arity
+-#         for k, v in x_dict.items():
+-#             arity = 1 if k == self.obj_type_id else v.size(1) // self.hidden_size
+-#             x_dict[k] = self.linear_layers[k](v.view(v.size(0), -1)).to(device)
+-#         return x_dict
+-
+-#     def layer(self, x_dict, edge_index_dict):
+-#         out = self.obj_to_atom(x_dict, edge_index_dict)
+-#         x_dict.update(out)
+-#         out = self.atom_to_obj(x_dict, edge_index_dict)
+-#         obj_emb = torch.cat([x_dict[self.obj_type_id], out[self.obj_type_id]], dim=1)
+-#         obj_emb = self.obj_update(obj_emb)
+-#         x_dict[self.obj_type_id] = obj_emb
+-        
+-
+-#     def forward(
+-#         self,
+-#         x_dict: Dict[str, Tensor],
+-#         edge_index_dict: Dict[str, Adj],
+-#         batch_dict: Optional[Dict[str, Tensor]] = None,
+-#     ):
+-#         device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+-#         x_dict = {k: v.to(device) for k, v in x_dict.items() if v.numel() != 0}
+-#         edge_index_dict = {k: v.to(device) for k, v in edge_index_dict.items() if v.numel() != 0}
+-
+-#         x_dict = self.encode(x_dict, device)  # Encode to hidden size
+-
+-#         for _ in range(self.num_layer):
+-#             self.layer(x_dict, edge_index_dict)
+-
+-#         obj_emb = x_dict[self.obj_type_id]
+-#         batch = (
+-#             batch_dict[self.obj_type_id].to(device)
+-#             if batch_dict is not None
+-#             else torch.zeros(obj_emb.shape[0], dtype=torch.long, device=obj_emb.device)
+-#         )
+-#         aggr = pyg.nn.global_add_pool(obj_emb, batch)
+-#         return aggr
+-
+-#     @staticmethod
+-#     def mlp(in_size: int, hidden_size: int, out_size: int):
+-#         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
+-
+-
+-# class HeteroGCN(torch.nn.Module):
+-#     def __init__(self, in_channels_dict, out_channels):
+-#         super(HeteroGCN, self).__init__()
+-#         self.convs = torch.nn.ModuleDict()
+-#         for obj_type, in_channels in in_channels_dict.items():
+-#             self.convs[obj_type] = GCNConv(in_channels, out_channels)
+-
+-#     def forward(self, data):
+-#         for obj_type in data.node_types:
+-#             x = data[obj_type].x
+-#             edge_index = data[obj_type, 'to', obj_type].edge_index
+-#             x = self.convs[obj_type](x, edge_index)
+-#             x = F.relu(x)
+-#             data[obj_type].x = x
+-
+-#         return data
++        return data
+ 
+ class HeteroGAT(torch.nn.Module):
+     def __init__(self, in_channels_dict, out_channels):
+diff --git a/games/model/hetero_message_passing.py b/games/model/hetero_message_passing.py
+index 0b4020c..230410f 100644
+--- a/games/model/hetero_message_passing.py
++++ b/games/model/hetero_message_passing.py
+@@ -1,183 +1,3 @@
+-# import abc
+-# from typing import Any, Dict, List, Optional, Union
+-
+-# import torch
+-# import torch_geometric as pyg
+-# from torch import Tensor
+-# from torch_geometric.nn import Aggregation, SimpleConv
+-# from torch_geometric.nn.conv.hetero_conv import group
+-# from torch_geometric.nn.module_dict import ModuleDict
+-# from torch_geometric.typing import Adj, EdgeType, OptPairTensor
+-
+-
+-# class HeteroRouting(torch.nn.Module):
+-#     """
+-#     Handles heterogeneous message passing very similar to pyg.nn.HeteroConv.
+-#     Instead of specifying a convolution for each EdgeType more generic rules can be used.
+-#     """
+-
+-#     def __init__(self, aggr: Optional[str | Aggregation] = None) -> None:
+-#         super().__init__()
+-#         self.aggr = aggr
+-
+-#     @abc.abstractmethod
+-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
+-#         pass
+-
+-#     @abc.abstractmethod
+-#     def _internal_forward(self, x, edges_index, edge_type: EdgeType):
+-#         pass
+-
+-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
+-#         aggregated: Dict[str, Tensor] = {}
+-#         for key, value in out_dict.items():
+-#             # hetero_conv.group does not yet support Aggregation modules
+-#             if isinstance(self.aggr, Aggregation):
+-#                 out = torch.stack(value, dim=0)
+-#                 out = self.aggr(out, dim=0)
+-#                 if out.dim() == 3 and out.shape[0] == 1:
+-#                     out = out[0]  # TODO Why does Softmax return one dim to much
+-#             else:
+-#                 out = group(value, self.aggr)
+-#             aggregated[key] = out
+-#         return aggregated
+-
+-#     def forward(self, x_dict, edge_index_dict):
+-#         """
+-#         Apply message passing to each edge_index key if the edge-type is accepted.
+-#         Calls the internal forward with a normal homogenous signature of x, edge_index
+-#         :param x_dict: Dictionary with a feature matrix for each node type
+-#         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
+-#         :return: Dictionary with each processed dst as key and their updated embedding as value.
+-#         """
+-       
+-#         out_dict: Dict[str, Any] = {}
+-#         for edge_type in edge_index_dict.keys():
+-#             src, rel, dst = edge_type
+-
+-#             if not self._accept_edge(src, rel, dst):
+-#                 continue
+-
+-#             if src == dst and src in x_dict:
+-#                 x = x_dict[src]
+-#             elif src in x_dict or dst in x_dict:
+-#                 x = (
+-#                     x_dict.get(src, None),
+-#                     x_dict.get(dst, None),
+-#                 )
+-#             else:
+-#                 raise ValueError(
+-#                     f"Neither src ({src}) nor destination ({dst})"
+-#                     + f" found in x_dict ({x_dict})"
+-#                 )
+-
+-#             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
+-#             if dst not in out_dict:
+-#                 out_dict[dst] = [out]
+-#             else:
+-#                 out_dict[dst].append(out)
+-
+-#         return self._group_out(out_dict)
+-
+-
+-# class FanOutMP(HeteroRouting):
+-#     """
+-#      Accepts EdgeTypes with the defined src_name.
+-#     1. For each destination concatenate all embeddings of the source.
+-#     2. Run the destination specific MLP on the concatenated embeddings.
+-#     3. Save the new embedding under the destination key.
+-#     FanOut should be aggregation free in theory.
+-#     Every atom gets only as many messages as the arity of its predicate.
+-#     :param update_mlp_by_dst: An MLP for each possible destination.
+-#         Needs the degree of incoming edges as input and output dimension
+-#     :param src_name: The node-type for which outgoing edges should be accepted.
+-#     """
+-
+-#     def __init__(
+-#         self,
+-#         update_mlp_by_dst: Dict[str, torch.nn.Module],
+-#         src_name: str,
+-#     ) -> None:
+-#         """ """
+-#         super().__init__()
+-#         self.update_mlp_by_dst = ModuleDict(update_mlp_by_dst)
+-#         self.simple = SimpleConv()
+-#         self.src_name = src_name
+-
+-#     def _accept_edge(self, src, rel, dst) -> bool:
+-#         return src == self.src_name
+-
+-#     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
+-#         position = int(edge_type[1])
+-        
+-#         # Debug: Print edge index and node features
+-
+-#         # Ensure edge indices are within bounds
+-#         max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
+-#         if edge_index.max() >= max_index:
+-#             raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
+-        
+-
+-#         out = self.simple(x, edge_index)
+-#         return position, out
+-
+-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
+-#         for dst, value in out_dict.items():
+-#             sorted_out = sorted(value, key=lambda tpl: tpl[0])
+-#             stacked = torch.cat([out for _, out in sorted_out], dim=1)
+-#             out_dict[dst] = self.update_mlp_by_dst[dst](stacked)
+-
+-#         return out_dict
+-
+-
+-# class FanInMP(HeteroRouting):
+-
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         dst_name: str,
+-#         aggr: Optional[Union[str, Aggregation]] = "sum",
+-#     ) -> None:
+-#         super().__init__(aggr)
+-#         self.select = SelectMP(hidden_size)
+-#         self.dst_name = dst_name
+-
+-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
+-#         return dst == self.dst_name
+-
+-#     def _internal_forward(self, x, edges_index, edge_type):
+-#         return self.select(x, edges_index, int(edge_type[1]))
+-
+-
+-# class SelectMP(pyg.nn.MessagePassing):
+-
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         aggr: Optional[str | List[str]] = "sum",
+-#         aggr_kwargs: Optional[Dict[str, Any]] = None,
+-#     ) -> None:
+-#         super().__init__(
+-#             aggr,
+-#             aggr_kwargs=aggr_kwargs,
+-#         )
+-#         self.hidden = hidden_size
+-
+-#     def forward(
+-#         self, x: Union[Tensor, OptPairTensor], edge_index: Adj, position: int
+-#     ) -> Tensor:
+-#         if isinstance(x, Tensor):
+-#             x = (x, x)
+-#         return self.propagate(edge_index, x=x, position=position)
+-
+-#     def message(self, x_j: Tensor, position: int) -> Tensor:
+-#         # Take the i-th hidden-number of elements from the last dimension
+-#         # e.g from [1, 2, 3, 4, 5, 6] with hidden=2 and position=1 -> [3, 4]
+-#         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
+-#         #               split[self.position]
+-#         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
+-#         return sliced
+-
+ import abc
+ from typing import Any, Dict, List, Optional, Union
+ 
+@@ -230,6 +50,7 @@ class HeteroRouting(torch.nn.Module):
+         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
+         :return: Dictionary with each processed dst as key and their updated embedding as value.
+         """
++       
+         out_dict: Dict[str, Any] = {}
+         for edge_type in edge_index_dict.keys():
+             src, rel, dst = edge_type
+@@ -251,7 +72,6 @@ class HeteroRouting(torch.nn.Module):
+                 )
+ 
+             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
+-
+             if dst not in out_dict:
+                 out_dict[dst] = [out]
+             else:
+@@ -289,6 +109,15 @@ class FanOutMP(HeteroRouting):
+ 
+     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
+         position = int(edge_type[1])
++        
++        # Debug: Print edge index and node features
++
++        # Ensure edge indices are within bounds
++        max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
++        if edge_index.max() >= max_index:
++            raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
++        
++
+         out = self.simple(x, edge_index)
+         return position, out
+ 
+@@ -347,4 +176,4 @@ class SelectMP(pyg.nn.MessagePassing):
+         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
+         #               split[self.position]
+         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
+-        return sliced
++        return sliced
+\ No newline at end of file
+diff --git a/games/model/policy.py b/games/model/policy.py
+index 7119db4..2d9ea67 100644
+--- a/games/model/policy.py
++++ b/games/model/policy.py
+@@ -1,5 +1,3 @@
+-import pstats
+-import time
+ import torch as th
+ import torch.nn as nn
+ import gymnasium as gym
+@@ -7,53 +5,48 @@ from stable_baselines3.common.policies import ActorCriticPolicy
+ from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
+ from games.model.hetero_gnn import HeteroGNN
+ from typing import Dict
+-from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
++from games.encoder.GraphEncoder import HeteroGNNEncoderPong
+ from gymnasium import spaces
++import torch
++import torch.nn as nn
++from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
++from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
++from games.model.hetero_gnn import HeteroGNN
+ import torch_geometric as pyg
+ from games.model.cnn_model import CNNgame
+-
++import time
+ class CustomHeteroGNN(BaseFeaturesExtractor):
+     def __init__(self, observation_space, features_dim=64, hidden_size=64, num_layer=2, obj_type_id='obj', arity_dict={'atom': 2}, game = 'pong'):
+         super().__init__(observation_space, features_dim=hidden_size)
+         if game == 'pong':
+             self.encoder = HeteroGNNEncoderPong()
+         elif game == 'freeway':
+-            self.encoder = GraphEncoderFreeway()
++            self.encoder = GraphEncoderFreeway() 
+         elif game == 'pacman':
+             self.encoder = GraphEncoderPacman()
+             self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=8)
+         elif game == 'breakout':
+             self.encoder = GraphEncoderBreakout()
+         
+-        self.counter = 0
+-
+         # set device to mps if available
+-        # self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
++        #self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
+         self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+-        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict).to(self.device)
++        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=7).to(self.device)
++
+ 
+     def forward(self, observations):
+         # Encode observations to a graph using the encoder
+-        self.counter+=1
+-        
+         start = time.time()
+         pyg_data = self.encoder.encode(observations)
+-
+         # if observations.shape[0] >1:
+         #     print(f"Time to encode: {time.time() - start}")
+ 
+-        #pyg_data = pyg_data.to(self.device) 
++        pyg_data = pyg_data.to(self.device) 
+         obj_emb = self.model(pyg_data.x_dict, pyg_data.edge_index_dict, pyg_data.batch_dict)
+         # Flatten or pool the embeddings if necessary to match the expected features_dim
+-        #print(f"Time to encode: {time.time() - start}")
+-        #total_time += 
+-        if self.counter % 2048/64 == 0:
+-            print(f"time to encode step size is: {time.time() - start}")
+-
+         return obj_emb
+ 
+ 
+-# Additional classes for the rest of the code remain unchanged
+ 
+ import torch
+ import torch.nn as nn
+@@ -101,5 +94,4 @@ class CustomCNN(BaseFeaturesExtractor):
+         
+         cnn_output = self.cnn(observations)
+         final_output = self.adjust_to_features_dim(cnn_output)
+-        return final_output
+-
++        return final_output
+\ No newline at end of file
+Submodule games/pacman contains modified content
+diff --git a/games/pacman/config.py b/games/pacman/config.py
+deleted file mode 100644
+index 73568ce..0000000
+--- a/games/pacman/config.py
++++ /dev/null
+@@ -1,40 +0,0 @@
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]+"/games/pacman"
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-# set up the colors 
+-ghostcolor = {}
+-ghostcolor[0] = (255, 0, 0, 255)
+-ghostcolor[1] = (255, 128, 255, 255)
+-ghostcolor[2] = (128, 255, 255, 255)
+-ghostcolor[3] = (255, 128, 0, 255)
+-ghostcolor[4] = (50, 50, 255, 255) # blue, vulnerable ghost
+-ghostcolor[5] = (255, 255, 255, 255) # white, flashing ghost
+\ No newline at end of file
+diff --git a/games/pacman/fruit.py b/games/pacman/fruit.py
+deleted file mode 100644
+index 51e2b1c..0000000
+--- a/games/pacman/fruit.py
++++ /dev/null
+@@ -1,112 +0,0 @@
+-from games.pacman.config import *
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        #self.thisGame = thisGame
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self, thisGame):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            #snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+diff --git a/games/pacman/game.py b/games/pacman/game.py
+deleted file mode 100644
+index 334c813..0000000
+--- a/games/pacman/game.py
++++ /dev/null
+@@ -1,214 +0,0 @@
+-from games.pacman.config import *
+-import os
+-import pygame
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self, thisFruit, player, screen):
+-        self.player = player
+-        self.screen = screen
+-        self.thisFruit = thisFruit
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 4 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self, thisLevel, tileID, tileIDImage, tileIDName):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 1 )
+-        thisLevel.LoadLevel( self.GetLevelNum(), tileID, tileIDImage , tileIDName)
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                #snd_extralife.play()
+-                self.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (self.thisFruit.imFruit[ self.thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self, thisLevel):
+-            
+-        possibleScreenX = self.player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = self.player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        self.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        self.thisLevel.LoadLevel( self.thisGame.GetLevelNum() )
+-        
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+\ No newline at end of file
+diff --git a/games/pacman/ghost.py b/games/pacman/ghost.py
+deleted file mode 100644
+index 628eb75..0000000
+--- a/games/pacman/ghost.py
++++ /dev/null
+@@ -1,174 +0,0 @@
+-from games.pacman.config import *
+-
+-class ghost ():
+-    def __init__ (self, ghostID, path, screen, player):
+-        self.player = player
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.ghostTimer = 0
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self, thisGame, tileID, tileIDImage, ghosts):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if self.player.x > self.x and self.player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif self.player.x < self.x and self.player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif self.player.x > self.x and self.player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif self.player.x < self.x and self.player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            self.screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            self.screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self, thisLevel, tileID):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay(thisLevel, tileID)
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = self.path.FindPath( (self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol) )
+-                self.FollowNextPathWay(thisLevel, tileID)
+-            
+-    def FollowNextPathWay(self, thisLevel, tileID, counter=0, max_recursion_depth=900):
+-        # Stop recursion if the maximum depth is reached
+-        if counter >= max_recursion_depth:
+-            return
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-            else:
+-                # this ghost has reached his destination!!
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1) 
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID['pellet'] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (randRow, randCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1)
+\ No newline at end of file
+diff --git a/games/pacman/images/blue.png b/games/pacman/images/blue.png
+deleted file mode 100644
+index c633636..0000000
+Binary files a/games/pacman/images/blue.png and /dev/null differ
+diff --git a/games/pacman/images/pacman.png b/games/pacman/images/pacman.png
+deleted file mode 100644
+index d005d4d..0000000
+Binary files a/games/pacman/images/pacman.png and /dev/null differ
+diff --git a/games/pacman/images/pink.png b/games/pacman/images/pink.png
+deleted file mode 100644
+index 9614f58..0000000
+Binary files a/games/pacman/images/pink.png and /dev/null differ
+diff --git a/games/pacman/images/play.png b/games/pacman/images/play.png
+deleted file mode 100644
+index 05842b1..0000000
+Binary files a/games/pacman/images/play.png and /dev/null differ
+diff --git a/games/pacman/images/red.png b/games/pacman/images/red.png
+deleted file mode 100644
+index 5c5ea84..0000000
+Binary files a/games/pacman/images/red.png and /dev/null differ
+diff --git a/games/pacman/images/win.png b/games/pacman/images/win.png
+deleted file mode 100644
+index 728ccdf..0000000
+Binary files a/games/pacman/images/win.png and /dev/null differ
+diff --git a/games/pacman/images/yellow.png b/games/pacman/images/yellow.png
+deleted file mode 100644
+index 8db5a0a..0000000
+Binary files a/games/pacman/images/yellow.png and /dev/null differ
+diff --git a/games/pacman/level.py b/games/pacman/level.py
+deleted file mode 100644
+index b5153ee..0000000
+--- a/games/pacman/level.py
++++ /dev/null
+@@ -1,471 +0,0 @@
+-from games.pacman.config import *
+-
+-class level ():
+-    
+-    def __init__ (self, game, player, ghosts, path, Fruit, screen):
+-        self.player = player
+-        self.ghosts = ghosts
+-        self.path = path
+-        self.thisFruit = Fruit
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        self.thisLevel = level
+-        # self.snd_pellet = snd_pellet
+-        # self.snd_powerpellet = snd_powerpellet
+-        self.map = {}
+-        self.thisGame = game
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        self.screen = screen
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > self.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > self.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = self.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-    def GetWallLocations(self):
+-        wallLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.IsWall(row, col):
+-                    wallLocations.append((row, col))
+-        return wallLocations 
+-    
+-    def GetPelletLocations(self):
+-        pelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 2:
+-                    pelletLocations.append((row*16, col*16))
+-        return pelletLocations
+-    
+-    def GetPowerPelletLocations(self):
+-        powerPelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 3:
+-                    powerPelletLocations.append((row, col))
+-        return powerPelletLocations
+-    
+-
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-        
+-    # check if player has hit a pellet, powerpellet or a wall
+-    def CheckIfHit(self, playerX, playerY, row, col, tileID):
+-        
+-            for iRow in range(row - 1, row + 2, 1):
+-                for iCol in range(col - 1, col + 2, 1):
+-                
+-                    if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                        # check the offending tile ID
+-                        result = self.GetMapTile(iRow, iCol)
+-            
+-                        if result == tileID:
+-                            return True   
+-                        elif result >= 100 and result <= 199:
+-                            return True
+-                        else:
+-                            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col, tileID):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = self.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_pellet[self.player.pelletSndNum].play()
+-                        self.player.pelletSndNum = 1 - self.player.pelletSndNum
+-                        
+-                        self.pellets -= 1
+-                        
+-                        self.thisGame.AddToScore(10)
+-                        
+-                        if self.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            self.thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_powerpellet.play()
+-                        
+-                        self.thisGame.AddToScore(100)
+-                        self.thisGame.ghostValue = 200
+-                        
+-                        self.thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if self.ghosts[i].state == 1:
+-                                self.ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, self.thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if self.thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    self.player.x = i * 16
+-                                    
+-                                    if self.player.velX > 0:
+-                                        self.player.x += 16
+-                                    else:
+-                                        self.player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, self.thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if self.thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    self.player.y = i * 16
+-                                    
+-                                    if self.player.velY > 0:
+-                                        self.player.y += 16
+-                                    else:
+-                                        self.player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self, tileID):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self,  tileID):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if self.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if self.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self, tileID, tileIDImage):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, self.thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, self.thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = self.thisGame.screenNearestTilePos[0] + row
+-                actualCol = self.thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        self.screen.blit (self.thisGame.imLogo, (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                        self.screen.blit(self.thisGame.imHiscores,(col*16-self.thisGame.screenPixelOffset[0],row*16-self.thisGame.screenPixelOffset[1]))
+-                    
+-              
+-                    else:
+-                        self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-    
+-    
+-    def GetCrossRef(self, tileIDName, tileID, tileIDImage):
+-        for key, value in tileIDName.items():
+-            thisID = key
+-            if thisID not in NO_GIF_TILES:
+-                tileIDImage[thisID] = pygame.image.load(os.path.join(SCRIPT_PATH, "res", "tiles", value + ".gif")).convert()
+-            else:
+-                tileIDImage[thisID] = pygame.Surface((16, 16))
+-
+-            # Change colors in tileIDImage to match maze colors
+-            for y in range(16):
+-                for x in range(16):
+-                    current_color = tileIDImage[thisID].get_at((x, y))
+-                    if current_color == (255, 206, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeLightColor)
+-                    elif current_color == (132, 0, 132, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.fillColor)
+-                    elif current_color == (255, 0, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeShadowColor)
+-                    elif current_color == (128, 0, 128, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.pelletColor)
+-
+-
+-
+-    def LoadLevel (self, levelNum, tileID, tileIDImage, tileIDName):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    self.thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            self.player.homeX = k * 16
+-                            self.player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the self.ghosts
+-                            
+-                            self.ghosts[thisID - 10].homeX = k * 16
+-                            self.ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        self.GetCrossRef(tileIDName, tileID, tileIDImage)
+-
+-        # load map into the pathfinder object
+-        self.path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, self.path.size[0], 1):
+-            for col in range(0, self.path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    self.path.SetType( row, col, 1 )
+-                else:
+-                    self.path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart(tileID)
+-        
+-    def Restart (self, tileID):
+-        
+-        for i in range(0, 4, 1):
+-            # move self.ghosts back to home
+-
+-            self.ghosts[i].x = self.ghosts[i].homeX
+-            self.ghosts[i].y = self.ghosts[i].homeY
+-            self.ghosts[i].velX = 0
+-            self.ghosts[i].velY = 0
+-            self.ghosts[i].state = 1
+-            self.ghosts[i].speed = 1
+-            self.ghosts[i].Move(self, tileID)
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            self.ghosts[i].currentPath = self.path.FindPath( (self.ghosts[i].nearestRow, self.ghosts[i].nearestCol), (randRow, randCol) )
+-            self.ghosts[i].FollowNextPathWay(self, tileID)
+-            
+-        self.thisFruit.active = False
+-            
+-        self.thisGame.fruitTimer = 0
+-
+-        self.player.x = self.player.homeX
+-        self.player.y = self.player.homeY
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        self.player.animFrame = 3
+-
+-
+diff --git a/games/pacman/pacman.py b/games/pacman/pacman.py
+deleted file mode 100644
+index 70436f3..0000000
+--- a/games/pacman/pacman.py
++++ /dev/null
+@@ -1,686 +0,0 @@
+-import random
+-import pygame
+-import numpy as np
+-from pygame.math import Vector2
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-        # create a 2d grid numpy array of 20x20
+-
+-
+-
+-    
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-        self.ghost_eating = False
+-        self.position = Vector2(x, y)  # Current position as a vector
+-        self.goal = Vector2()  # Goal position initialized to zero vector
+-        self.directions = {
+-            'up': Vector2(0, -1),
+-            'down': Vector2(0, 1),
+-            'left': Vector2(-1, 0),
+-            'right': Vector2(1, 0)
+-        }
+-
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-   
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-    
+-
+-
+-class Ghost(Player):
+-    """
+-    Class to handle ghosts, inheriting from Player.
+-    """
+-    def __init__(self, x, y, filename, game):
+-        super().__init__(x, y, filename)
+-        self.game = game
+-
+-    def update_behavior(self, pacman):
+-        self.mode = "flee" if pacman.ghost_eating else "chase"
+-
+-    def move(self, pacman):
+-        self.update_behavior(pacman)
+-        direction = self.chase_pacman() if self.mode == "chase" else self.run_away_from_pacman()
+-        if direction:
+-            movement = self.calculate_movement(direction)
+-            self.change_speed(*movement)
+-
+-    def chase_pacman(self):
+-        return self.goal_direction(self.game.game_map)
+-
+-    def run_away_from_pacman(self):
+-        furthest_point = self.find_furthest_point()
+-        self.set_goal(*furthest_point)
+-        return self.goal_direction(self.game.game_map)
+-
+-    def find_furthest_point(self):
+-        max_distance = 0
+-        furthest_point = (self.rect.x, self.rect.y)
+-        for y in range(self.game.path_finder.size[0]):
+-            for x in range(self.game.path_finder.size[1]):
+-                if self.game.game_map[y][x] == 0:
+-                    distance = (Vector2(x, y) - self.position).length_squared()
+-                    if distance > max_distance:
+-                        max_distance = distance
+-                        furthest_point = (x, y)
+-        return furthest_point
+-
+-    def goal_direction(self, game_map):
+-        TILEWIDTH = 30
+-        distances = []
+-        directions = list(self.directions.keys())
+-        for direction in directions:
+-            next_position = self.position + self.directions[direction] * TILEWIDTH
+-            if game_map[int(next_position.y // TILEWIDTH)][int(next_position.x // TILEWIDTH)] == 1:
+-                distances.append(float('inf'))
+-            else:
+-                vec = next_position - self.goal
+-                distances.append(vec.length_squared())
+-        if min(distances) == float('inf'):
+-            return None
+-        else:
+-            index = distances.index(min(distances))
+-            return directions[index]
+-
+-    def calculate_movement(self, direction):
+-        movement_map = {
+-            'up': (0, -30),
+-            'down': (0, 30),
+-            'left': (-30, 0),
+-         'right': (30, 0)
+-        }
+-        return movement_map.get(direction, (0, 0)) 
+-    
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.cell_size = 30
+-        self.grid_width = 20
+-        self.grid_height = 20
+-        #self.path_finder = path_finder()
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-       
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        self.block_list = pygame.sprite.RenderPlain()
+-        self.ghost_list = pygame.sprite.RenderPlain()
+-        self.pacman_collide = pygame.sprite.RenderPlain()
+-        self.wall_list = self.setup_walls()
+-
+-        self.gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        self.pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(self.pacman)
+-        self.pacman_collide.add(self.pacman)
+-
+-        self.ghost_two = Ghost(w, b_h, 'images/red.png', self)
+-        self.ghost_list.add(self.ghost_two)
+-        self.all_sprites_list.add(self.ghost_two)
+-
+-        self.ghost_one = Ghost(w, m_h, 'images/pink.png', self)
+-        self.ghost_list.add(self.ghost_one)
+-        self.all_sprites_list.add(self.ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png',self)
+-        self.ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png',self)
+-        self.ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-        grid = [[0 for _ in range(19)] for _ in range(19)]
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, self.wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, self.pacman_collide, False)
+-                    if b_collide:
+-                        grid[row][column] = 1
+-
+-                        continue
+-
+-                    elif p_collide:
+-                        grid[row][column] = 0
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        grid[row][column] = 0
+-                        self.block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # create new grid which is 20x20 with edges as 1 from grid
+-        
+-        new_grid = [[1 if i == 0 or i == 19 or j == 0 or j == 19 else grid[i-1][j-1] for j in range(20)] for i in range(20)] 
+-        self.game_map = new_grid
+-        self.path_finder.ResizeMap(20, 20)
+-        self.update_path_finder_with_walls(new_grid)
+-        blocks = list(self.block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-        self.power_pellet_list = pygame.sprite.RenderPlain()
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            self.power_pellet_list.add(power_pellet)
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        self.bll = len(self.block_list)
+-
+-
+-   
+-
+-    def update_path_finder_with_walls(self, grid):
+-        for i in range(len(grid[0])):
+-            for j in range(len(grid[1])):
+-                self.path_finder.SetType(i,j, grid[i][j])
+-
+-
+-
+-    def get_maze_size(self):
+-        max_width = 0
+-        max_height = 0
+-
+-        for wall in self.walls:
+-            x, y, width, height = wall
+-            # Calculate the furthest extents of the walls
+-            max_width = max(max_width, x + width)
+-            max_height = max(max_height, y + height)
+-
+-        return max_width, max_height
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate 
+-    
+-
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-
+-
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-       
+-
+-        
+-                
+-       
+-
+-        # Get the unique row indices
+-
+-        
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, -30)
+-
+-            self.pacman.update(self.wall_list, self.gate) 
+-
+-            # Assuming new_grid is your grid
+-            
+-
+-            # Check if the two grids are the same
+-            # print(f"new_grid_np: {new_grid_np}")
+-            # print(f"path_finder_grid: {path_finder_grid}")
+-            # print(f"Are the grids equal? {are_grids_equal}")
+-        # whic
+-            #self.ghost_one.move(self.pacman)
+-            self.ghost_two.move(self.pacman)
+-            # ghost_three.move(pacman)
+-            # ghost_four.move(pacman)
+-
+-            # ghost_one.update(wall_list, None)
+-            self.ghost_two.update(self.wall_list, None)
+-            print(f"Ghost Two position: {self.ghost_two.rect.x}, {self.ghost_two.rect.y}")
+-            print("Is Ghost Two in all_sprites_list?", self.ghost_two in self.all_sprites_list)
+-            print("Is Ghost Two in ghost_list?", self.ghost_two in self.ghost_list)
+-            # ghost_three.update(wall_list, None)
+-            # ghost_four.update(wall_list, None)
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(self.pacman, self.block_list, True) 
+-            power_pellets_hit_list = pygame.sprite.spritecollide(self.pacman, self.power_pellet_list, True)
+-            # check if pacman hits any power pellet
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            self.wall_list.draw(self.screen)
+-            self.gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            self.ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(self.bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == self.bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(self.pacman, self.ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_env.py b/games/pacman/pacman_env.py
+deleted file mode 100644
+index e185f02..0000000
+--- a/games/pacman/pacman_env.py
++++ /dev/null
+@@ -1,370 +0,0 @@
+-import gym
+-from gym import spaces
+-import pygame
+-import numpy as np
+-import os
+-import sys
+-from pygame.locals import *
+-import time
+-# Import your game modules
+-from games.pacman.player import pacman
+-from games.pacman.ghost import ghost
+-from games.pacman.path import path_finder
+-from games.pacman.level import level
+-from games.pacman.game import game
+-from games.pacman.fruit import fruit
+-from games.pacman.config import *
+-import networkx as nx
+-from games.encoder.GraphEncoder import GraphConverter
+-
+-class PacmanEnv(gym.Env):
+-    metadata = {'render.modes': ['human', 'rgb_array']}
+-    def __init__(self):
+-        super(PacmanEnv, self).__init__()
+-
+-        # Action space (4 directions)
+-        self.action_space = spaces.Discrete(4)  # [Up, Down, Left, Right]
+-
+-        # Observation space (Assuming a RGB image of the screen)
+-        self.observation_space = spaces.Box(low=0, high=255,
+-                                            shape=(self.window_height, self.window_width, 3 * self.frame_stack),
+-                                            dtype=np.uint8)
+-        # Initialize the game
+-        pygame.init()
+-        self.window = pygame.display.set_mode((1, 1))
+-        img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-        pygame.display.set_caption("Pacman")
+-        self.screen = pygame.display.get_surface()
+-        self.tileID = {}
+-        self.tileIDName = {}
+-        self.tileIDImage = {}
+-        self.NO_GIF_TILES = set()
+-        self.path = path_finder()
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen)
+-        self.frame_stack = 4 
+-        self.window_width = 336
+-        self.window_height = 400
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        self.load_resources()
+-
+-
+-    def load_resources(self):
+-        lineNum = 0
+-        self.SCRIPT_PATH = os.path.dirname(__file__)
+-        res_path = os.path.join(self.SCRIPT_PATH, "res")
+-        # Load background images
+-        self.img_Background = pygame.image.load(os.path.join(res_path, "backgrounds", "1.gif")).convert()
+-        
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-
+-        # Load tile images and other assets by initializing the cross-reference data structures
+-          # Define this properly based on your game's requirements
+-
+-        # Assume crossref.txt has the mappings from tile ID to tile names and their associated images
+-        for i in f.readlines():
+-            # print " ========= Line " + str(lineNum) + " ============ "
+-            while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-            while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-            str_splitBySpace = i.split(' ')
+-            
+-            j = str_splitBySpace[0]
+-                
+-            if (j == "'" or j == "" or j == "#"):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-            else:
+-                # print str(wordNum) + ". " + j
+-                useLine = True
+-            
+-            if useLine == True:
+-                self.tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-                self.tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-                
+-                thisID = int(str_splitBySpace[0])
+-                if not thisID in NO_GIF_TILES:
+-                    self.tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-                else:
+-                        self.tileIDImage[ thisID ] = pygame.Surface((16,16))
+-                
+-                # change colors in tileIDImage to match maze colors
+-                for y in range(0, 16, 1):
+-                    for x in range(0, 16, 1):
+-                    
+-                        if self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                            # wall edge
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeLightColor )
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                            # wall fill
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.fillColor ) 
+-
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeShadowColor )   
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.pelletColor )   
+-                    
+-                # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-            lineNum += 1
+-    
+-    def reset(self):
+-        # Reset the game
+-                # Load resources
+-        #self.load_resources()
+-        
+-        # Game components
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen) 
+-        self.load_resources()
+-        #self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.clock = pygame.time.Clock()
+-        self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.level.LoadLevel( self.game.GetLevelNum(), self.tileID, self.tileIDImage, self.tileIDName )
+-        self.window = pygame.display.set_mode( self.game.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def step(self, action):
+-        reward = 0
+-        done = False
+-        # Map action to game controls
+-        #print(self.game.mode)
+-        if self.game.mode == 1:
+-            if action == 0:
+-                if not self.level.CheckIfHitWall(self.player.x + self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = self.player.speed
+-                    self.player.velY = 0
+-                    
+-            elif action == 1:
+-                if not self.level.CheckIfHitWall(self.player.x - self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = -self.player.speed
+-                    self.player.velY = 0
+-                
+-            elif action == 2:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.speed, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = 0
+-                    self.player.velY = self.player.speed
+-                
+-            elif action == 3:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.speed, self.player.nearestRow, self.player.nearestCol):
+-                    self.player.velX = 0
+-                    self.player.velY = -self.player.speed
+-            # Game logic
+-            
+-            score = self.game.score
+-            self.game.modeTimer += 1
+-            self.player.Move(self.game, self.level, self.ghosts, self.fruit, self.tileID)
+-            for ghost in self.ghosts.values():
+-                ghost.Move(self.level, self.tileID)
+-           
+-            new_score = self.game.score
+-            reward = new_score - score  # Reward for eating pellets
+-            #reward = eaten_pellets * 10  # Reward for eating pellets
+-
+-        elif self.game.mode == 2:
+-                reward = -100
+-                self.game.modeTimer += 1
+-        
+-                if self.game.modeTimer == 90:
+-                    self.level.Restart(self.tileID)
+-                #self.level.Restart(self.tileID)
+-                self.game.lives -= 1
+-                if self.game.lives == -1:
+-                    done = True
+-            
+-        elif self.game.mode == 5:
+-            reward = 100
+-            self.game.mode = 1
+-        
+-        elif self.game.mode == 6:
+-            reward = 1000
+-            done = True
+-
+-
+-        info = self.get_graph_data()  # Additional data, not used now but required by Gym's API
+-
+-            # Get observation
+-        observation = self._get_observation()
+-
+-        return observation, reward, done, info
+-
+-      # Return initial state
+-    def _get_observation(self):
+-        # You can also choose to return other representations of the game state
+-        frame = pygame.surfarray.array3d(pygame.display.get_surface())
+-        frame = frame.transpose((1, 0, 2))  # Correct the shape to (height, width, channels)
+-        # Update frame buffer
+-        self.frame_buffer = np.roll(self.frame_buffer, -3, axis=2)
+-        self.frame_buffer[:, :, -3:] = frame
+-        return self.frame_buffer
+-
+-    
+-    def get_graph_data(self):
+-        # Initialize a NetworkX graph
+-        graph = nx.Graph()
+-
+-        # Define object features and add nodes
+-        pacman_features = [self.player.x, self.player.y, self.player.velX, self.player.velY, 1, 0, 0, 0]
+-        graph.add_node("pacman", type="object", features=pacman_features)
+-
+-        ghost_features = [[ghost.x, ghost.y, ghost.velX, ghost.velY,0,1,0,0] for ghost in self.ghosts.values()]
+-        for i, features in enumerate(ghost_features):
+-            graph.add_node(f"ghost_{i}", type="object", features=features)
+-
+-        pellet_features = [[pellet[0], pellet[1],0,0,0,0,1,0] for pellet in self.level.GetPelletLocations()]
+-        for i, features in enumerate(pellet_features):
+-            graph.add_node(f"pellet_{i}", type="object", features=features)
+-
+-        power_pellet_features = [[pellet[0], pellet[1],0,0,0,0,0,1] for pellet in self.level.GetPowerPelletLocations()]
+-        for i, features in enumerate(power_pellet_features):
+-            graph.add_node(f"power_pellet_{i}", type="object", features=features)
+-
+-        # Combine object positions
+-        object_positions = {
+-            "pacman": pacman_features[:2],
+-        }
+-        for i, ghost in enumerate(self.ghosts.values()):
+-            object_positions[f"ghost_{i}"] = ghost_features[i][:2]
+-        for i, pellet in enumerate(self.level.GetPelletLocations()):
+-            object_positions[f"pellet_{i}"] = pellet_features[i][:2]
+-        for i, power_pellet in enumerate(self.level.GetPowerPelletLocations()):
+-            object_positions[f"power_pellet_{i}"] = power_pellet_features[i][:2]
+-
+-        # Proximity threshold for creating atoms
+-        #proximity_threshold = self.proximity_threshold
+-
+-        # Create atom nodes and edges based on proximity
+-        atom_index = len(object_positions)  # Start indexing atoms after all objects
+-
+-        # Determine wall proximity around Pac-Man
+-        walls = {
+-            'up': self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.velY, self.player.y - 1, self.player.x),
+-            'down': self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.velY, self.player.y + 1, self.player.x),
+-            'left': self.level.CheckIfHitWall(self.player.x - self.player.velX, self.player.y, self.player.y, self.player.x - 1),
+-            'right': self.level.CheckIfHitWall(self.player.x + self.player.velX, self.player.y, self.player.y, self.player.x + 1)
+-        }
+-
+-        standard_feature_vector_size = len(pacman_features)
+-        empty_feature_vector = [0] *(2* standard_feature_vector_size)
+-
+-        # Add wall direction atoms and edges for Pac-Man
+-        for direction, hit in walls.items():
+-            if hit:
+-                atom_node = f"Wall{direction.capitalize()}_{atom_index}"
+-                graph.add_node(atom_node, type="atom", features=empty_feature_vector, predicate=f"Wall{direction.capitalize()}")
+-                graph.add_edge("pacman", atom_node, position=0)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for ghosts
+-        for i, ghost_pos in enumerate(ghost_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(ghost_pos[:2]))
+-            direction = np.array(pacman_features[:2]) - np.array(ghost_pos[:2])
+-            
+-            atom_node_distance = f"Distance_Pacman_Ghost_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"ghost_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-            if pacman_features[0] == ghost_pos[0]:
+-                atom_node_same_row = f"SameRow_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_row, features=empty_feature_vector,type="atom", predicate="SameRow")
+-                graph.add_edge("pacman", atom_node_same_row, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_row, position=1)
+-                atom_index += 1
+-
+-            if pacman_features[1] == ghost_pos[1]:
+-                atom_node_same_column = f"SameColumn_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_column, features=empty_feature_vector, type="atom", predicate="SameColumn")
+-                graph.add_edge("pacman", atom_node_same_column, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_column, position=1)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for pellets
+-        for i, pellet_pos in enumerate(pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_Pellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance, features=empty_feature_vector,type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Add distance and direction atoms and edges for power pellets
+-        for i, power_pellet_pos in enumerate(power_pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(power_pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_PowerPellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"power_pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Create a GraphConverter object
+-        converter = GraphConverter()
+-
+-        # Convert the NetworkX graph to a PyG Data object
+-        data = converter.to_pyg_data(graph)
+-        return data
+-    
+-
+-    
+-    def render(self, mode='human'):
+-        self.screen.blit(self.img_Background, (0, 0))
+-        self.level.DrawMap(self.tileID, self.tileIDImage)
+-        
+-        if self.game.fruitScoreTimer > 0:
+-            if self.game.modeTimer % 2 == 0:
+-                self.game.DrawNumber (2500, self.fruit.x - self.game.screenPixelPos[0] - 16, self.fruit.y - self.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            self.ghosts[i].Draw(self.game,self.tileID, self.tileIDImage, self.ghosts)
+-        self.fruit.Draw(self.game)
+-        self.player.Draw(self.game)
+-        if mode == 'human':
+-            
+-            pygame.display.flip()
+-        elif mode == 'rgb_array':
+-            return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def close(self):
+-        pygame.quit()
+-
+-# Usage Example
+-if __name__ == "__main__":
+-    env = PacmanEnv()
+-    obs = env.reset()
+-    done = False
+-
+-    while not done:
+-        #env.render()  # Ensure the environment is rendered every loop
+-        action = env.action_space.sample()
+-        
+-        obs, reward, done, info = env.step(action)
+-        if reward<0:
+-            print("Ghost collision")
+-        #print(f"Action: {action}, Reward: {reward}")
+-        #time.sleep(0.1)  # Add a delay to make changes observable
+-
+-        if done:
+-            print("Game Over. Restarting...")
+-            obs = env.reset()
+-            done = False
+-            time.sleep(2)  # Pause before restarting
+-
+-    env.close()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_new.py b/games/pacman/pacman_new.py
+deleted file mode 100644
+index 1baea23..0000000
+--- a/games/pacman/pacman_new.py
++++ /dev/null
+@@ -1,1583 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self):
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 3 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                snd_extralife.play()
+-                thisGame.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (thisFruit.imFruit[ thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self):
+-            
+-        possibleScreenX = player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        thisGame.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-        
+-        player.velX = 0
+-        player.velY = 0
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    def draw (self):
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-            
+-                thisTile = self.GetType((row, col))
+-                screen.blit (tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+-class ghost ():
+-    def __init__ (self, ghostID):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if player.x > self.x and player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif player.x < self.x and player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif player.x > self.x and player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif player.x < self.x and player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay()
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                self.FollowNextPathWay()
+-            
+-    def FollowNextPathWay (self):
+-        
+-        # print "Ghost " + str(self.id) + " rem: " + self.currentPath
+-        
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-                    
+-            else:
+-                # this ghost has reached his destination!!
+-                
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                    self.FollowNextPathWay()
+-                
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-                    
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (randRow, randCol) )
+-                    self.FollowNextPathWay()
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-
+-class pacman ():
+-    
+-    def __init__ (self):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self):
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos()[0]+1, thisLevel.GetGhostBoxPos()[1]) )
+-                        ghosts[i].FollowNextPathWay()
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos()
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+-class level ():
+-    
+-    def __init__ (self):
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > thisLevel.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > thisLevel.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = thisLevel.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = thisLevel.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_pellet[player.pelletSndNum].play()
+-                        player.pelletSndNum = 1 - player.pelletSndNum
+-                        
+-                        thisLevel.pellets -= 1
+-                        
+-                        thisGame.AddToScore(10)
+-                        
+-                        if thisLevel.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_powerpellet.play()
+-                        
+-                        thisGame.AddToScore(100)
+-                        thisGame.ghostValue = 200
+-                        
+-                        thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if ghosts[i].state == 1:
+-                                ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    player.x = i * 16
+-                                    
+-                                    if player.velX > 0:
+-                                        player.x += 16
+-                                    else:
+-                                        player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    player.y = i * 16
+-                                    
+-                                    if player.velY > 0:
+-                                        player.y += 16
+-                                    else:
+-                                        player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if thisLevel.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if thisLevel.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = thisGame.screenNearestTilePos[0] + row
+-                actualCol = thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        screen.blit (thisGame.imLogo, (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                            screen.blit(thisGame.imHiscores,(col*16-thisGame.screenPixelOffset[0],row*16-thisGame.screenPixelOffset[1]))
+-                    
+-                    else:
+-                        screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-        
+-    def LoadLevel (self, levelNum):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            player.homeX = k * 16
+-                            player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the ghosts
+-                            
+-                            ghosts[thisID - 10].homeX = k * 16
+-                            ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        GetCrossRef()
+-
+-        # load map into the pathfinder object
+-        path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, path.size[0], 1):
+-            for col in range(0, path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    path.SetType( row, col, 1 )
+-                else:
+-                    path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart()
+-        
+-    def Restart (self):
+-        
+-        for i in range(0, 4, 1):
+-            # move ghosts back to home
+-
+-            ghosts[i].x = ghosts[i].homeX
+-            ghosts[i].y = ghosts[i].homeY
+-            ghosts[i].velX = 0
+-            ghosts[i].velY = 0
+-            ghosts[i].state = 1
+-            ghosts[i].speed = 1
+-            ghosts[i].Move()
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (randRow, randCol) )
+-            ghosts[i].FollowNextPathWay()
+-            
+-        thisFruit.active = False
+-            
+-        thisGame.fruitTimer = 0
+-
+-        player.x = player.homeX
+-        player.y = player.homeY
+-        player.velX = 0
+-        player.velY = 0
+-        
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        player.animFrame = 3
+-
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 3:
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame()
+-            
+-
+-    
+-#      _____________________________________________
+-# ___/  function: Get ID-Tilename Cross References  \______________________________________ 
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-
+-# create the pacman
+-player = pacman()
+-
+-# create a path_finder object
+-path = path_finder()
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i)
+-    
+-# create piece of fruit
+-thisFruit = fruit()
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-# create game and level objects and load first level
+-thisGame = game()
+-thisLevel = level()
+-thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move()
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move()
+-        thisFruit.Move()
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisLevel.Restart()
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen()
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap()
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw()
+-        thisFruit.Draw()
+-        player.Draw()
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+\ No newline at end of file
+diff --git a/games/pacman/pacman_old.py b/games/pacman/pacman_old.py
+deleted file mode 100644
+index fc711fe..0000000
+--- a/games/pacman/pacman_old.py
++++ /dev/null
+@@ -1,970 +0,0 @@
+-import pygame
+-import random
+-import numpy as np
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-
+-
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    
+-        
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-
+-
+-class Ghost(Player):
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor Function
+-        """
+-        super().__init__(x, y, filename)
+-        self.ghost_eating = False 
+-        self.goal = None
+-    """
+-    Class to handle ghosts
+-    """
+-    def flee_or_chase(self, player):
+-        """
+-        Determine if the ghost should flee from or chase the player
+-        :param player: the player character, Pacman
+-        """
+-        if player.ghost_eating:
+-            self.run_away_from_pacman(player)
+-        else:
+-            self.chase_pacman(player)
+-
+-    def run_away_from_pacman(self, player):
+-        """
+-        Set direction away from Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost moves in the opposite direction of Pacman
+-        self.change_x = -5 if dx > 0 else 5
+-        self.change_y = -5 if dy > 0 else 5
+-
+-    def chase_pacman(self, player):
+-        """
+-        Set direction towards Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost reduces the distance to Pacman
+-        self.change_x = 5 if dx > 0 else -5
+-        self.change_y = 5 if dy > 0 else -5
+-
+-    def ghost_change_speed(self, direction_list, ghost, turn, steps, l):
+-        """
+-        Change the speed of the ghost
+-        :param direction_list: 
+-        :type direction_list: 
+-        :param ghost: 
+-        :type ghost: 
+-        :param turn: 
+-        :type turn: 
+-        :param steps: 
+-        :type steps: 
+-        :param l: 
+-        :type l: 
+-        :return: 
+-        :rtype: 
+-        """
+-        try:
+-            z = direction_list[turn][2]
+-            if steps < z:
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps += 1
+-            else:
+-                if turn < l:
+-                    turn += 1
+-                elif ghost == 'ghost_four':
+-                    turn = 2
+-                else:
+-                    turn = 0
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps = 0
+-            return [turn, steps]
+-        except IndexError:
+-            return [0, 0]
+-
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-        self.ghost_one_directions = [
+-            [0, -30, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [-15, 0, 23],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 19],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 7],
+-            [0, 15, 3],
+-            [-15, 0, 19],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.ghost_two_directions = [
+-            [0, -15, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, -15, 15],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 7],
+-            [0, -15, 3],
+-            [15, 0, 15],
+-            [0, 15, 15],
+-            [-15, 0, 3],
+-            [0, 15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 5],
+-        ]
+-
+-        self.ghost_three_directions = [
+-            [30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 10],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 15],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, 15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [-15, 0, 11],
+-            [0, 15, 7],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 15],
+-            [15, 0, 15],
+-            [0, 15, 3],
+-            [-15, 0, 15],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 1],
+-        ]
+-
+-        self.ghost_four_directions = [
+-            [-30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 5],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 7],
+-            [0, 15, 15],
+-            [15, 0, 15],
+-            [0, -15, 3],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-        pl = len(self.ghost_one_directions) - 1
+-        bl = len(self.ghost_two_directions) - 1
+-        il = len(self.ghost_three_directions) - 1
+-        cl = len(self.ghost_four_directions) - 1
+-
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        block_list = pygame.sprite.RenderPlain()
+-        ghost_list = pygame.sprite.RenderPlain()
+-        pacman_collide = pygame.sprite.RenderPlain()
+-        wall_list = self.setup_walls()
+-
+-        gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(pacman)
+-        pacman_collide.add(pacman)
+-
+-        ghost_two = Ghost(w, b_h, 'images/red.png')
+-        ghost_list.add(ghost_two)
+-        self.all_sprites_list.add(ghost_two)
+-
+-        ghost_one = Ghost(w, m_h, 'images/pink.png')
+-        ghost_list.add(ghost_one)
+-        self.all_sprites_list.add(ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png')
+-        ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png')
+-        ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, pacman_collide, False)
+-                    if b_collide:
+-                        continue
+-                    elif p_collide:
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # Randomly select four blocks
+-        blocks = list(block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        bll = len(block_list)
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, -30)
+-
+-            pacman.update(wall_list, gate)
+-            returned = ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            p_turn = returned[0]
+-            p_steps = returned[1]
+-            ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            ghost_one.update(wall_list, False)
+-
+-            returned = ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            b_turn = returned[0]
+-            b_steps = returned[1]
+-            ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            ghost_two.update(wall_list, False)
+-
+-            returned = ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            i_turn = returned[0]
+-            i_steps = returned[1]
+-            ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            ghost_three.update(wall_list, False)
+-
+-            returned = ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            c_turn = returned[0]
+-            c_steps = returned[1]
+-            ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            ghost_four.update(wall_list, False)
+-
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(pacman, block_list, True) 
+-            # check if pacman hits any power pellet
+-            pellet_hit_list = pygame.sprite.spritecollide(pacman, self.power_pellets,True)
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            wall_list.draw(self.screen)
+-            gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(pacman, ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_test.py b/games/pacman/pacman_test.py
+deleted file mode 100644
+index dab7b16..0000000
+--- a/games/pacman/pacman_test.py
++++ /dev/null
+@@ -1,366 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-from player import pacman
+-from ghost import ghost
+-from path import path_finder
+-from level import level
+-from game import game
+-from fruit import fruit
+-from config import *
+-
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 4 :
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame(thisLevel, tileID, tileIDImage, tileIDName)
+-            
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-    
+-#      _____________________________
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-# create a path_finder object
+-
+-f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-# ANDY -- edit
+-#fileOutput = f.read()
+-#str_splitByLine = fileOutput.split('\n')
+-
+-lineNum = 0
+-useLine = False
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-
+-path = path_finder()
+-
+-# create pacman object
+-player = pacman(path, screen)
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i, path, screen, player)
+-    
+-# create piece of fruit
+-thisFruit = fruit() 
+-
+-
+-
+-
+-
+-# create game and level objects and load first level
+-thisGame = game(thisFruit, player, screen)
+-thisLevel = level( thisGame, player, ghosts, path, thisFruit, screen)
+-for i in f.readlines():
+-    # print " ========= Line " + str(lineNum) + " ============ "
+-    while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-    while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-    str_splitBySpace = i.split(' ')
+-    
+-    j = str_splitBySpace[0]
+-        
+-    if (j == "'" or j == "" or j == "#"):
+-        # comment / whitespace line
+-        # print " ignoring comment line.. "
+-        useLine = False
+-    else:
+-        # print str(wordNum) + ". " + j
+-        useLine = True
+-    
+-    if useLine == True:
+-        tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-        tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-        
+-        thisID = int(str_splitBySpace[0])
+-        if not thisID in NO_GIF_TILES:
+-            tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-        else:
+-                tileIDImage[ thisID ] = pygame.Surface((16,16))
+-        
+-        # change colors in tileIDImage to match maze colors
+-        for y in range(0, 16, 1):
+-            for x in range(0, 16, 1):
+-            
+-                if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                    # wall edge
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                    # wall fill
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-            
+-        # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-    lineNum += 1
+-thisLevel.LoadLevel( thisGame.GetLevelNum(), tileID, tileIDImage, tileIDName )
+-thisGame.StartNewGame( thisLevel, tileID, tileIDImage, tileIDName )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-print(tileID)
+-
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move(thisGame, thisLevel, ghosts, thisFruit, tileID)
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move(thisLevel, tileID)
+-        thisFruit.Move(thisGame)
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            # close the game
+-            #pygame.quit()
+-            thisLevel.Restart(tileID)
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        print("Game Over")
+-        running = False
+-        #pygame.quit()
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        print("Waiting to start")
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen(thisLevel)
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap(tileID, tileIDImage)
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw(thisGame, tileID, tileIDImage, ghosts)
+-        thisFruit.Draw(thisGame)
+-        player.Draw(thisGame)
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+-
+diff --git a/games/pacman/path.py b/games/pacman/path.py
+deleted file mode 100644
+index bd3d8a6..0000000
+--- a/games/pacman/path.py
++++ /dev/null
+@@ -1,238 +0,0 @@
+-from games.pacman.config import *
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self,):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    # def draw (self):
+-    #     for row in range(0, self.size[0], 1):
+-    #         for col in range(0, self.size[1], 1):
+-            
+-    #             thisTile = self.GetType((row, col))
+-    #             screen.blit (self.tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+\ No newline at end of file
+diff --git a/games/pacman/player.py b/games/pacman/player.py
+deleted file mode 100644
+index 6ddd81e..0000000
+--- a/games/pacman/player.py
++++ /dev/null
+@@ -1,153 +0,0 @@
+-import pygame 
+-import os
+-from games.pacman.config import SCRIPT_PATH
+-class pacman ():
+-    
+-    def __init__ (self, path, screen):
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self, thisGame, thisLevel, ghosts, thisFruit, tileID):   
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol, tileID)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        #snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = self.path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos(tileID)[0]+1, thisLevel.GetGhostBoxPos(tileID)[1]) )
+-                        ghosts[i].FollowNextPathWay(thisLevel, tileID)
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    #snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos(tileID)
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = self.path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        self.screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+\ No newline at end of file
+diff --git a/games/pacman/res/VeraMoBd.ttf b/games/pacman/res/VeraMoBd.ttf
+deleted file mode 100644
+index 9be6547..0000000
+Binary files a/games/pacman/res/VeraMoBd.ttf and /dev/null differ
+diff --git a/games/pacman/res/backgrounds/1.gif b/games/pacman/res/backgrounds/1.gif
+deleted file mode 100644
+index fddeb90..0000000
+Binary files a/games/pacman/res/backgrounds/1.gif and /dev/null differ
+diff --git a/games/pacman/res/crossref.txt b/games/pacman/res/crossref.txt
+deleted file mode 100644
+index bfb3780..0000000
+--- a/games/pacman/res/crossref.txt
++++ /dev/null
+@@ -1,68 +0,0 @@
+-'    ____                  ____             ____
+-'   / __/_ _____  ___ ____/ __/__________  / / /
+-'  _\ \/ // / _ \/ -_) __/\ \/ __/ __/ _ \/ / / 
+-' /___/\_,_/ .__/\__/_/ /___/\__/_/  \___/_/_/  
+-'         /_/                  game engine
+-'
+-' Cross-reference for tiles and sprites.
+-'
+-' Syntax for each line is:
+-'      [number] [tilename] [tile description]
+-' Ex.  5130 wirecornerul upper-left corner of wire path
+-'
+-' Tile numbers may go from 1-32767. (Tile 0 is empty space.)
+-' Tiles 9000-9999 are invisible during gameplay.
+-'
+-' Commands:
+-'      # tiles              < tile declarations start here
+-'      # sprites            < sprite descriptions start here
+-' __________________________________________________________
+-
+-
+-# tiles
+-
+-1 ghost-door wall of the ghost box
+-2 pellet a normal pellet (required)
+-3 pellet-power a power pellet (makes pac-man invincible)
+-4 start the starting position for pac-man
+-
+-10 ghost-blinky blinky
+-11 ghost-pinky pinky
+-12 ghost-inky inky
+-13 ghost-sue sue
+-
+-20 door-h horizontal door (flip to other side of maze)
+-21 door-v vertical door (flip to other side of maze)
+-22 showlogo causes the logo to be drawn
+-23 hiscores generate and draw a hi-score list
+-
+-100 wall-straight-horiz a horizontal wall
+-101 wall-straight-vert a vertical wall
+-
+-105 wall-corner-ll lower-left corner of a wall
+-106 wall-corner-lr lower-right corner of a wall
+-107 wall-corner-ul upper-left corner of a wall
+-108 wall-corner-ur upper-right corner of a wall
+-
+-110 wall-end-b bottom end of a wall
+-111 wall-end-l left end of a wall
+-112 wall-end-r right end of a wall
+-113 wall-end-t top end of a wall
+-
+-120 wall-nub a one-tile "nub" wall
+-
+-130 wall-t-bottom a "T"-shaped wall, bottom-orientation
+-131 wall-t-left a "T"-shaped wall, left-orientation
+-132 wall-t-right a "T"-shaped wall, right-orientation
+-133 wall-t-top a "T"-shaped wall, top-orientation
+-
+-140 wall-x a four-way wall
+-
+-300 glasses ghost glasses
+-
+-500 x-paintwall use this tile to paint walls automatically
+-
+-
+-
+-# sprites
+-
+diff --git a/games/pacman/res/hiscore.txt b/games/pacman/res/hiscore.txt
+deleted file mode 100644
+index 48bdfbf..0000000
+--- a/games/pacman/res/hiscore.txt
++++ /dev/null
+@@ -1,6 +0,0 @@
+-135260 David
+-100000 David
+-80000 Andy
+-60000 Count Pacula
+-40000 Cleopacra
+-24790 User
+diff --git a/games/pacman/res/levels/0.txt b/games/pacman/res/levels/0.txt
+deleted file mode 100644
+index cd90d89..0000000
+--- a/games/pacman/res/levels/0.txt
++++ /dev/null
+@@ -1,48 +0,0 @@
+-# lvlwidth 35
+-# lvlheight 35
+-# bgcolor 0 0 0
+-# edgelightcolor 0 0 255
+-# edgeshadowcolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 107 100 100 100 100 100 100 100 108 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 100 100 100 100 100 100 106 2 0 0 0 0 0 2 105 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-20 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 4 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 20 
+-120 0 111 100 100 100 100 100 100 100 100 100 100 108 2 0 0 0 0 0 2 107 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 100 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 107 112 1 111 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 101 11 12 13 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/1.txt b/games/pacman/res/levels/1.txt
+deleted file mode 100644
+index f6a84e6..0000000
+--- a/games/pacman/res/levels/1.txt
++++ /dev/null
+@@ -1,37 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgecolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 3 120 2 113 2 111 100 108 2 107 100 112 2 113 2 120 3 101 0 
+-0 101 2 2 2 101 2 2 2 101 2 101 2 2 2 101 2 2 2 101 0 
+-0 101 2 111 100 106 2 113 2 110 2 110 2 113 2 105 100 112 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 120 2 111 100 130 100 112 2 111 100 130 100 112 2 120 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 113 2 111 100 100 100 100 100 112 2 113 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 0 0 10 0 0 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 105 112 2 107 112 1 111 108 2 111 106 2 105 100 100 112 
+-20 0 0 0 2 0 0 2 101 11 12 13 101 2 0 0 2 0 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 0 0 2 0 0 0 0 0 2 0 0 2 2 2 101 0 
+-0 101 2 120 2 107 112 2 111 100 100 100 112 2 111 108 2 120 2 101 0 
+-0 101 2 2 2 101 2 2 0 0 4 0 0 2 2 101 2 2 2 101 0 
+-0 105 133 112 2 110 2 111 100 100 133 100 100 112 2 110 2 111 133 106 0 
+-0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 0 0 
+-0 0 101 2 111 112 2 111 108 2 101 2 107 112 2 111 112 2 101 0 0 
+-107 100 106 2 2 2 2 2 101 2 101 2 101 2 2 2 2 2 105 100 108 
+-101 2 2 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 2 2 101 
+-101 3 120 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 120 3 101 
+-101 2 2 2 107 100 100 100 100 108 0 107 100 100 100 100 108 2 2 2 101 
+-105 100 100 100 106 0 0 0 0 110 21 110 0 0 0 0 105 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/10.txt b/games/pacman/res/levels/10.txt
+deleted file mode 100644
+index e254045..0000000
+--- a/games/pacman/res/levels/10.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 128 0 64
+-# fillcolor 215 0 107
+-# pelletcolor 0 255 0
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 120 2 111 100 108 2 111 100 112 2 107 100 112 2 120 3 105 112 
+-20 0 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 0 20 
+-111 100 100 112 2 120 2 110 2 113 2 113 2 110 2 120 2 111 100 100 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-111 108 0 120 2 113 2 111 100 106 2 105 100 112 2 113 2 120 0 107 112 
+-0 101 2 2 2 101 2 0 0 0 10 0 0 0 2 101 2 2 2 101 0 
+-0 101 2 111 100 130 112 2 107 112 1 111 108 2 111 130 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 2 101 0 
+-0 101 2 111 133 100 112 2 105 100 100 100 106 2 111 100 133 112 2 101 0 
+-0 101 2 2 101 2 2 2 0 0 0 0 0 2 2 2 101 2 2 101 0 
+-0 131 112 2 110 2 107 100 112 0 113 0 111 100 108 2 110 2 111 132 0 
+-0 101 2 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 2 101 0 
+-111 106 2 120 0 111 106 2 120 2 101 2 120 2 105 112 0 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 20 
+-111 100 100 112 2 111 108 2 111 100 130 100 112 2 107 112 2 111 100 100 112 
+-20 0 2 2 2 2 101 2 2 2 4 2 2 2 101 2 2 2 2 0 20 
+-111 108 3 111 112 2 105 100 112 2 120 2 111 100 106 2 111 112 3 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/11.txt b/games/pacman/res/levels/11.txt
+deleted file mode 100644
+index c546ac7..0000000
+--- a/games/pacman/res/levels/11.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 203 211 44
+-# edgeshadowcolor 0 64 0
+-# fillcolor 0 0 0
+-# pelletcolor 255 0 0
+-# fruittype 1
+-
+-# startleveldata
+-113 21 107 100 100 100 100 100 100 100 133 100 100 100 100 100 100 100 108 21 113 
+-101 0 110 0 0 2 2 2 2 2 110 2 2 2 2 2 0 0 110 0 101 
+-101 0 0 0 113 2 113 2 113 2 2 2 113 2 113 2 113 0 0 0 101 
+-131 100 100 100 106 3 110 2 110 2 113 2 110 2 110 3 105 100 100 100 132 
+-101 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 100 112 2 113 0 111 100 140 100 112 0 113 2 111 100 108 2 101 
+-101 2 101 2 2 2 101 0 0 0 101 0 0 0 101 2 2 2 101 2 101 
+-101 2 110 2 111 100 130 100 112 0 110 0 111 100 130 100 112 2 110 2 101 
+-101 2 2 2 0 0 0 0 0 0 10 0 0 0 0 0 0 2 2 2 101 
+-101 2 111 100 100 100 108 0 107 112 1 111 108 0 107 100 100 100 112 2 101 
+-101 2 2 2 2 2 110 0 101 11 12 13 101 0 110 2 2 2 2 2 101 
+-105 100 100 100 112 2 2 2 131 100 100 100 132 2 2 2 111 100 100 100 106 
+-20 0 0 0 0 0 113 2 110 0 0 0 110 2 113 0 0 0 0 0 20 
+-107 100 100 100 100 100 106 2 0 0 113 0 0 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 111 100 140 100 112 2 2 2 2 2 2 2 101 
+-101 2 113 2 107 100 108 0 0 0 101 0 0 0 107 100 108 2 113 2 101 
+-101 2 101 2 110 0 105 100 112 0 110 0 111 100 106 0 110 2 101 2 101 
+-101 2 101 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 101 2 101 
+-101 2 110 2 120 2 111 100 108 2 113 2 107 100 112 2 120 2 110 2 101 
+-101 2 2 2 3 2 2 2 101 2 101 2 101 2 2 2 3 2 2 2 101 
+-101 0 113 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 113 0 101 
+-101 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 101 
+-110 21 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/12.txt b/games/pacman/res/levels/12.txt
+deleted file mode 100644
+index 137aad1..0000000
+--- a/games/pacman/res/levels/12.txt
++++ /dev/null
+@@ -1,40 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 27
+-# bgcolor 0 0 0
+-# edgelightcolor 52 61 139
+-# edgeshadowcolor 35 41 95
+-# fillcolor 0 0 0
+-# pelletcolor 238 183 128
+-# fruittype 3
+-
+-# startleveldata
+-111 112 21 111 100 100 100 100 100 100 100 100 100 100 100 100 100 112 21 111 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 107 100 100 100 100 100 100 100 100 100 100 100 100 100 108 2 107 112 
+-0 101 2 101 22 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-0 101 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-111 106 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 105 112 
+-20 0 2 105 100 100 133 100 100 100 133 100 100 100 133 100 100 106 2 0 20 
+-111 108 2 2 2 2 110 2 2 2 110 2 2 2 110 2 2 2 2 107 112 
+-0 101 2 111 108 2 2 2 113 0 10 0 113 2 2 2 107 112 2 101 0 
+-0 101 2 2 110 0 120 0 131 112 1 111 132 0 120 0 110 2 2 101 0 
+-0 131 108 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 107 132 0 
+-111 130 106 2 111 100 112 2 105 100 100 100 106 2 111 100 112 2 105 130 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 113 2 120 2 113 2 120 0 120 2 113 2 120 2 113 2 107 112 
+-0 101 2 101 2 2 2 101 2 2 4 2 2 101 2 2 2 101 2 101 0 
+-0 101 2 110 2 111 100 130 100 112 0 111 100 130 100 112 2 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 2 120 3 120 2 120 2 113 2 113 2 120 2 120 3 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 2 0 20 
+-111 108 2 111 100 112 2 111 100 106 2 105 100 112 2 111 100 112 2 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 100 133 100 100 100 100 100 100 108 0 0 0 
+-0 107 100 106 2 2 2 2 2 2 110 2 2 2 2 2 2 105 100 108 0 
+-0 101 2 2 2 107 100 100 108 2 2 2 107 100 100 108 2 2 2 101 0 
+-0 110 21 111 100 106 0 0 105 100 100 100 106 0 0 105 100 112 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/2.txt b/games/pacman/res/levels/2.txt
+deleted file mode 100644
+index b65a9eb..0000000
+--- a/games/pacman/res/levels/2.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 33
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 85 0 170
+-# fillcolor 128 0 255
+-# pelletcolor 255 255 255
+-# fruittype 2
+-
+-# startleveldata
+-0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 
+-0 101 0 105 100 100 100 100 100 100 133 100 100 100 100 106 0 105 100 100 100 100 133 100 100 100 100 100 100 106 0 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 111 112 2 113 2 113 2 110 2 111 100 100 100 133 100 100 100 112 2 110 2 113 2 113 2 111 112 3 105 112 
+-20 0 2 2 2 2 101 2 101 0 0 2 2 2 2 2 101 2 2 2 2 2 0 0 101 2 101 2 2 2 2 0 20 
+-111 108 0 111 100 100 106 2 105 100 112 2 111 100 108 0 101 0 107 100 112 2 111 100 106 2 105 100 100 112 0 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 0 0 110 0 110 0 110 0 0 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 131 100 100 112 2 111 100 108 2 107 100 112 0 0 0 10 0 0 0 111 100 108 2 107 100 112 2 111 100 100 132 0 
+-0 101 2 2 2 2 2 2 110 2 110 0 0 0 107 112 1 111 108 0 0 0 110 2 110 2 2 2 2 2 2 101 0 
+-0 101 2 120 0 111 112 2 2 2 2 2 113 0 101 11 12 13 101 0 113 2 2 2 2 2 111 112 0 120 2 101 0 
+-0 101 2 2 2 2 2 2 120 0 111 100 132 2 105 100 100 100 106 2 131 100 112 0 120 2 2 2 2 2 2 101 0 
+-0 101 2 111 100 100 112 2 2 2 3 2 110 2 2 2 2 2 2 2 110 2 3 2 2 2 111 100 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 113 0 113 2 2 2 113 2 113 2 113 2 2 2 113 0 113 2 2 2 2 2 2 101 0 
+-0 101 2 111 112 0 120 2 110 0 110 2 111 100 106 2 110 2 105 100 112 2 110 0 110 2 120 0 111 112 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 107 112 0 111 100 100 100 112 0 111 100 133 100 112 0 111 100 100 100 112 0 111 108 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 101 2 113 2 111 133 100 100 100 108 2 110 2 107 100 100 100 133 112 2 113 2 101 2 105 100 100 112 
+-20 0 0 0 2 101 2 101 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 101 2 101 2 0 0 0 20 
+-111 108 0 120 3 110 2 105 112 2 110 2 113 2 110 2 120 2 110 2 113 2 110 2 111 106 2 110 3 120 0 107 112 
+-0 101 0 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 0 101 0 
+-0 101 0 107 100 100 100 100 100 100 100 100 130 100 100 108 0 107 100 100 130 100 100 100 100 100 100 100 100 108 0 101 0 
+-0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/3.txt b/games/pacman/res/levels/3.txt
+deleted file mode 100644
+index e72d1c4..0000000
+--- a/games/pacman/res/levels/3.txt
++++ /dev/null
+@@ -1,38 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgelightcolor 251 233 130
+-# edgeshadowcolor 124 70 16
+-# fillcolor 225 151 51
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 108 0 101 0 101 0 107 100 100 100 100 100 100 112 
+-20 0 3 2 2 2 2 101 0 101 0 101 0 101 2 2 2 2 3 0 20 
+-111 108 2 107 100 108 2 101 0 101 0 101 0 101 2 107 100 108 2 107 112 
+-0 101 2 101 0 101 2 105 100 106 0 105 100 106 2 101 0 101 2 101 0 
+-0 101 2 101 0 101 2 2 2 2 2 2 2 2 2 101 0 101 2 101 0 
+-0 101 2 101 0 131 133 133 133 133 133 133 133 133 133 132 0 101 2 101 0 
+-0 101 2 131 133 140 140 130 130 130 130 130 130 130 140 140 133 132 2 101 0 
+-0 101 2 105 130 130 106 2 2 2 10 2 2 2 105 130 130 106 2 101 0 
+-0 101 0 2 2 0 0 2 107 112 1 111 108 2 0 0 2 2 0 101 0 
+-0 105 100 108 2 107 108 2 101 11 12 13 101 2 107 108 2 107 100 106 0 
+-0 0 0 101 2 105 106 2 105 100 100 100 106 2 105 106 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 113 2 107 100 100 100 100 100 108 2 113 2 101 0 0 0 
+-0 0 0 101 0 101 2 110 0 0 4 0 0 110 2 101 0 101 0 0 0 
+-0 107 100 106 0 101 2 2 2 111 133 112 2 2 2 101 0 105 100 108 0 
+-0 101 2 2 2 110 2 113 2 2 101 2 2 113 2 110 2 2 2 101 0 
+-0 101 2 113 0 0 2 131 108 2 101 2 107 132 2 0 0 113 2 101 0 
+-111 106 2 105 100 108 2 105 106 2 110 2 105 106 2 107 100 106 2 105 112 
+-20 0 3 2 2 101 2 2 2 2 0 2 2 2 2 101 2 2 3 0 20 
+-111 100 100 108 2 110 2 111 100 100 133 100 100 112 2 110 2 107 100 100 112 
+-0 0 0 101 0 2 2 2 2 2 110 2 2 2 2 2 0 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 2 2 2 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 105 108 0 107 106 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/4.txt b/games/pacman/res/levels/4.txt
+deleted file mode 100644
+index 11394c2..0000000
+--- a/games/pacman/res/levels/4.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 128 255 0
+-# edgeshadowcolor 128 255 0
+-# fillcolor 0 128 0
+-# pelletcolor 0 255 255
+-# fruittype 4
+-
+-# startleveldata
+-107 100 100 100 108 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-101 3 2 2 105 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-101 2 113 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-101 2 105 133 100 108 2 111 100 108 2 107 100 112 2 107 100 108 2 101 0 
+-101 2 2 101 0 101 2 2 2 101 2 101 2 2 2 101 0 101 2 101 0 
+-105 108 2 105 100 106 2 113 2 110 2 110 2 113 2 105 100 106 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 113 2 111 100 130 100 112 2 111 100 130 100 112 2 113 2 101 0 
+-0 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 
+-0 101 2 110 2 113 2 111 100 100 100 100 100 112 2 113 2 110 2 101 0 
+-0 101 3 2 2 101 2 2 0 0 10 0 0 2 2 101 2 2 3 101 0 
+-111 130 100 112 2 105 112 2 107 112 1 111 108 2 111 106 2 111 100 130 112 
+-20 0 0 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 113 0 107 112 2 111 100 100 100 112 2 111 108 0 113 2 101 0 
+-0 101 2 101 0 101 2 2 0 0 4 0 0 2 2 101 0 101 2 101 0 
+-0 101 2 110 0 110 2 111 100 100 133 100 100 112 2 110 0 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 120 2 120 2 111 112 2 110 2 111 112 2 120 2 120 2 101 0 
+-0 101 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-0 105 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/5.txt b/games/pacman/res/levels/5.txt
+deleted file mode 100644
+index 74a735a..0000000
+--- a/games/pacman/res/levels/5.txt
++++ /dev/null
+@@ -1,78 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 65
+-# bgcolor 0 0 0
+-# edgelightcolor 255 0 128
+-# edgeshadowcolor 0 0 0
+-# fillcolor 0 0 0
+-# pelletcolor 0 0 255
+-# fruittype 4
+-
+-# startleveldata
+-113 21 113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 113 21 113 
+-101 0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 101 
+-101 0 0 0 2 2 2 2 2 0 0 0 2 2 2 2 2 0 0 0 101 
+-131 100 100 112 3 120 2 113 2 111 100 112 2 113 2 120 3 111 100 100 132 
+-101 2 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 2 101 
+-101 2 111 108 2 111 100 140 100 112 2 111 100 140 100 112 2 107 112 2 101 
+-101 2 2 101 2 2 2 101 2 2 2 2 2 101 2 2 2 101 2 2 101 
+-131 112 2 101 2 113 2 110 2 111 133 112 2 110 2 113 2 101 2 111 132 
+-101 2 2 101 2 101 2 2 2 2 101 2 2 2 2 101 2 101 2 2 101 
+-101 2 111 132 2 105 100 100 112 2 110 2 111 100 100 106 2 131 112 2 101 
+-101 2 2 101 2 2 2 2 2 2 0 2 2 2 2 2 2 101 2 2 101 
+-105 108 2 110 2 113 2 120 2 111 100 112 2 120 2 113 2 110 2 107 106 
+-0 101 2 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 2 101 0 
+-111 130 100 112 2 105 100 100 100 108 2 107 100 100 100 106 2 111 100 130 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-107 100 100 100 100 100 100 112 2 110 2 110 2 111 100 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 108 3 120 0 113 0 111 133 112 0 113 0 120 3 107 108 2 101 
+-101 2 131 132 2 0 0 101 0 0 101 0 0 101 0 0 2 131 132 2 101 
+-101 2 131 132 2 111 100 130 112 0 101 0 111 130 100 112 2 131 132 2 101 
+-101 2 131 132 2 2 2 2 2 2 101 2 2 2 2 2 2 131 132 2 101 
+-101 2 131 132 2 107 112 2 113 2 110 2 113 2 111 108 2 131 132 2 101 
+-101 2 131 132 2 110 2 2 101 2 2 2 101 2 2 110 2 131 132 2 101 
+-101 2 131 132 2 0 2 111 132 0 120 0 131 112 2 0 2 131 132 2 101 
+-101 2 131 132 2 113 2 2 101 0 0 0 101 2 2 113 2 131 132 2 101 
+-101 2 131 106 2 105 112 2 110 0 113 0 110 2 111 106 2 105 132 2 101 
+-110 2 101 0 2 2 2 2 2 2 101 2 2 2 2 2 2 0 101 2 110 
+-20 2 101 0 111 112 2 107 112 2 101 2 111 108 2 111 112 0 101 2 20 
+-113 2 101 2 2 2 2 101 2 2 101 2 2 101 2 2 2 2 101 2 113 
+-101 2 101 2 113 2 111 106 2 111 130 112 2 105 112 2 113 2 101 2 101 
+-101 2 101 2 101 2 2 2 2 0 0 0 2 2 2 2 101 2 101 2 101 
+-101 2 101 2 105 100 100 100 112 0 113 0 111 100 100 100 106 2 101 2 101 
+-101 2 101 2 2 2 2 0 0 0 101 0 0 0 2 2 2 2 101 2 101 
+-101 2 101 3 111 112 2 111 100 100 130 100 100 112 2 111 112 3 101 2 101 
+-101 2 101 2 2 2 2 2 0 0 10 0 0 2 2 2 2 2 101 2 101 
+-101 2 131 133 133 133 108 2 107 112 1 111 108 2 107 133 133 133 132 2 101 
+-101 2 105 130 130 130 106 2 101 11 12 13 101 2 105 130 130 130 106 2 101 
+-101 2 2 2 2 2 2 2 105 100 100 100 106 2 2 2 2 2 2 2 101 
+-131 133 133 133 133 133 108 0 0 0 0 0 0 0 107 133 133 133 133 133 132 
+-131 140 140 130 130 130 130 100 100 108 2 107 100 100 130 130 130 130 140 140 132 
+-105 130 132 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 131 130 106 
+-20 0 110 2 107 100 100 112 2 110 2 110 2 111 100 100 108 2 110 0 20 
+-113 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 113 
+-101 2 111 133 132 2 111 100 100 100 133 100 100 100 112 2 131 133 112 2 101 
+-101 2 2 131 132 2 2 2 2 2 101 2 2 2 2 2 131 132 2 2 101 
+-131 108 2 105 106 2 113 2 113 2 101 2 113 2 113 2 105 106 2 107 132 
+-131 132 2 2 2 2 101 2 110 2 110 2 110 2 101 2 2 2 2 131 132 
+-131 140 133 133 108 2 101 2 0 2 2 2 0 2 101 2 107 133 133 140 132 
+-131 140 140 140 132 2 101 2 107 112 2 111 108 2 101 2 131 140 140 140 132 
+-131 140 140 140 106 2 110 2 110 2 4 2 110 2 110 2 105 140 140 140 132 
+-105 130 130 106 2 2 2 2 2 2 113 2 2 2 2 2 2 105 130 130 106 
+-20 0 0 2 2 113 2 111 100 100 140 100 100 112 2 113 2 2 0 0 20 
+-113 0 113 2 107 132 2 2 2 2 110 2 2 2 2 131 108 2 113 0 113 
+-101 0 101 2 131 132 3 111 112 2 0 2 111 112 3 131 132 2 101 0 101 
+-101 0 101 2 105 132 2 0 0 2 113 2 0 0 2 131 106 2 101 0 101 
+-101 0 101 2 2 101 2 111 112 2 101 2 111 112 2 101 2 2 101 0 101 
+-101 0 131 108 2 101 2 2 2 2 101 2 2 2 2 101 2 107 132 0 101 
+-101 0 131 106 2 101 2 111 100 100 130 100 100 112 2 101 2 105 132 0 101 
+-101 0 101 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 101 0 101 
+-101 0 101 2 107 132 2 111 100 108 2 107 100 112 2 131 108 2 101 0 101 
+-101 0 101 2 131 132 2 2 2 101 2 101 2 2 2 131 132 2 101 0 101 
+-101 0 101 2 105 130 100 112 2 110 2 110 2 111 100 130 106 2 101 0 101 
+-101 0 101 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 101 0 101 
+-101 0 131 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 132 0 101 
+-110 21 105 130 130 130 130 130 130 130 130 130 130 130 130 130 130 130 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/6.txt b/games/pacman/res/levels/6.txt
+deleted file mode 100644
+index fe40285..0000000
+--- a/games/pacman/res/levels/6.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 255 255 255
+-# edgeshadowcolor 0 128 255
+-# fillcolor 129 11 168
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-107 100 100 100 133 100 100 100 100 100 100 100 100 100 100 100 133 100 100 100 108 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-101 3 120 2 110 2 113 2 111 100 100 100 112 2 113 2 110 2 120 3 101 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-131 100 112 2 120 2 105 100 100 100 133 100 100 100 106 2 120 2 111 100 132 
+-101 2 2 2 0 2 2 2 2 2 101 2 2 2 2 2 0 2 2 2 101 
+-101 2 111 100 112 2 107 100 112 2 110 2 111 100 108 2 111 100 112 2 101 
+-101 2 0 2 2 2 110 2 2 2 2 2 2 2 110 2 2 2 0 2 101 
+-105 100 108 2 120 2 0 0 111 100 100 100 112 0 0 2 120 2 107 100 106 
+-0 0 101 2 2 2 113 0 0 0 10 0 0 0 113 2 2 2 101 0 0 
+-0 0 105 100 108 2 101 0 107 112 1 111 108 0 101 2 107 100 106 0 0 
+-0 0 0 0 101 2 101 0 101 11 12 13 101 0 101 2 101 0 0 0 0 
+-111 100 100 100 106 2 110 0 105 100 100 100 106 0 110 2 105 100 100 100 112 
+-20 0 0 0 0 2 2 2 2 2 4 2 2 2 2 2 0 0 0 0 20 
+-111 100 100 100 108 2 113 2 111 100 100 100 112 2 113 2 107 100 100 100 112 
+-0 0 0 0 101 2 101 2 2 2 0 2 2 2 101 2 101 0 0 0 0 
+-0 0 107 100 106 2 131 100 112 2 113 2 111 100 132 2 105 100 108 0 0 
+-0 0 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 0 0 
+-107 100 106 2 120 2 101 2 111 100 130 100 112 2 101 2 120 2 105 100 108 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-101 3 120 2 113 2 105 100 112 2 120 2 111 100 106 2 113 2 120 3 101 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-105 100 100 100 130 100 100 100 100 100 100 100 100 100 100 100 130 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/7.txt b/games/pacman/res/levels/7.txt
+deleted file mode 100644
+index a34c0a9..0000000
+--- a/games/pacman/res/levels/7.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 255 128 128
+-# fillcolor 100 100 100
+-# pelletcolor 170 0 85
+-# fruittype 0
+-
+-# startleveldata
+-120 21 111 100 108 0 107 100 100 100 100 100 100 100 108 0 107 100 112 21 120 
+-20 2 2 2 105 100 106 2 2 2 2 2 2 2 105 100 106 2 2 2 20 
+-113 3 120 2 2 2 2 2 111 100 133 100 112 2 2 2 2 2 120 3 113 
+-101 2 2 2 107 100 108 2 2 2 101 2 2 2 107 100 108 2 2 2 101 
+-105 100 100 100 106 0 101 2 113 2 101 2 113 2 101 0 105 100 100 100 106 
+-0 0 0 0 0 0 101 2 101 2 101 2 101 2 101 0 0 0 0 0 0 
+-107 100 100 100 100 100 106 2 101 2 110 2 101 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 101 2 2 2 101 2 2 2 2 2 2 2 101 
+-101 2 113 2 113 2 111 100 130 112 0 111 130 100 112 2 113 2 113 2 101 
+-101 2 101 2 101 2 2 2 2 2 4 2 2 2 2 2 101 2 101 2 101 
+-101 2 110 2 105 100 100 112 2 113 0 113 2 111 100 100 106 2 110 2 101 
+-101 2 2 2 2 2 2 2 2 101 0 101 2 2 2 2 2 2 2 2 101 
+-105 100 108 2 107 112 2 107 100 106 0 105 100 108 2 111 108 2 107 100 106 
+-0 0 101 2 101 2 2 101 2 2 2 2 2 101 2 2 101 2 101 0 0 
+-0 0 101 2 110 2 111 106 2 111 100 112 2 105 112 2 110 2 101 0 0 
+-0 0 101 2 2 2 2 2 2 0 10 0 2 2 2 2 2 2 101 0 0 
+-0 0 105 100 108 2 120 2 107 112 1 111 108 2 120 2 107 100 106 0 0 
+-0 0 0 0 101 2 2 2 101 11 12 13 101 2 2 2 101 0 0 0 0 
+-0 0 0 0 101 2 120 2 105 100 100 100 106 2 120 2 101 0 0 0 0 
+-0 0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 0 
+-111 100 100 100 106 0 113 2 111 100 100 100 112 2 113 0 105 100 100 100 112 
+-20 0 0 0 0 0 101 2 2 2 3 2 2 2 101 0 0 0 0 0 20 
+-120 21 111 100 100 100 130 100 100 100 100 100 100 100 130 100 100 100 112 21 120 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/8.txt b/games/pacman/res/levels/8.txt
+deleted file mode 100644
+index 21d3396..0000000
+--- a/games/pacman/res/levels/8.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 0 128 192
+-# edgeshadowcolor 0 51 51
+-# fillcolor 0 0 0
+-# pelletcolor 255 128 0
+-# fruittype 2
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 113 21 113 21 113 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 106 0 110 0 105 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 107 100 106 2 113 2 120 2 111 133 112 2 120 0 113 2 105 100 108 0 
+-0 101 2 2 2 101 2 2 2 2 101 2 2 2 0 110 2 0 0 101 0 
+-0 101 2 107 100 106 0 111 112 0 110 2 111 112 2 2 2 113 0 101 0 
+-107 106 2 110 2 2 2 0 2 2 2 2 0 0 2 120 3 110 0 105 108 
+-101 2 2 2 2 113 2 113 2 113 2 111 100 108 2 0 0 10 0 0 101 
+-101 2 107 100 100 106 2 110 2 101 2 2 2 101 2 107 112 1 111 133 106 
+-101 2 110 2 2 2 2 0 2 105 100 112 2 110 2 101 11 12 13 101 0 
+-101 2 0 3 120 2 111 108 2 2 2 2 2 2 2 105 100 100 100 130 108 
+-101 2 113 2 2 2 2 105 100 108 2 107 100 112 2 2 2 2 2 2 101 
+-101 2 105 100 100 108 2 2 2 101 2 101 2 2 2 107 100 100 112 2 101 
+-101 2 0 0 0 105 100 112 2 110 2 110 2 111 100 106 2 2 2 2 101 
+-101 2 111 108 2 2 2 2 2 2 2 2 2 2 2 2 2 107 112 2 101 
+-101 2 2 110 2 111 100 112 2 120 4 111 100 112 2 120 2 110 2 2 101 
+-105 108 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 107 106 
+-0 101 2 111 112 0 107 100 112 2 113 0 111 100 108 2 111 112 2 101 0 
+-0 101 2 2 2 3 101 2 2 2 101 0 0 0 101 2 2 2 2 101 0 
+-0 105 100 108 2 111 106 2 111 100 130 100 112 0 105 112 2 107 100 106 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 0 113 0 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 110 21 110 21 110 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/9.txt b/games/pacman/res/levels/9.txt
+deleted file mode 100644
+index 3661b14..0000000
+--- a/games/pacman/res/levels/9.txt
++++ /dev/null
+@@ -1,46 +0,0 @@
+-# lvlwidth 34
+-# lvlheight 33
+-# bgcolor 0 0 0
+-# edgelightcolor 128 0 255
+-# edgeshadowcolor 64 0 64
+-# fillcolor 0 0 0
+-# pelletcolor 0 255 0
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-111 100 100 106 3 111 100 133 100 112 2 111 100 100 100 108 2 113 2 113 2 111 108 2 113 0 120 3 113 2 105 100 100 112 
+-20 0 0 0 2 2 2 101 2 2 2 2 2 2 2 101 2 101 2 101 2 2 101 2 101 0 0 0 101 2 0 0 0 20 
+-111 100 100 108 2 113 2 110 2 111 100 133 100 112 2 101 2 101 2 105 112 2 110 2 101 0 111 100 106 2 107 100 100 112 
+-0 0 0 101 2 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 101 0 0 0 0 2 101 0 0 0 
+-0 0 0 101 2 131 100 112 2 113 2 101 2 111 100 106 2 105 100 100 100 100 112 2 131 100 100 100 112 2 101 0 0 0 
+-0 0 0 101 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 2 111 100 132 2 110 2 111 100 100 100 100 100 100 100 100 112 2 101 2 111 100 108 0 101 0 0 0 
+-0 0 0 101 2 0 2 2 2 101 2 2 2 0 0 0 0 0 0 0 10 0 0 2 101 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 112 2 110 0 113 2 107 100 100 108 0 107 112 1 111 108 2 110 2 120 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 0 0 101 2 101 0 0 101 0 101 11 12 13 101 2 2 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 100 100 100 100 132 2 105 100 100 106 0 105 100 100 100 106 2 111 100 108 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 2 0 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 0 111 100 100 100 108 2 110 0 113 2 113 2 111 100 100 100 100 100 100 112 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 107 100 112 2 105 100 112 2 101 2 101 2 111 100 100 133 100 100 112 2 111 106 2 110 0 101 0 0 0 
+-0 0 0 101 2 101 0 4 2 2 2 2 2 101 2 101 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 0 107 100 100 100 112 0 110 2 110 2 111 112 2 101 2 107 100 100 100 100 100 108 2 101 0 0 0 
+-0 0 0 101 2 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 2 2 2 110 2 101 0 0 0 
+-0 0 0 101 2 111 100 106 2 113 2 113 2 120 2 113 0 111 112 2 101 2 101 0 113 2 113 2 2 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 3 101 2 101 2 2 2 101 2 2 2 2 101 2 101 0 110 3 105 100 112 2 101 0 0 0 
+-111 100 100 106 2 111 100 100 100 106 2 101 2 120 2 110 2 111 112 0 110 2 101 2 2 2 2 2 2 2 105 100 100 112 
+-20 0 0 0 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 107 108 2 107 108 2 0 0 0 20 
+-111 100 100 108 2 111 100 100 100 112 2 105 100 100 100 112 0 111 100 100 100 100 106 2 105 106 2 105 106 2 107 100 100 112 
+-0 0 0 101 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/sounds/eatfruit.wav b/games/pacman/res/sounds/eatfruit.wav
+deleted file mode 100644
+index d180209..0000000
+Binary files a/games/pacman/res/sounds/eatfruit.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/eatgh2.wav b/games/pacman/res/sounds/eatgh2.wav
+deleted file mode 100644
+index 7d8b90e..0000000
+Binary files a/games/pacman/res/sounds/eatgh2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/extralife.wav b/games/pacman/res/sounds/extralife.wav
+deleted file mode 100644
+index 2db3c19..0000000
+Binary files a/games/pacman/res/sounds/extralife.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/fruitbounce.wav b/games/pacman/res/sounds/fruitbounce.wav
+deleted file mode 100644
+index 6e17741..0000000
+Binary files a/games/pacman/res/sounds/fruitbounce.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet1.wav b/games/pacman/res/sounds/pellet1.wav
+deleted file mode 100644
+index 1d39b64..0000000
+Binary files a/games/pacman/res/sounds/pellet1.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet2.wav b/games/pacman/res/sounds/pellet2.wav
+deleted file mode 100644
+index d8363d0..0000000
+Binary files a/games/pacman/res/sounds/pellet2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/powerpellet.wav b/games/pacman/res/sounds/powerpellet.wav
+deleted file mode 100644
+index 489de59..0000000
+Binary files a/games/pacman/res/sounds/powerpellet.wav and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 0.gif b/games/pacman/res/sprite/fruit 0.gif
+deleted file mode 100644
+index 8cc3dc4..0000000
+Binary files a/games/pacman/res/sprite/fruit 0.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 1.gif b/games/pacman/res/sprite/fruit 1.gif
+deleted file mode 100644
+index 8adcf61..0000000
+Binary files a/games/pacman/res/sprite/fruit 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 2.gif b/games/pacman/res/sprite/fruit 2.gif
+deleted file mode 100644
+index bda9369..0000000
+Binary files a/games/pacman/res/sprite/fruit 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 3.gif b/games/pacman/res/sprite/fruit 3.gif
+deleted file mode 100644
+index ea8f006..0000000
+Binary files a/games/pacman/res/sprite/fruit 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 4.gif b/games/pacman/res/sprite/fruit 4.gif
+deleted file mode 100644
+index 0be5f73..0000000
+Binary files a/games/pacman/res/sprite/fruit 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 1.gif b/games/pacman/res/sprite/ghost 1.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/sprite/ghost 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 2.gif b/games/pacman/res/sprite/ghost 2.gif
+deleted file mode 100644
+index 89845aa..0000000
+Binary files a/games/pacman/res/sprite/ghost 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 3.gif b/games/pacman/res/sprite/ghost 3.gif
+deleted file mode 100644
+index 5777f39..0000000
+Binary files a/games/pacman/res/sprite/ghost 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 4.gif b/games/pacman/res/sprite/ghost 4.gif
+deleted file mode 100644
+index e95b7d7..0000000
+Binary files a/games/pacman/res/sprite/ghost 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 5.gif b/games/pacman/res/sprite/ghost 5.gif
+deleted file mode 100644
+index 9956c84..0000000
+Binary files a/games/pacman/res/sprite/ghost 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 6.gif b/games/pacman/res/sprite/ghost 6.gif
+deleted file mode 100644
+index 56533bf..0000000
+Binary files a/games/pacman/res/sprite/ghost 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 1.gif b/games/pacman/res/sprite/pacman-d 1.gif
+deleted file mode 100644
+index b3db2db..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 2.gif b/games/pacman/res/sprite/pacman-d 2.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 3.gif b/games/pacman/res/sprite/pacman-d 3.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 4.gif b/games/pacman/res/sprite/pacman-d 4.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 5.gif b/games/pacman/res/sprite/pacman-d 5.gif
+deleted file mode 100644
+index 5fa29e9..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 6.gif b/games/pacman/res/sprite/pacman-d 6.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 7.gif b/games/pacman/res/sprite/pacman-d 7.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 8.gif b/games/pacman/res/sprite/pacman-d 8.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 1.gif b/games/pacman/res/sprite/pacman-l 1.gif
+deleted file mode 100644
+index ee7f79a..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 2.gif b/games/pacman/res/sprite/pacman-l 2.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 3.gif b/games/pacman/res/sprite/pacman-l 3.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 4.gif b/games/pacman/res/sprite/pacman-l 4.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 5.gif b/games/pacman/res/sprite/pacman-l 5.gif
+deleted file mode 100644
+index b446def..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 6.gif b/games/pacman/res/sprite/pacman-l 6.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 7.gif b/games/pacman/res/sprite/pacman-l 7.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 8.gif b/games/pacman/res/sprite/pacman-l 8.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 1.gif b/games/pacman/res/sprite/pacman-r 1.gif
+deleted file mode 100644
+index 7719686..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 2.gif b/games/pacman/res/sprite/pacman-r 2.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 3.gif b/games/pacman/res/sprite/pacman-r 3.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 4.gif b/games/pacman/res/sprite/pacman-r 4.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 5.gif b/games/pacman/res/sprite/pacman-r 5.gif
+deleted file mode 100644
+index 1fe5419..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 6.gif b/games/pacman/res/sprite/pacman-r 6.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 7.gif b/games/pacman/res/sprite/pacman-r 7.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 8.gif b/games/pacman/res/sprite/pacman-r 8.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 1.gif b/games/pacman/res/sprite/pacman-u 1.gif
+deleted file mode 100644
+index 01ef0a3..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 2.gif b/games/pacman/res/sprite/pacman-u 2.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 3.gif b/games/pacman/res/sprite/pacman-u 3.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 4.gif b/games/pacman/res/sprite/pacman-u 4.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 5.gif b/games/pacman/res/sprite/pacman-u 5.gif
+deleted file mode 100644
+index d4698b0..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 6.gif b/games/pacman/res/sprite/pacman-u 6.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 7.gif b/games/pacman/res/sprite/pacman-u 7.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 8.gif b/games/pacman/res/sprite/pacman-u 8.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman.gif b/games/pacman/res/sprite/pacman.gif
+deleted file mode 100644
+index a584c10..0000000
+Binary files a/games/pacman/res/sprite/pacman.gif and /dev/null differ
+diff --git a/games/pacman/res/text/0.gif b/games/pacman/res/text/0.gif
+deleted file mode 100644
+index f01b653..0000000
+Binary files a/games/pacman/res/text/0.gif and /dev/null differ
+diff --git a/games/pacman/res/text/1.gif b/games/pacman/res/text/1.gif
+deleted file mode 100644
+index 7349994..0000000
+Binary files a/games/pacman/res/text/1.gif and /dev/null differ
+diff --git a/games/pacman/res/text/2.gif b/games/pacman/res/text/2.gif
+deleted file mode 100644
+index 3254d6f..0000000
+Binary files a/games/pacman/res/text/2.gif and /dev/null differ
+diff --git a/games/pacman/res/text/3.gif b/games/pacman/res/text/3.gif
+deleted file mode 100644
+index c88635d..0000000
+Binary files a/games/pacman/res/text/3.gif and /dev/null differ
+diff --git a/games/pacman/res/text/4.gif b/games/pacman/res/text/4.gif
+deleted file mode 100644
+index f3b5c3b..0000000
+Binary files a/games/pacman/res/text/4.gif and /dev/null differ
+diff --git a/games/pacman/res/text/5.gif b/games/pacman/res/text/5.gif
+deleted file mode 100644
+index dae0fd7..0000000
+Binary files a/games/pacman/res/text/5.gif and /dev/null differ
+diff --git a/games/pacman/res/text/6.gif b/games/pacman/res/text/6.gif
+deleted file mode 100644
+index dae7821..0000000
+Binary files a/games/pacman/res/text/6.gif and /dev/null differ
+diff --git a/games/pacman/res/text/7.gif b/games/pacman/res/text/7.gif
+deleted file mode 100644
+index dda359b..0000000
+Binary files a/games/pacman/res/text/7.gif and /dev/null differ
+diff --git a/games/pacman/res/text/8.gif b/games/pacman/res/text/8.gif
+deleted file mode 100644
+index 01305d4..0000000
+Binary files a/games/pacman/res/text/8.gif and /dev/null differ
+diff --git a/games/pacman/res/text/9.gif b/games/pacman/res/text/9.gif
+deleted file mode 100644
+index b29bb19..0000000
+Binary files a/games/pacman/res/text/9.gif and /dev/null differ
+diff --git a/games/pacman/res/text/gameover.gif b/games/pacman/res/text/gameover.gif
+deleted file mode 100644
+index e854b89..0000000
+Binary files a/games/pacman/res/text/gameover.gif and /dev/null differ
+diff --git a/games/pacman/res/text/life.gif b/games/pacman/res/text/life.gif
+deleted file mode 100644
+index 0e8f1bf..0000000
+Binary files a/games/pacman/res/text/life.gif and /dev/null differ
+diff --git a/games/pacman/res/text/logo.gif b/games/pacman/res/text/logo.gif
+deleted file mode 100644
+index 1cd71a7..0000000
+Binary files a/games/pacman/res/text/logo.gif and /dev/null differ
+diff --git a/games/pacman/res/text/ready.gif b/games/pacman/res/text/ready.gif
+deleted file mode 100644
+index 0cdcd89..0000000
+Binary files a/games/pacman/res/text/ready.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/blank.gif b/games/pacman/res/tiles/blank.gif
+deleted file mode 100644
+index ae631b0..0000000
+Binary files a/games/pacman/res/tiles/blank.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-h.gif b/games/pacman/res/tiles/door-h.gif
+deleted file mode 100644
+index 49687f5..0000000
+Binary files a/games/pacman/res/tiles/door-h.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-v.gif b/games/pacman/res/tiles/door-v.gif
+deleted file mode 100644
+index 2e7568d..0000000
+Binary files a/games/pacman/res/tiles/door-v.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-blinky.gif b/games/pacman/res/tiles/ghost-blinky.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/tiles/ghost-blinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-door.gif b/games/pacman/res/tiles/ghost-door.gif
+deleted file mode 100644
+index cffd09a..0000000
+Binary files a/games/pacman/res/tiles/ghost-door.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-inky.gif b/games/pacman/res/tiles/ghost-inky.gif
+deleted file mode 100644
+index 4753970..0000000
+Binary files a/games/pacman/res/tiles/ghost-inky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-pinky.gif b/games/pacman/res/tiles/ghost-pinky.gif
+deleted file mode 100644
+index 6fd82ec..0000000
+Binary files a/games/pacman/res/tiles/ghost-pinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-sue.gif b/games/pacman/res/tiles/ghost-sue.gif
+deleted file mode 100644
+index 14b057d..0000000
+Binary files a/games/pacman/res/tiles/ghost-sue.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/glasses.gif b/games/pacman/res/tiles/glasses.gif
+deleted file mode 100644
+index f17ba54..0000000
+Binary files a/games/pacman/res/tiles/glasses.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/hiscores.gif b/games/pacman/res/tiles/hiscores.gif
+deleted file mode 100644
+index c504d3c..0000000
+Binary files a/games/pacman/res/tiles/hiscores.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet-power.gif b/games/pacman/res/tiles/pellet-power.gif
+deleted file mode 100644
+index 806f7f4..0000000
+Binary files a/games/pacman/res/tiles/pellet-power.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet.gif b/games/pacman/res/tiles/pellet.gif
+deleted file mode 100644
+index 5284dd8..0000000
+Binary files a/games/pacman/res/tiles/pellet.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/showlogo.gif b/games/pacman/res/tiles/showlogo.gif
+deleted file mode 100644
+index 35abd50..0000000
+Binary files a/games/pacman/res/tiles/showlogo.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/start.gif b/games/pacman/res/tiles/start.gif
+deleted file mode 100644
+index 8b0fafe..0000000
+Binary files a/games/pacman/res/tiles/start.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ll.gif b/games/pacman/res/tiles/wall-corner-ll.gif
+deleted file mode 100644
+index 86b0398..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ll.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-lr.gif b/games/pacman/res/tiles/wall-corner-lr.gif
+deleted file mode 100644
+index c43af41..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-lr.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ul.gif b/games/pacman/res/tiles/wall-corner-ul.gif
+deleted file mode 100644
+index 5acadaa..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ul.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ur.gif b/games/pacman/res/tiles/wall-corner-ur.gif
+deleted file mode 100644
+index be16253..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ur.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-b.gif b/games/pacman/res/tiles/wall-end-b.gif
+deleted file mode 100644
+index 9041b06..0000000
+Binary files a/games/pacman/res/tiles/wall-end-b.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-l.gif b/games/pacman/res/tiles/wall-end-l.gif
+deleted file mode 100644
+index 2ed728a..0000000
+Binary files a/games/pacman/res/tiles/wall-end-l.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-r.gif b/games/pacman/res/tiles/wall-end-r.gif
+deleted file mode 100644
+index 25c7848..0000000
+Binary files a/games/pacman/res/tiles/wall-end-r.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-t.gif b/games/pacman/res/tiles/wall-end-t.gif
+deleted file mode 100644
+index 2155e70..0000000
+Binary files a/games/pacman/res/tiles/wall-end-t.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-nub.gif b/games/pacman/res/tiles/wall-nub.gif
+deleted file mode 100644
+index 113941b..0000000
+Binary files a/games/pacman/res/tiles/wall-nub.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-horiz.gif b/games/pacman/res/tiles/wall-straight-horiz.gif
+deleted file mode 100644
+index 6308eef..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-horiz.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-vert.gif b/games/pacman/res/tiles/wall-straight-vert.gif
+deleted file mode 100644
+index 6b7ddb7..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-vert.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-bottom.gif b/games/pacman/res/tiles/wall-t-bottom.gif
+deleted file mode 100644
+index 10ac483..0000000
+Binary files a/games/pacman/res/tiles/wall-t-bottom.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-left.gif b/games/pacman/res/tiles/wall-t-left.gif
+deleted file mode 100644
+index 3006e2a..0000000
+Binary files a/games/pacman/res/tiles/wall-t-left.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-right.gif b/games/pacman/res/tiles/wall-t-right.gif
+deleted file mode 100644
+index 27bb644..0000000
+Binary files a/games/pacman/res/tiles/wall-t-right.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-top.gif b/games/pacman/res/tiles/wall-t-top.gif
+deleted file mode 100644
+index 11f0e1e..0000000
+Binary files a/games/pacman/res/tiles/wall-t-top.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-x.gif b/games/pacman/res/tiles/wall-x.gif
+deleted file mode 100644
+index 3ba8eaa..0000000
+Binary files a/games/pacman/res/tiles/wall-x.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/x-paintwall.gif b/games/pacman/res/tiles/x-paintwall.gif
+deleted file mode 100644
+index 78f60c4..0000000
+Binary files a/games/pacman/res/tiles/x-paintwall.gif and /dev/null differ
+diff --git a/ppo_custom_heterognn_Freeway.zip b/ppo_custom_heterognn_Freeway.zip
+index 2ab5bea..4df678f 100644
+Binary files a/ppo_custom_heterognn_Freeway.zip and b/ppo_custom_heterognn_Freeway.zip differ
+diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
+index 45c0c79..e233619 120000
+--- a/wandb/debug-internal.log
++++ b/wandb/debug-internal.log
+@@ -1 +1 @@
+-run-20240729_191107-3eokwam7/logs/debug-internal.log
+\ No newline at end of file
++run-20240729_234531-uyq0rg9d/logs/debug-internal.log
+\ No newline at end of file
+diff --git a/wandb/debug.log b/wandb/debug.log
+index a5e6cab..db873eb 120000
+--- a/wandb/debug.log
++++ b/wandb/debug.log
+@@ -1 +1 @@
+-run-20240729_191107-3eokwam7/logs/debug.log
+\ No newline at end of file
++run-20240729_234531-uyq0rg9d/logs/debug.log
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+deleted file mode 100644
+index 043386e..0000000
+--- a/wandb/latest-run
++++ /dev/null
+@@ -1 +0,0 @@
+-run-20240715_125454-7cw9smqu
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+new file mode 120000
+index 0000000..20e8ea5
+--- /dev/null
++++ b/wandb/latest-run
+@@ -0,0 +1 @@
++run-20240729_234531-uyq0rg9d
+\ No newline at end of file
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/output.log b/wandb/run-20240729_234531-uyq0rg9d/files/output.log
new file mode 100644
index 0000000..e9d378c
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/output.log
@@ -0,0 +1,10 @@
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 196, in _run_module_as_main
+    return _run_code(code, main_globals, None,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/runpy.py", line 86, in _run_code
+    exec(code, run_globals)
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/run_supervised_gnn.py", line 209, in <module>
+    env = FreewayEnvConstant(render_mode='human', observation_type='graph')
+  File "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/games/freeway/freeway_envs/freeway_env.py", line 711, in __init__
+    super(FreewayEnv, self).__init__()
+TypeError: super(type, obj): obj must be an instance or subtype of type
\ No newline at end of file
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/requirements.txt b/wandb/run-20240729_234531-uyq0rg9d/files/requirements.txt
new file mode 100644
index 0000000..717b9d3
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/requirements.txt
@@ -0,0 +1,83 @@
+AutoROM.accept-rom-license==0.6.1
+AutoROM==0.4.2
+Farama-Notifications==0.0.4
+GitPython==3.1.43
+Jinja2==3.1.4
+Markdown==3.6
+MarkupSafe==2.1.5
+PyYAML==6.0.1
+Shimmy==0.2.1
+Werkzeug==3.0.3
+absl-py==2.1.0
+aiohttp==3.9.5
+aiosignal==1.3.1
+ale-py==0.8.1
+async-timeout==4.0.3
+atari-py==0.2.5
+attrs==23.2.0
+certifi==2024.2.2
+charset-normalizer==3.3.2
+click==8.1.7
+cloudpickle==3.0.0
+contourpy==1.2.1
+cycler==0.12.1
+docker-pycreds==0.4.0
+filelock==3.14.0
+fonttools==4.52.4
+frozenlist==1.4.1
+fsspec==2024.5.0
+gitdb==4.0.11
+grpcio==1.64.0
+gymnasium==0.29.1
+idna==3.7
+imageio==2.34.1
+importlib_resources==6.4.0
+joblib==1.4.2
+kiwisolver==1.4.5
+lazy_loader==0.4
+lightning-utilities==0.11.2
+lightning==2.2.5
+matplotlib==3.9.0
+mpmath==1.3.0
+multidict==6.0.5
+networkx==3.3
+numpy==1.26.4
+opencv-python==4.10.0.84
+packaging==24.0
+pandas==2.2.2
+pillow==10.3.0
+pip==23.3.1
+platformdirs==4.2.2
+protobuf==4.25.3
+psutil==5.9.8
+pygame==2.5.2
+pyparsing==3.1.2
+python-dateutil==2.9.0.post0
+pytorch-lightning==2.2.5
+pytz==2024.1
+requests==2.32.2
+sb3_contrib==2.3.0
+scikit-image==0.23.2
+scikit-learn==1.5.0
+scipy==1.13.1
+sentry-sdk==2.3.1
+setproctitle==1.3.3
+setuptools==68.2.2
+six==1.16.0
+smmap==5.0.1
+stable_baselines3==2.3.2
+sympy==1.12
+tensorboard-data-server==0.7.2
+tensorboard==2.16.2
+threadpoolctl==3.5.0
+tifffile==2024.5.22
+torch==2.3.0
+torch_geometric==2.5.3
+torchmetrics==1.4.0.post0
+tqdm==4.66.4
+typing_extensions==4.12.0
+tzdata==2024.1
+urllib3==2.2.1
+wandb==0.17.0
+wheel==0.42.0
+yarl==1.9.4
\ No newline at end of file
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/wandb-metadata.json b/wandb/run-20240729_234531-uyq0rg9d/files/wandb-metadata.json
new file mode 100644
index 0000000..8f3e7be
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/wandb-metadata.json
@@ -0,0 +1,48 @@
+{
+    "os": "macOS-14.0-arm64-arm-64bit",
+    "python": "3.10.14",
+    "heartbeatAt": "2024-07-29T21:45:33.091718",
+    "startedAt": "2024-07-29T21:45:31.543922",
+    "docker": null,
+    "cuda": null,
+    "args": [],
+    "state": "running",
+    "program": "-m games.freeway.run_supervised_gnn",
+    "codePathLocal": null,
+    "git": {
+        "remote": "https://github.com/rb248/Master-Thesis-GNN.git",
+        "commit": "658fe2953cac0367c1821fdd348158955a06af8a"
+    },
+    "email": "rishabhbhatia315@gmail.com",
+    "root": "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN",
+    "host": "rishubs-MBP.fritz.box",
+    "username": "rishubbhatia",
+    "executable": "/Users/rishubbhatia/miniforge3/envs/games/bin/python",
+    "cpu_count": 8,
+    "cpu_count_logical": 8,
+    "cpu_freq": {
+        "current": 3204,
+        "min": 600,
+        "max": 3204
+    },
+    "cpu_freq_per_core": [
+        {
+            "current": 3204,
+            "min": 600,
+            "max": 3204
+        }
+    ],
+    "disk": {
+        "/": {
+            "total": 228.27386474609375,
+            "used": 13.797981262207031
+        }
+    },
+    "gpuapple": {
+        "type": "arm",
+        "vendor": "Apple"
+    },
+    "memory": {
+        "total": 8.0
+    }
+}
diff --git a/wandb/run-20240729_234531-uyq0rg9d/files/wandb-summary.json b/wandb/run-20240729_234531-uyq0rg9d/files/wandb-summary.json
new file mode 100644
index 0000000..e682bae
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/files/wandb-summary.json
@@ -0,0 +1 @@
+{"_wandb": {"runtime": 5}}
\ No newline at end of file
diff --git a/wandb/run-20240729_234531-uyq0rg9d/logs/debug-internal.log b/wandb/run-20240729_234531-uyq0rg9d/logs/debug-internal.log
new file mode 100644
index 0000000..12770d0
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/logs/debug-internal.log
@@ -0,0 +1,229 @@
+2024-07-29 23:45:31,568 INFO    StreamThr :72897 [internal.py:wandb_internal():85] W&B internal server running at pid: 72897, started at: 2024-07-29 23:45:31.567077
+2024-07-29 23:45:31,569 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: status
+2024-07-29 23:45:31,597 INFO    WriterThread:72897 [datastore.py:open_for_write():87] open: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/run-uyq0rg9d.wandb
+2024-07-29 23:45:31,598 DEBUG   SenderThread:72897 [sender.py:send():378] send: header
+2024-07-29 23:45:31,663 DEBUG   SenderThread:72897 [sender.py:send():378] send: run
+2024-07-29 23:45:32,091 INFO    SenderThread:72897 [dir_watcher.py:__init__():211] watching files in: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files
+2024-07-29 23:45:32,091 INFO    SenderThread:72897 [sender.py:_start_run_threads():1123] run started: uyq0rg9d with start time 1722289531.569831
+2024-07-29 23:45:32,101 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: check_version
+2024-07-29 23:45:32,101 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: check_version
+2024-07-29 23:45:32,229 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: run_start
+2024-07-29 23:45:32,246 DEBUG   HandlerThread:72897 [system_info.py:__init__():26] System info init
+2024-07-29 23:45:32,246 DEBUG   HandlerThread:72897 [system_info.py:__init__():41] System info init done
+2024-07-29 23:45:32,247 INFO    HandlerThread:72897 [system_monitor.py:start():194] Starting system monitor
+2024-07-29 23:45:32,247 INFO    SystemMonitor:72897 [system_monitor.py:_start():158] Starting system asset monitoring threads
+2024-07-29 23:45:32,247 INFO    HandlerThread:72897 [system_monitor.py:probe():214] Collecting system info
+2024-07-29 23:45:32,247 INFO    SystemMonitor:72897 [interfaces.py:start():188] Started cpu monitoring
+2024-07-29 23:45:32,251 INFO    SystemMonitor:72897 [interfaces.py:start():188] Started disk monitoring
+2024-07-29 23:45:32,256 INFO    SystemMonitor:72897 [interfaces.py:start():188] Started gpuapple monitoring
+2024-07-29 23:45:32,258 INFO    SystemMonitor:72897 [interfaces.py:start():188] Started memory monitoring
+2024-07-29 23:45:32,259 INFO    SystemMonitor:72897 [interfaces.py:start():188] Started network monitoring
+2024-07-29 23:45:33,087 ERROR   HandlerThread:72897 [gpu_apple.py:probe():176] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 164, in probe
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:45:33,091 DEBUG   HandlerThread:72897 [system_info.py:probe():150] Probing system
+2024-07-29 23:45:33,102 DEBUG   HandlerThread:72897 [system_info.py:_probe_git():135] Probing git
+2024-07-29 23:45:33,159 DEBUG   HandlerThread:72897 [system_info.py:_probe_git():143] Probing git done
+2024-07-29 23:45:33,159 DEBUG   HandlerThread:72897 [system_info.py:probe():198] Probing system done
+2024-07-29 23:45:33,159 DEBUG   HandlerThread:72897 [system_monitor.py:probe():223] {'os': 'macOS-14.0-arm64-arm-64bit', 'python': '3.10.14', 'heartbeatAt': '2024-07-29T21:45:33.091718', 'startedAt': '2024-07-29T21:45:31.543922', 'docker': None, 'cuda': None, 'args': (), 'state': 'running', 'program': '-m games.freeway.run_supervised_gnn', 'codePathLocal': None, 'git': {'remote': 'https://github.com/rb248/Master-Thesis-GNN.git', 'commit': '658fe2953cac0367c1821fdd348158955a06af8a'}, 'email': 'rishabhbhatia315@gmail.com', 'root': '/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN', 'host': 'rishubs-MBP.fritz.box', 'username': 'rishubbhatia', 'executable': '/Users/rishubbhatia/miniforge3/envs/games/bin/python', 'cpu_count': 8, 'cpu_count_logical': 8, 'cpu_freq': {'current': 3204, 'min': 600, 'max': 3204}, 'cpu_freq_per_core': [{'current': 3204, 'min': 600, 'max': 3204}], 'disk': {'/': {'total': 228.27386474609375, 'used': 13.797981262207031}}, 'gpuapple': {'type': 'arm', 'vendor': 'Apple'}, 'memory': {'total': 8.0}}
+2024-07-29 23:45:33,159 INFO    HandlerThread:72897 [system_monitor.py:probe():224] Finished collecting system info
+2024-07-29 23:45:33,159 INFO    HandlerThread:72897 [system_monitor.py:probe():227] Publishing system info
+2024-07-29 23:45:33,159 DEBUG   HandlerThread:72897 [system_info.py:_save_conda():207] Saving list of conda packages installed into the current environment
+2024-07-29 23:45:33,195 ERROR   gpuapple  :72897 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:45:34,101 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml
+2024-07-29 23:45:35,314 ERROR   gpuapple  :72897 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:45:36,882 DEBUG   HandlerThread:72897 [system_info.py:_save_conda():222] Saving conda packages done
+2024-07-29 23:45:36,882 DEBUG   HandlerThread:72897 [system_info.py:_save_code():44] Saving code
+2024-07-29 23:45:36,882 WARNING HandlerThread:72897 [system_info.py:_save_code():46] unable to save code -- program entry not found
+2024-07-29 23:45:36,882 DEBUG   HandlerThread:72897 [system_info.py:_save_patches():82] Saving git patches
+2024-07-29 23:45:37,109 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml
+2024-07-29 23:45:37,494 ERROR   gpuapple  :72897 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:45:37,805 DEBUG   HandlerThread:72897 [system_info.py:_save_patches():124] Saving git patches done
+2024-07-29 23:45:37,806 INFO    HandlerThread:72897 [system_monitor.py:probe():229] Finished publishing system info
+2024-07-29 23:45:37,837 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:45:37,837 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: keepalive
+2024-07-29 23:45:37,838 DEBUG   SenderThread:72897 [sender.py:send():378] send: files
+2024-07-29 23:45:37,838 INFO    SenderThread:72897 [sender.py:_save_file():1389] saving file wandb-metadata.json with policy now
+2024-07-29 23:45:37,838 INFO    SenderThread:72897 [sender.py:_save_file():1389] saving file diff.patch with policy now
+2024-07-29 23:45:38,081 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: python_packages
+2024-07-29 23:45:38,081 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: python_packages
+2024-07-29 23:45:38,082 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:45:38,082 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:45:38,114 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/wandb-metadata.json
+2024-07-29 23:45:38,114 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/requirements.txt
+2024-07-29 23:45:38,114 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/diff.patch
+2024-07-29 23:45:38,361 DEBUG   SenderThread:72897 [sender.py:send():378] send: telemetry
+2024-07-29 23:45:38,363 DEBUG   SenderThread:72897 [sender.py:send():378] send: exit
+2024-07-29 23:45:38,363 INFO    SenderThread:72897 [sender.py:send_exit():585] handling exit code: 1
+2024-07-29 23:45:38,363 INFO    SenderThread:72897 [sender.py:send_exit():587] handling runtime: 5
+2024-07-29 23:45:38,364 INFO    SenderThread:72897 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:45:38,364 INFO    SenderThread:72897 [sender.py:send_exit():593] send defer
+2024-07-29 23:45:38,364 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,364 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 0
+2024-07-29 23:45:38,364 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,364 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 0
+2024-07-29 23:45:38,364 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 1
+2024-07-29 23:45:38,364 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,364 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 1
+2024-07-29 23:45:38,365 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,365 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 1
+2024-07-29 23:45:38,365 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 2
+2024-07-29 23:45:38,365 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 2
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [system_monitor.py:finish():203] Stopping system monitor
+2024-07-29 23:45:38,365 DEBUG   SystemMonitor:72897 [system_monitor.py:_start():172] Starting system metrics aggregation loop
+2024-07-29 23:45:38,365 DEBUG   SystemMonitor:72897 [system_monitor.py:_start():179] Finished system metrics aggregation loop
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [interfaces.py:finish():200] Joined cpu monitor
+2024-07-29 23:45:38,365 DEBUG   SystemMonitor:72897 [system_monitor.py:_start():183] Publishing last batch of metrics
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [interfaces.py:finish():200] Joined disk monitor
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [interfaces.py:finish():200] Joined gpuapple monitor
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [interfaces.py:finish():200] Joined memory monitor
+2024-07-29 23:45:38,365 INFO    HandlerThread:72897 [interfaces.py:finish():200] Joined network monitor
+2024-07-29 23:45:38,366 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,366 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 2
+2024-07-29 23:45:38,366 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 3
+2024-07-29 23:45:38,366 DEBUG   SenderThread:72897 [sender.py:send():378] send: telemetry
+2024-07-29 23:45:38,366 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,366 DEBUG   SenderThread:72897 [sender.py:send():378] send: stats
+2024-07-29 23:45:38,366 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 3
+2024-07-29 23:45:38,366 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,366 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 3
+2024-07-29 23:45:38,366 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 4
+2024-07-29 23:45:38,366 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,366 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 4
+2024-07-29 23:45:38,366 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,366 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 4
+2024-07-29 23:45:38,366 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 5
+2024-07-29 23:45:38,366 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,366 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 5
+2024-07-29 23:45:38,366 DEBUG   SenderThread:72897 [sender.py:send():378] send: summary
+2024-07-29 23:45:38,389 INFO    SenderThread:72897 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-29 23:45:38,389 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,389 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 5
+2024-07-29 23:45:38,389 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 6
+2024-07-29 23:45:38,389 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,389 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 6
+2024-07-29 23:45:38,389 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,389 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 6
+2024-07-29 23:45:38,391 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:45:38,562 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 7
+2024-07-29 23:45:38,562 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:38,562 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 7
+2024-07-29 23:45:38,562 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:38,562 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 7
+2024-07-29 23:45:38,589 INFO    wandb-upload_0:72897 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpv3x9cai8wandb/6vcakrr5-wandb-metadata.json
+2024-07-29 23:45:38,942 INFO    wandb-upload_1:72897 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpv3x9cai8wandb/wrj4ljjg-diff.patch
+2024-07-29 23:45:39,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:45:39,127 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/config.yaml
+2024-07-29 23:45:39,128 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/wandb-summary.json
+2024-07-29 23:45:39,128 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/output.log
+2024-07-29 23:45:40,373 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 8
+2024-07-29 23:45:40,374 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:45:40,374 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:40,374 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 8
+2024-07-29 23:45:40,374 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:40,374 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 8
+2024-07-29 23:45:40,374 INFO    SenderThread:72897 [job_builder.py:build():432] Attempting to build job artifact
+2024-07-29 23:45:40,376 INFO    SenderThread:72897 [job_builder.py:_get_source_type():565] is repo sourced job
+2024-07-29 23:45:40,376 WARNING SenderThread:72897 [job_builder.py:_log_if_verbose():267] No program path found, not creating job artifact. See https://docs.wandb.ai/guides/launch/create-job
+2024-07-29 23:45:40,376 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 9
+2024-07-29 23:45:40,376 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:40,376 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 9
+2024-07-29 23:45:40,376 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:40,376 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 9
+2024-07-29 23:45:40,376 INFO    SenderThread:72897 [dir_watcher.py:finish():358] shutting down directory watcher
+2024-07-29 23:45:41,104 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:45:41,132 INFO    Thread-12 :72897 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/output.log
+2024-07-29 23:45:41,134 INFO    SenderThread:72897 [dir_watcher.py:finish():388] scan: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files
+2024-07-29 23:45:41,135 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/diff.patch diff.patch
+2024-07-29 23:45:41,135 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/requirements.txt requirements.txt
+2024-07-29 23:45:41,135 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/output.log output.log
+2024-07-29 23:45:41,137 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/config.yaml config.yaml
+2024-07-29 23:45:41,138 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/wandb-summary.json wandb-summary.json
+2024-07-29 23:45:41,140 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml conda-environment.yaml
+2024-07-29 23:45:41,140 INFO    SenderThread:72897 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/wandb-metadata.json wandb-metadata.json
+2024-07-29 23:45:41,140 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 10
+2024-07-29 23:45:41,141 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:45:41,142 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:41,142 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 10
+2024-07-29 23:45:41,143 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:41,143 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 10
+2024-07-29 23:45:41,143 INFO    SenderThread:72897 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:45:41,586 INFO    wandb-upload_2:72897 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/config.yaml
+2024-07-29 23:45:41,594 INFO    wandb-upload_1:72897 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/output.log
+2024-07-29 23:45:41,656 INFO    wandb-upload_0:72897 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/requirements.txt
+2024-07-29 23:45:41,697 INFO    wandb-upload_3:72897 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/wandb-summary.json
+2024-07-29 23:45:41,714 INFO    wandb-upload_4:72897 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/files/conda-environment.yaml
+2024-07-29 23:45:41,918 INFO    Thread-11 (_thread_body):72897 [sender.py:transition_state():613] send defer: 11
+2024-07-29 23:45:41,919 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:41,919 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 11
+2024-07-29 23:45:41,919 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:41,920 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 11
+2024-07-29 23:45:41,920 INFO    SenderThread:72897 [file_pusher.py:join():175] waiting for file pusher
+2024-07-29 23:45:41,921 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 12
+2024-07-29 23:45:41,921 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:41,922 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 12
+2024-07-29 23:45:41,922 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:41,922 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 12
+2024-07-29 23:45:41,922 INFO    SenderThread:72897 [file_stream.py:finish():601] file stream finish called
+2024-07-29 23:45:42,094 INFO    SenderThread:72897 [file_stream.py:finish():605] file stream finish is done
+2024-07-29 23:45:42,094 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 13
+2024-07-29 23:45:42,094 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:42,095 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 13
+2024-07-29 23:45:42,095 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:42,096 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 13
+2024-07-29 23:45:42,096 INFO    SenderThread:72897 [sender.py:transition_state():613] send defer: 14
+2024-07-29 23:45:42,096 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: defer
+2024-07-29 23:45:42,096 DEBUG   SenderThread:72897 [sender.py:send():378] send: final
+2024-07-29 23:45:42,096 INFO    HandlerThread:72897 [handler.py:handle_request_defer():184] handle defer: 14
+2024-07-29 23:45:42,097 DEBUG   SenderThread:72897 [sender.py:send():378] send: footer
+2024-07-29 23:45:42,097 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: defer
+2024-07-29 23:45:42,097 INFO    SenderThread:72897 [sender.py:send_request_defer():609] handle sender defer: 14
+2024-07-29 23:45:42,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:45:42,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-29 23:45:42,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: server_info
+2024-07-29 23:45:42,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: get_summary
+2024-07-29 23:45:42,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: sampled_history
+2024-07-29 23:45:42,098 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:45:42,098 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: internal_messages
+2024-07-29 23:45:42,098 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: poll_exit
+2024-07-29 23:45:42,099 DEBUG   SenderThread:72897 [sender.py:send_request():405] send_request: server_info
+2024-07-29 23:45:42,242 INFO    MainThread:72897 [wandb_run.py:_footer_history_summary_info():3994] rendering history
+2024-07-29 23:45:42,242 INFO    MainThread:72897 [wandb_run.py:_footer_history_summary_info():4026] rendering summary
+2024-07-29 23:45:42,242 INFO    MainThread:72897 [wandb_run.py:_footer_sync_info():3953] logging synced files
+2024-07-29 23:45:42,244 DEBUG   HandlerThread:72897 [handler.py:handle_request():158] handle_request: shutdown
+2024-07-29 23:45:42,244 INFO    HandlerThread:72897 [handler.py:finish():882] shutting down handler
+2024-07-29 23:45:43,104 INFO    WriterThread:72897 [datastore.py:close():296] close: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/run-uyq0rg9d.wandb
+2024-07-29 23:45:43,247 INFO    SenderThread:72897 [sender.py:finish():1545] shutting down sender
+2024-07-29 23:45:43,247 INFO    SenderThread:72897 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-29 23:45:43,248 INFO    SenderThread:72897 [file_pusher.py:join():175] waiting for file pusher
diff --git a/wandb/run-20240729_234531-uyq0rg9d/logs/debug.log b/wandb/run-20240729_234531-uyq0rg9d/logs/debug.log
new file mode 100644
index 0000000..0e5be85
--- /dev/null
+++ b/wandb/run-20240729_234531-uyq0rg9d/logs/debug.log
@@ -0,0 +1,30 @@
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Configure stats pid to 72790
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:45:31,564 WARNING MainThread:72790 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:45:31,564 INFO    MainThread:72790 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/logs/debug.log
+2024-07-29 23:45:31,565 INFO    MainThread:72790 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234531-uyq0rg9d/logs/debug-internal.log
+2024-07-29 23:45:31,565 INFO    MainThread:72790 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:45:31,565 INFO    MainThread:72790 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:45:31,565 INFO    MainThread:72790 [wandb_init.py:init():610] starting backend
+2024-07-29 23:45:31,565 INFO    MainThread:72790 [wandb_init.py:init():614] setting up manager
+2024-07-29 23:45:31,566 INFO    MainThread:72790 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=spawn,fork,forkserver, using: spawn
+2024-07-29 23:45:31,569 INFO    MainThread:72790 [wandb_init.py:init():622] backend started and connected
+2024-07-29 23:45:31,596 INFO    MainThread:72790 [wandb_init.py:init():711] updated telemetry
+2024-07-29 23:45:31,662 INFO    MainThread:72790 [wandb_init.py:init():744] communicating run to backend with 90.0 second timeout
+2024-07-29 23:45:32,101 INFO    MainThread:72790 [wandb_run.py:_on_init():2396] communicating current version
+2024-07-29 23:45:32,222 INFO    MainThread:72790 [wandb_run.py:_on_init():2405] got version response upgrade_message: "wandb version 0.17.5 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"
+
+2024-07-29 23:45:32,223 INFO    MainThread:72790 [wandb_init.py:init():795] starting run threads in backend
+2024-07-29 23:45:38,082 INFO    MainThread:72790 [wandb_run.py:_console_start():2374] atexit reg
+2024-07-29 23:45:38,082 INFO    MainThread:72790 [wandb_run.py:_redirect():2229] redirect: wrap_raw
+2024-07-29 23:45:38,084 INFO    MainThread:72790 [wandb_run.py:_redirect():2294] Wrapping output streams.
+2024-07-29 23:45:38,084 INFO    MainThread:72790 [wandb_run.py:_redirect():2319] Redirects installed.
+2024-07-29 23:45:38,089 INFO    MainThread:72790 [wandb_init.py:init():838] run started, returning control to user process
+2024-07-29 23:45:43,251 WARNING MsgRouterThr:72790 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_234531-uyq0rg9d/run-uyq0rg9d.wandb b/wandb/run-20240729_234531-uyq0rg9d/run-uyq0rg9d.wandb
new file mode 100644
index 0000000..18ff060
Binary files /dev/null and b/wandb/run-20240729_234531-uyq0rg9d/run-uyq0rg9d.wandb differ
diff --git a/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml b/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml
new file mode 100644
index 0000000..2d5ad15
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml
@@ -0,0 +1,103 @@
+name: games
+channels:
+  - http://conda.anaconda.org/gurobi
+  - apple
+  - conda-forge
+  - defaults
+dependencies:
+  - bzip2=1.0.8=h93a5062_5
+  - ca-certificates=2024.2.2=hf0a4a13_0
+  - libffi=3.4.2=h3422bc3_5
+  - libsqlite=3.45.3=h091b4b1_0
+  - libzlib=1.2.13=h53f4e23_5
+  - ncurses=6.5=hb89a1cb_0
+  - openssl=3.3.0=hfb2fe0b_3
+  - pip=23.3.1=pyhd8ed1ab_0
+  - python=3.10.14=h2469fbe_0_cpython
+  - readline=8.2=h92ec313_1
+  - setuptools=68.2.2=pyhd8ed1ab_0
+  - tk=8.6.13=h5083fa2_1
+  - wheel=0.42.0=pyhd8ed1ab_0
+  - xz=5.2.6=h57fd34a_0
+  - pip:
+      - absl-py==2.1.0
+      - aiohttp==3.9.5
+      - aiosignal==1.3.1
+      - ale-py==0.8.1
+      - async-timeout==4.0.3
+      - atari-py==0.2.5
+      - attrs==23.2.0
+      - autorom==0.4.2
+      - autorom-accept-rom-license==0.6.1
+      - certifi==2024.2.2
+      - charset-normalizer==3.3.2
+      - click==8.1.7
+      - cloudpickle==3.0.0
+      - contourpy==1.2.1
+      - cycler==0.12.1
+      - docker-pycreds==0.4.0
+      - farama-notifications==0.0.4
+      - filelock==3.14.0
+      - fonttools==4.52.4
+      - frozenlist==1.4.1
+      - fsspec==2024.5.0
+      - gitdb==4.0.11
+      - gitpython==3.1.43
+      - grpcio==1.64.0
+      - gymnasium==0.29.1
+      - idna==3.7
+      - imageio==2.34.1
+      - importlib-resources==6.4.0
+      - jinja2==3.1.4
+      - joblib==1.4.2
+      - kiwisolver==1.4.5
+      - lazy-loader==0.4
+      - lightning==2.2.5
+      - lightning-utilities==0.11.2
+      - markdown==3.6
+      - markupsafe==2.1.5
+      - matplotlib==3.9.0
+      - mpmath==1.3.0
+      - multidict==6.0.5
+      - networkx==3.3
+      - numpy==1.26.4
+      - opencv-python==4.10.0.84
+      - packaging==24.0
+      - pandas==2.2.2
+      - pillow==10.3.0
+      - platformdirs==4.2.2
+      - protobuf==4.25.3
+      - psutil==5.9.8
+      - pygame==2.5.2
+      - pyparsing==3.1.2
+      - python-dateutil==2.9.0.post0
+      - pytorch-lightning==2.2.5
+      - pytz==2024.1
+      - pyyaml==6.0.1
+      - requests==2.32.2
+      - sb3-contrib==2.3.0
+      - scikit-image==0.23.2
+      - scikit-learn==1.5.0
+      - scipy==1.13.1
+      - sentry-sdk==2.3.1
+      - setproctitle==1.3.3
+      - shimmy==0.2.1
+      - six==1.16.0
+      - smmap==5.0.1
+      - stable-baselines3==2.3.2
+      - sympy==1.12
+      - tensorboard==2.16.2
+      - tensorboard-data-server==0.7.2
+      - threadpoolctl==3.5.0
+      - tifffile==2024.5.22
+      - torch==2.3.0
+      - torch-geometric==2.5.3
+      - torchmetrics==1.4.0.post0
+      - tqdm==4.66.4
+      - typing-extensions==4.12.0
+      - tzdata==2024.1
+      - urllib3==2.2.1
+      - wandb==0.17.0
+      - werkzeug==3.0.3
+      - yarl==1.9.4
+prefix: /Users/rishubbhatia/miniforge3/envs/games
diff --git a/wandb/run-20240729_234616-8lal1ggc/files/config.yaml b/wandb/run-20240729_234616-8lal1ggc/files/config.yaml
new file mode 100644
index 0000000..f158b3b
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/files/config.yaml
@@ -0,0 +1,212 @@
+wandb_version: 1
+
+_wandb:
+  desc: null
+  value:
+    python_version: 3.10.14
+    cli_version: 0.17.0
+    framework: torch
+    is_jupyter_run: false
+    is_kaggle_kernel: false
+    start_time: 1722289577
+    t:
+      1:
+      - 1
+      - 55
+      - 77
+      2:
+      - 1
+      - 55
+      - 77
+      3:
+      - 22
+      - 23
+      - 35
+      4: 3.10.14
+      5: 0.17.0
+      8:
+      - 4
+      - 5
+      13: darwin-arm64
+algo:
+  desc: null
+  value: PPO
+policy_class:
+  desc: null
+  value: <class 'stable_baselines3.common.policies.ActorCriticPolicy'>
+device:
+  desc: null
+  value: cpu
+verbose:
+  desc: null
+  value: 2
+policy_kwargs:
+  desc: null
+  value: '{''features_extractor_class'': <class ''games.model.policy.CustomHeteroGNN''>,
+    ''features_extractor_kwargs'': {''features_dim'': 64, ''hidden_size'': 64, ''num_layer'':
+    2, ''obj_type_id'': ''obj'', ''arity_dict'': {''ChickenOnLane'': 2, ''CarOnLane'':
+    2, ''LaneNextToLane'': 2}, ''game'': ''freeway''}}'
+num_timesteps:
+  desc: null
+  value: 0
+_total_timesteps:
+  desc: null
+  value: 100000
+_num_timesteps_at_start:
+  desc: null
+  value: 0
+seed:
+  desc: null
+  value: None
+action_noise:
+  desc: null
+  value: None
+start_time:
+  desc: null
+  value: 1722289584248963000
+learning_rate:
+  desc: null
+  value: 0.0003
+tensorboard_log:
+  desc: null
+  value: None
+_last_obs:
+  desc: null
+  value: "[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.\
+    \   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [ 77.  50.   2.   0.   0. \
+    \  0.   1.]\n  [  1. 100.   2.   0.   0.   0.   1.]\n  [ 54.  50.   2.   0.  \
+    \ 0.   0.   1.]\n  [103. 100.   1.   0.   0.   0.   1.]\n  [135.  50.   2.   0.\
+    \   0.   0.   1.]]]"
+_last_episode_starts:
+  desc: null
+  value: '[ True]'
+_last_original_obs:
+  desc: null
+  value: None
+_episode_num:
+  desc: null
+  value: 0
+use_sde:
+  desc: null
+  value: 'False'
+sde_sample_freq:
+  desc: null
+  value: -1
+_current_progress_remaining:
+  desc: null
+  value: 1.0
+_stats_window_size:
+  desc: null
+  value: 100
+ep_info_buffer:
+  desc: null
+  value: deque([], maxlen=100)
+ep_success_buffer:
+  desc: null
+  value: deque([], maxlen=100)
+_n_updates:
+  desc: null
+  value: 0
+_custom_logger:
+  desc: null
+  value: 'False'
+env:
+  desc: null
+  value: <stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x17d25d840>
+_vec_normalize_env:
+  desc: null
+  value: None
+observation_space:
+  desc: null
+  value: Box(-inf, inf, (8, 7), float32)
+action_space:
+  desc: null
+  value: Discrete(3)
+n_envs:
+  desc: null
+  value: 1
+n_steps:
+  desc: null
+  value: 2048
+gamma:
+  desc: null
+  value: 0.99
+gae_lambda:
+  desc: null
+  value: 0.95
+ent_coef:
+  desc: null
+  value: 0.0
+vf_coef:
+  desc: null
+  value: 0.5
+max_grad_norm:
+  desc: null
+  value: 0.5
+rollout_buffer_class:
+  desc: null
+  value: <class 'stable_baselines3.common.buffers.RolloutBuffer'>
+rollout_buffer_kwargs:
+  desc: null
+  value: '{}'
+batch_size:
+  desc: null
+  value: 64
+n_epochs:
+  desc: null
+  value: 10
+clip_range:
+  desc: null
+  value: <function get_schedule_fn.<locals>.<lambda> at 0x17d271bd0>
+clip_range_vf:
+  desc: null
+  value: None
+normalize_advantage:
+  desc: null
+  value: 'True'
+target_kl:
+  desc: null
+  value: None
+lr_schedule:
+  desc: null
+  value: <function get_schedule_fn.<locals>.<lambda> at 0x1220131c0>
+rollout_buffer:
+  desc: null
+  value: <stable_baselines3.common.buffers.RolloutBuffer object at 0x17d25d870>
+policy:
+  desc: null
+  value: "ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model):\
+    \ HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n\
+    \        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128,\
+    \ 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n\
+    \    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7,\
+    \ 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14,\
+    \ 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n\
+    \    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7,\
+    \ 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14,\
+    \ 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom):\
+    \ FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane):\
+    \ MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane):\
+    \ MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n   \
+    \   (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select):\
+    \ SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net):\
+    \ Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n\
+    \      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n\
+    \      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64,\
+    \ out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64,\
+    \ out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net):\
+    \ Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64,\
+    \ out_features=1, bias=True)\n)"
+_logger:
+  desc: null
+  value: <stable_baselines3.common.logger.Logger object at 0x17d1a31f0>
diff --git a/wandb/run-20240729_234616-8lal1ggc/files/diff.patch b/wandb/run-20240729_234616-8lal1ggc/files/diff.patch
new file mode 100644
index 0000000..1538f25
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/files/diff.patch
@@ -0,0 +1,7561 @@
+diff --git a/games/__pycache__/__init__.cpython-310.pyc b/games/__pycache__/__init__.cpython-310.pyc
+index 1b00a1b..347bbb7 100644
+Binary files a/games/__pycache__/__init__.cpython-310.pyc and b/games/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/encoder/GraphEncoder.py b/games/encoder/GraphEncoder.py
+index 7e34464..a0dbe69 100644
+--- a/games/encoder/GraphEncoder.py
++++ b/games/encoder/GraphEncoder.py
+@@ -286,51 +286,171 @@ class HeteroGNNEncoderPongProximity:
+ #         return data_list 
+ 
+ 
++# class GraphEncoderFreeway:
++#     def __init__(self, obj_type_id: str = "obj"):
++#         self.obj_type_id = obj_type_id
++
++#     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
++#         batch_size, num_nodes, object_feature_length = batch_node_features.shape
++#         batch_data = []
++
++#         # Precompute node types for all batches
++#         chicken_mask = batch_node_features[:, :, -3] == 1
++#         lane_mask = batch_node_features[:, :, -2] == 1
++#         car_mask = batch_node_features[:, :, -1] == 1
++
++#         for b in range(batch_size):
++#             node_features = batch_node_features[b]
++#             graph = nx.Graph()
++
++#             # Add object nodes (vectorized)
++#             graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
++
++#             chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
++#             lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
++#             car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
++
++#             # Convert to sets for faster lookups
++#             chicken_set = set(chicken_indices)
++#             lane_set = set(lane_indices)
++#             car_set = set(car_indices)
++
++#             atom_index = num_nodes
++
++#             # Add atoms and edges (can be further optimized with matrix operations)
++#             for i in range(num_nodes):
++#                 if i in chicken_set or i in car_set:
++#                     for j in lane_set:
++#                         if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++#                             atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
++#                             graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
++#                             graph.add_edge(i, atom_index, position=0)
++#                             graph.add_edge(j, atom_index, position=1)
++#                             atom_index += 1
++
++#             # Add LaneNextToLane atoms and edges
++#             for i in range(len(lane_indices) - 1):
++#                 graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
++#                 graph.add_edge(lane_indices[i], atom_index, position=0)
++#                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
++#                 atom_index += 1
++
++#             batch_data.append(graph)
++
++#         return Batch.from_data_list(self.to_pyg_data(batch_data))
++
++#     def to_pyg_data(self, batch_graphs: List[nx.Graph]) -> List[HeteroData]:
++#         data_list = []
++
++#         for graph in batch_graphs:
++#             data = HeteroData()
++#             node_index_mapping = defaultdict(dict)
++#             obj_features = []
++#             atom_features_dict = defaultdict(list)
++#             edge_dict = defaultdict(list)
++
++#             current_obj_features = []
++#             current_atom_features_dict = defaultdict(list)
++
++#             for node, attrs in graph.nodes(data=True):
++#                 node_type = attrs['type']
++#                 features = attrs['features']
++#                 if node_type == self.obj_type_id:
++#                     node_index_mapping[node_type][node] = len(current_obj_features)
++#                     current_obj_features.append(features)
++#                 else:
++#                     node_index_mapping[node_type][node] = len(current_atom_features_dict[node_type])
++#                     current_atom_features_dict[node_type].append(features)
++
++#             if current_obj_features:
++#                 obj_features.append(torch.stack(current_obj_features))
++
++#             for node_type, features_list in current_atom_features_dict.items():
++#                 if features_list:
++#                     # Flatten the features if necessary
++#                     flattened_features = [f.view(-1) for f in features_list]
++#                     atom_features_dict[node_type].append(torch.stack(flattened_features))
++
++#             if obj_features:
++#                 data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
++
++#             for node_type, features_list in atom_features_dict.items():
++#                 if features_list:
++#                     data[node_type].x = torch.cat(features_list, dim=0)
++
++#             for src, dst, attr in graph.edges(data=True):
++#                 src_type = graph.nodes[src]['type']
++#                 dst_type = graph.nodes[dst]['type']
++#                 pos = str(attr['position'])
++#                 edge_type = (src_type, pos, dst_type)
++
++#                 src_idx = node_index_mapping[src_type][src]
++#                 dst_idx = node_index_mapping[dst_type][dst]
++#                 edge_dict[edge_type].append((src_idx, dst_idx))
++#                 # Add reverse edges for bidirectionality
++#                 reverse_edge_type = (dst_type, pos, src_type)
++#                 edge_dict[reverse_edge_type].append((dst_idx, src_idx))
++
++#             for edge_type, edges in edge_dict.items():
++#                 edge_tensor = torch.tensor(edges, dtype=torch.long).t().contiguous()
++#                 data[edge_type].edge_index = edge_tensor
++
++#             data_list.append(data)
++
++#         return data_list
++
+ class GraphEncoderFreeway:
+     def __init__(self, obj_type_id: str = "obj"):
+         self.obj_type_id = obj_type_id
+ 
+     def encode(self, batch_node_features: torch.Tensor, proximity_threshold: float = 50) -> Batch:
+-        batch_size, num_nodes, object_feature_length = batch_node_features.shape
++        # remove the values from batch_node_features that have all zeros in the vector
++        # batch_node_features = batch_node_features[~torch.all(batch_node_features == 0, dim=1)]
+         batch_data = []
+-
+-        # Precompute node types for all batches
+-        chicken_mask = batch_node_features[:, :, -3] == 1
+-        lane_mask = batch_node_features[:, :, -2] == 1
+-        car_mask = batch_node_features[:, :, -1] == 1
++        batch_size = batch_node_features.size(0)
+ 
+         for b in range(batch_size):
+             node_features = batch_node_features[b]
++            num_nodes = node_features.size(0)
+             graph = nx.Graph()
+ 
+-            # Add object nodes (vectorized)
+-            graph.add_nodes_from([(i, {"type": self.obj_type_id, "features": node_features[i]}) for i in range(num_nodes)])
+-
+-            chicken_indices = chicken_mask[b].nonzero(as_tuple=True)[0].tolist()
+-            lane_indices = lane_mask[b].nonzero(as_tuple=True)[0].tolist()
+-            car_indices = car_mask[b].nonzero(as_tuple=True)[0].tolist()
++            object_feature_length = node_features.size(1)
+ 
+-            # Convert to sets for faster lookups
+-            chicken_set = set(chicken_indices)
+-            lane_set = set(lane_indices)
+-            car_set = set(car_indices)
++            # Add object nodes
++            for i in range(num_nodes):
++                graph.add_node(i, type=self.obj_type_id, features=node_features[i].tolist())
+ 
+             atom_index = num_nodes
+ 
+-            # Add atoms and edges (can be further optimized with matrix operations)
+-            for i in range(num_nodes):
+-                if i in chicken_set or i in car_set:
+-                    for j in lane_set:
+-                        if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
+-                            atom_type = "ChickenOnLane" if i in chicken_set else "CarOnLane"
+-                            graph.add_node(atom_index, type=atom_type, features=torch.zeros((2, object_feature_length)))
+-                            graph.add_edge(i, atom_index, position=0)
+-                            graph.add_edge(j, atom_index, position=1)
+-                            atom_index += 1
++            # Add ChickenOnLane atoms and edges
++            chicken_indices = [i for i in range(num_nodes) if node_features[i, -3] == 1]
++            lane_indices = [i for i in range(num_nodes) if node_features[i, -2] == 1]
++
++            for i in chicken_indices:
++                for j in lane_indices:
++                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++                        atom_features = torch.zeros((2, object_feature_length)).tolist()
++                        graph.add_node(atom_index, type="ChickenOnLane", features=atom_features)
++                        graph.add_edge(i, atom_index, position=0)
++                        graph.add_edge(j, atom_index, position=1)
++                        atom_index += 1
++
++            # Add CarOnLane atoms and edges
++            car_indices = [i for i in range(num_nodes) if node_features[i, -1] == 1]
++
++            for i in car_indices:
++                for j in lane_indices:
++                    if abs(node_features[i, 1] - node_features[j, 1]) <= proximity_threshold:
++                        atom_features = torch.zeros((2, object_feature_length)).tolist()
++                        graph.add_node(atom_index, type="CarOnLane", features=atom_features)
++                        graph.add_edge(i, atom_index, position=0)
++                        graph.add_edge(j, atom_index, position=1)
++                        atom_index += 1
+ 
+             # Add LaneNextToLane atoms and edges
+             for i in range(len(lane_indices) - 1):
+-                graph.add_node(atom_index, type="LaneNextToLane", features=torch.zeros((2, object_feature_length)))
++                atom_features = torch.zeros((2, object_feature_length)).tolist()
++                graph.add_node(atom_index, type="LaneNextToLane", features=atom_features)
+                 graph.add_edge(lane_indices[i], atom_index, position=0)
+                 graph.add_edge(lane_indices[i + 1], atom_index, position=1)
+                 atom_index += 1
+@@ -354,7 +474,7 @@ class GraphEncoderFreeway:
+ 
+             for node, attrs in graph.nodes(data=True):
+                 node_type = attrs['type']
+-                features = attrs['features']
++                features = torch.tensor(attrs['features'])
+                 if node_type == self.obj_type_id:
+                     node_index_mapping[node_type][node] = len(current_obj_features)
+                     current_obj_features.append(features)
+@@ -364,19 +484,16 @@ class GraphEncoderFreeway:
+ 
+             if current_obj_features:
+                 obj_features.append(torch.stack(current_obj_features))
+-
+             for node_type, features_list in current_atom_features_dict.items():
+                 if features_list:
+-                    # Flatten the features if necessary
+                     flattened_features = [f.view(-1) for f in features_list]
+                     atom_features_dict[node_type].append(torch.stack(flattened_features))
+ 
+             if obj_features:
+-                data[self.obj_type_id].x = torch.cat(obj_features, dim=0)
+-
++                data[self.obj_type_id].x = torch.cat(obj_features)
+             for node_type, features_list in atom_features_dict.items():
+                 if features_list:
+-                    data[node_type].x = torch.cat(features_list, dim=0)
++                    data[node_type].x = torch.cat(features_list)
+ 
+             for src, dst, attr in graph.edges(data=True):
+                 src_type = graph.nodes[src]['type']
+@@ -398,8 +515,6 @@ class GraphEncoderFreeway:
+             data_list.append(data)
+ 
+         return data_list
+-
+-    
+ class GraphEncoderFreewayProximity:
+     def __init__(self, obj_type_id: str = "obj"):
+         self.obj_type_id = obj_type_id
+diff --git a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc
+index 7f7cf70..b9ee24e 100644
+Binary files a/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc and b/games/encoder/__pycache__/GraphEncoder.cpython-310.pyc differ
+diff --git a/games/encoder/__pycache__/__init__.cpython-310.pyc b/games/encoder/__pycache__/__init__.cpython-310.pyc
+index e4059e9..7335618 100644
+Binary files a/games/encoder/__pycache__/__init__.cpython-310.pyc and b/games/encoder/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/__init__.cpython-310.pyc b/games/freeway/__pycache__/__init__.cpython-310.pyc
+index 8f6a241..ee44eda 100644
+Binary files a/games/freeway/__pycache__/__init__.cpython-310.pyc and b/games/freeway/__pycache__/__init__.cpython-310.pyc differ
+diff --git a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc
+index b518fb6..db7fb9e 100644
+Binary files a/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc and b/games/freeway/__pycache__/run_supervised_gnn.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc
+index 5560abe..bb2beb1 100644
+Binary files a/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc and b/games/freeway/freeway_envs/__pycache__/freeway_env.cpython-310.pyc differ
+diff --git a/games/freeway/freeway_envs/freeway_env.py b/games/freeway/freeway_envs/freeway_env.py
+index 9bed93d..641c4d5 100644
+--- a/games/freeway/freeway_envs/freeway_env.py
++++ b/games/freeway/freeway_envs/freeway_env.py
+@@ -724,8 +724,8 @@ class FreewayEnvConstant(gym.Env):
+         self.frame_stack = frame_stack
+ 
+         self.lanes = [100, 200, 300, 400, 500, 600, 700]
+-        self.lanes = [50,80,120]
+-        self.max_cars = 10
++        self.lanes = [50,100]
++        self.max_cars = 5
+         # Define action and observation space
+         # Actions: 0 - Stay, 1 - Move Up, 2 - Move Down
+         self.action_space = spaces.Discrete(3)
+@@ -733,8 +733,7 @@ class FreewayEnvConstant(gym.Env):
+         if observation_type == "pixel":
+             self.observation_space = spaces.Box(low=0, high=255, shape=(self.frame_stack, 84, 84), dtype=np.uint8)
+         else:
+-            self.max_objects = self.max_cars_init + 4
+-            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.max_objects, 7), dtype=np.float32)
++            self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.max_cars+ len(self.lanes)+1, 7), dtype=np.float32)
+ 
+         self.window = pygame.display.set_mode((self.window_width, self.window_height))
+         self.background_image = pygame.image.load("games/images/Atari - background.png")
+@@ -744,10 +743,9 @@ class FreewayEnvConstant(gym.Env):
+         self.car_image = pygame.image.load("games/images/car2.png").convert_alpha()
+         self.car_image = pygame.transform.scale(self.car_image, (self.car_width, self.car_height))
+         self.frame_buffer = np.zeros((self.frame_stack, 84, 84), dtype=np.uint8)
+-        self.player_speed = 0
++
+         self.clock = pygame.time.Clock()
+         self.reset()
+-
+     def seed(self, seed=None):
+         self.np_random, seed = gym.utils.seeding.np_random(seed)
+         random.seed(seed)
+@@ -762,36 +760,27 @@ class FreewayEnvConstant(gym.Env):
+                                        self.window_height - self.player_height - 10,
+                                        self.player_width, self.player_height)
+         self.score = 0
+-        lane_combinations = [[50,80,120],[50,80],[50,120],[80,120]]
+-        number_cars = [10,15,20]
+-        car_speeds = [1,2,3]
+-        self.lanes = random.choice(lane_combinations)
+-        self.max_cars = random.choice(number_cars)
+-        self.car_speed = random.choice(car_speeds)
+         self.cars = [{'x': random.randint(0, self.window_width - self.car_width),
+                       'lane': random.choice(self.lanes),
+-                      'speed': self.car_speed} for car in range(self.max_cars)]
++                      'speed': random.randint(1, 2)} for _ in range(self.max_cars)]
+         self.done = False
+         self.episode_start_time = pygame.time.get_ticks()
+         self.frame_buffer = np.zeros((self.frame_stack, 84, 84), dtype=np.uint8)
+-        self.player_speed = 0
+         if self.observation_type == "pixel":
+             for _ in range(self.frame_stack):
+-                self.frame_buffer.append(self._get_obs())
+-            return np.array(self.frame_buffer), {}
++                self.update_frame_buffer()
++            return self.get_observation(), {}
+         else:
+             return self.get_object_data(), {}
+ 
+     def step(self, action):
++        reward = 0
+         reward = -0.5
+         current_time = pygame.time.get_ticks()
+-        previous_y = self.player_rect.y
+-
+         if action == 1:  # Up
+             self.player_rect.y = max(0, self.player_rect.y - 5)
+         elif action == 2:  # Down
+             self.player_rect.y = min(self.window_height - self.player_height, self.player_rect.y + 5)
+-        self.player_speed = self.player_rect.y - previous_y
+ 
+         for car in self.cars:
+             car['x'] += car['speed']
+@@ -799,40 +788,38 @@ class FreewayEnvConstant(gym.Env):
+                 car['x'] = -random.randint(100, 300)
+                 car['speed'] = random.randint(1,2)
+ 
++        # Collision detection
+         hit = any(self.player_rect.colliderect(pygame.Rect(car['x'], car['lane'], self.car_width, self.car_height)) for car in self.cars)
+         if hit:
++            #self.score = -1
+             self.player_rect.y = self.window_height - self.player_height - 10
++        
+             self.last_time = current_time
+-        done = False
+-       
+-
++        if current_time - self.episode_start_time >= 60000:  # 60000 milliseconds = 1 minute
++            self.done = True
++            
+         if self.player_rect.y <= 0:  # Reached top
+-            self.score += 1
+-            reward += 10 * (len(self.lanes))
++            self.score +=1
++            reward += 10*(len(self.lanes))
++
+             self.player_rect.y = self.window_height - self.player_height - 10
+-        truncated = False
+-        info = {}  
++
+         if self.observation_type == "pixel":
++            self.update_frame_buffer()
+             observation = self.get_observation()
+-            return np.array(self.frame_buffer), reward, done, truncated, info
+         else:
+-            return self.get_object_data(), reward, done, truncated, info
+-
++            observation = self.get_object_data()
+ 
++        return observation, reward, self.done, False, {}
+ 
+-    def _get_obs(self):
++    def update_frame_buffer(self):
+         frame = self.render_to_array()
+-    
+-        # Convert to grayscale
+-        grayscale = rgb2gray(frame)
+-        
+-        # Normalize the grayscale image to enhance contrast
+-        normalized_frame = (grayscale - grayscale.min()) / (grayscale.max() - grayscale.min())
+-        
+-        # Resize the frame
+-        resized_frame = resize(normalized_frame, (84, 84), anti_aliasing=True, mode='reflect', preserve_range=True)
+-        
+-        return resized_frame
++        grayscale = np.dot(frame[..., :3], [0.2989, 0.5870, 0.1140]).astype(np.uint8)  # Convert to grayscale
++        resized_frame = pygame.transform.scale(pygame.surfarray.make_surface(grayscale), (84, 84))
++        frame_array = pygame.surfarray.array3d(resized_frame).transpose(1, 0, 2)[:, :, 0]
++
++        self.frame_buffer = np.roll(self.frame_buffer, shift=-1, axis=0)
++        self.frame_buffer[-1] = frame_array
+ 
+     def render_to_array(self):
+         self.window.blit(self.background_image, (0, 0))
+@@ -846,18 +833,18 @@ class FreewayEnvConstant(gym.Env):
+ 
+     def get_object_data(self):
+         objects = [
+-            [self.player_rect.x, self.player_rect.y, self.player_speed, 0, 1, 0, 0],  # Player
++            [self.player_rect.x, self.player_rect.y, 0, 0, 1, 0, 0],  # Player
+             
+         ] 
+         # add lanes
+         for lane in self.lanes:
+-            objects.append([self.window_width // 2, lane, 0, 0, 0, 1, 0])
++            objects.append([self.window_width//2, lane, 0, 0, 0, 1, 0])
+ 
+-        for car in self.cars:
++        for i, car in enumerate(self.cars):
+             objects.append([car['x'], car['lane'], car['speed'], 0, 0, 0, 1])
+ 
+-        while len(objects) < self.max_objects:
+-            objects.append([0, 0, 0, 0, 0, 0, 0])
++        # while len(objects) < self.max_cars + 10:  # Ensure the list has a constant length
++        #     objects.append([0, 0, 0, 0, 0, 0, 0])
+ 
+         return torch.tensor(objects, dtype=torch.float32)
+ 
+@@ -867,40 +854,7 @@ class FreewayEnvConstant(gym.Env):
+             self.window.blit(self.car_image, (car['x'], car['lane']))
+         self.window.blit(self.player_image, (self.player_rect.x, self.player_rect.y))
+         pygame.display.update()
+-        self.clock.tick(60)
+ 
+     def close(self):
+         pygame.quit()
+ 
+-
+-if __name__=="__main__":
+-    env = FreewayEnvConstant(render_mode='human', observation_type='graph')
+-
+-    #model = PPO.load("best_model")
+-    #model = PPO.load("ppo_freeway_pixel")
+-    #model = PPO.load("logs/Freeway-GNN-training/best_model.zip")
+-    model = PPO.load("ppo_custom_heterognn")
+-
+-    # # Evaluate the agent
+-    # mean_reward, std_reward = evaluate_policy(model, env, n_eval_episodes=1, render=True)
+-    # print(f"Mean reward: {mean_reward} ± {std_reward}")
+-
+-    obs,_ = env.reset()
+-    done = False
+-    total_reward = 0
+-    n_episodes = 10
+-    for i in range(n_episodes):
+-        while not done:
+-            action, _ = model.predict(obs)
+-            #action = env.action_space.sample()
+-            obs, reward, done, _,_ = env.step(action)
+-            total_reward += reward
+-            pygame.time.delay(50)
+-            env.render()
+-
+-        print(f"Episode {i+1}/{n_episodes}: Total reward = {total_reward}")
+-        total_reward = 0
+-        obs,_ = env.reset()
+-        done = False
+-
+-    print(f"Total reward: {total_reward}")
+\ No newline at end of file
+diff --git a/games/model/__pycache__/cnn_model.cpython-310.pyc b/games/model/__pycache__/cnn_model.cpython-310.pyc
+index aaea007..8ce27a0 100644
+Binary files a/games/model/__pycache__/cnn_model.cpython-310.pyc and b/games/model/__pycache__/cnn_model.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_gnn.cpython-310.pyc b/games/model/__pycache__/hetero_gnn.cpython-310.pyc
+index fae3973..212315f 100644
+Binary files a/games/model/__pycache__/hetero_gnn.cpython-310.pyc and b/games/model/__pycache__/hetero_gnn.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc
+index 8b8b9a9..8b90800 100644
+Binary files a/games/model/__pycache__/hetero_message_passing.cpython-310.pyc and b/games/model/__pycache__/hetero_message_passing.cpython-310.pyc differ
+diff --git a/games/model/__pycache__/policy.cpython-310.pyc b/games/model/__pycache__/policy.cpython-310.pyc
+index 57471c6..9044bb9 100644
+Binary files a/games/model/__pycache__/policy.cpython-310.pyc and b/games/model/__pycache__/policy.cpython-310.pyc differ
+diff --git a/games/model/hetero_gnn.py b/games/model/hetero_gnn.py
+index 141ee67..c1d824c 100644
+--- a/games/model/hetero_gnn.py
++++ b/games/model/hetero_gnn.py
+@@ -11,14 +11,6 @@ from torch_geometric.typing import Adj
+ 
+ from games.model.hetero_message_passing import FanInMP, FanOutMP
+ from torch_geometric.nn import GCNConv, GATConv
+-import torch
+-import torch_geometric as pyg
+-from torch import Tensor
+-from torch.nn import ModuleDict
+-from typing import Dict, Optional, List, Tuple, Union
+-from collections import defaultdict
+-from torch_geometric.data import Batch, HeteroData
+-from torch_geometric.nn import global_add_pool
+ 
+ class HeteroGNN(torch.nn.Module):
+     def __init__(
+@@ -129,122 +121,22 @@ class HeteroGNN(torch.nn.Module):
+         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
+ 
+ 
++class HeteroGCN(torch.nn.Module):
++    def __init__(self, in_channels_dict, out_channels):
++        super(HeteroGCN, self).__init__()
++        self.convs = torch.nn.ModuleDict()
++        for obj_type, in_channels in in_channels_dict.items():
++            self.convs[obj_type] = GCNConv(in_channels, out_channels)
+ 
++    def forward(self, data):
++        for obj_type in data.node_types:
++            x = data[obj_type].x
++            edge_index = data[obj_type, 'to', obj_type].edge_index
++            x = self.convs[obj_type](x, edge_index)
++            x = F.relu(x)
++            data[obj_type].x = x
+ 
+-# class HeteroGNN(torch.nn.Module):
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         num_layer: int,
+-#         obj_type_id: str,
+-#         arity_dict: Dict[str, int],
+-#         input_size: int = 7,  # Assuming initial input size is 7 for obj nodes
+-#         aggr: Optional[Union[str, pyg.nn.aggr.Aggregation]] = "sum",
+-#     ):
+-#         """
+-#         :param hidden_size: The size of object embeddings.
+-#         :param num_layer: Total number of message exchange iterations.
+-#         :param aggr: Aggregation function to be used for message passing.
+-#         :param obj_type_id: The type identifier of objects in the x_dict.
+-#         :param arity_dict: A dictionary mapping predicate names to their arity.
+-#         Creates one MLP for each predicate.
+-#         Note that predicates as well as goal-predicates are meant.
+-#         """
+-#         super().__init__()
+-
+-#         self.hidden_size: int = hidden_size
+-#         self.num_layer: int = num_layer
+-#         self.obj_type_id: str = obj_type_id
+-
+-#         # Initialize Linear layers for each node type based on arity
+-#         self.linear_layers = torch.nn.ModuleDict()
+-#         self.linear_layers[obj_type_id] = torch.nn.Linear(input_size, hidden_size)
+-#         for pred, arity in arity_dict.items():
+-#             if arity > 0:
+-#                 self.linear_layers[pred] = torch.nn.Linear(input_size * arity, hidden_size * arity)
+-
+-#         # Initialize MLPs for each predicate
+-#         mlp_dict = {
+-#             pred: HeteroGNN.mlp(hidden_size * arity, hidden_size * arity, hidden_size * arity)
+-#             for pred, arity in arity_dict.items()
+-#             if arity > 0
+-#         }
+-
+-#         self.obj_to_atom = FanOutMP(mlp_dict, src_name=obj_type_id)
+-
+-#         self.obj_update = HeteroGNN.mlp(
+-#             in_size=(hidden_size + hidden_size), hidden_size=(hidden_size + hidden_size) * 2, out_size=hidden_size
+-#         )
+-
+-#         self.atom_to_obj = FanInMP(
+-#             hidden_size=hidden_size,
+-#             dst_name=obj_type_id,
+-#             aggr=aggr,
+-#         )
+-
+-#         #self.readout = HeteroGNN.mlp(hidden_size, 2 * hidden_size, 1)
+-
+-#     def encode(self, x_dict: Dict[str, Tensor], device: torch.device) -> Dict[str, Tensor]:
+-#         # Apply linear transformation to all node types based on their arity
+-#         for k, v in x_dict.items():
+-#             arity = 1 if k == self.obj_type_id else v.size(1) // self.hidden_size
+-#             x_dict[k] = self.linear_layers[k](v.view(v.size(0), -1)).to(device)
+-#         return x_dict
+-
+-#     def layer(self, x_dict, edge_index_dict):
+-#         out = self.obj_to_atom(x_dict, edge_index_dict)
+-#         x_dict.update(out)
+-#         out = self.atom_to_obj(x_dict, edge_index_dict)
+-#         obj_emb = torch.cat([x_dict[self.obj_type_id], out[self.obj_type_id]], dim=1)
+-#         obj_emb = self.obj_update(obj_emb)
+-#         x_dict[self.obj_type_id] = obj_emb
+-        
+-
+-#     def forward(
+-#         self,
+-#         x_dict: Dict[str, Tensor],
+-#         edge_index_dict: Dict[str, Adj],
+-#         batch_dict: Optional[Dict[str, Tensor]] = None,
+-#     ):
+-#         device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+-#         x_dict = {k: v.to(device) for k, v in x_dict.items() if v.numel() != 0}
+-#         edge_index_dict = {k: v.to(device) for k, v in edge_index_dict.items() if v.numel() != 0}
+-
+-#         x_dict = self.encode(x_dict, device)  # Encode to hidden size
+-
+-#         for _ in range(self.num_layer):
+-#             self.layer(x_dict, edge_index_dict)
+-
+-#         obj_emb = x_dict[self.obj_type_id]
+-#         batch = (
+-#             batch_dict[self.obj_type_id].to(device)
+-#             if batch_dict is not None
+-#             else torch.zeros(obj_emb.shape[0], dtype=torch.long, device=obj_emb.device)
+-#         )
+-#         aggr = pyg.nn.global_add_pool(obj_emb, batch)
+-#         return aggr
+-
+-#     @staticmethod
+-#     def mlp(in_size: int, hidden_size: int, out_size: int):
+-#         return pyg.nn.MLP([in_size, hidden_size, out_size], norm=None, dropout=0.0)
+-
+-
+-# class HeteroGCN(torch.nn.Module):
+-#     def __init__(self, in_channels_dict, out_channels):
+-#         super(HeteroGCN, self).__init__()
+-#         self.convs = torch.nn.ModuleDict()
+-#         for obj_type, in_channels in in_channels_dict.items():
+-#             self.convs[obj_type] = GCNConv(in_channels, out_channels)
+-
+-#     def forward(self, data):
+-#         for obj_type in data.node_types:
+-#             x = data[obj_type].x
+-#             edge_index = data[obj_type, 'to', obj_type].edge_index
+-#             x = self.convs[obj_type](x, edge_index)
+-#             x = F.relu(x)
+-#             data[obj_type].x = x
+-
+-#         return data
++        return data
+ 
+ class HeteroGAT(torch.nn.Module):
+     def __init__(self, in_channels_dict, out_channels):
+diff --git a/games/model/hetero_message_passing.py b/games/model/hetero_message_passing.py
+index 0b4020c..230410f 100644
+--- a/games/model/hetero_message_passing.py
++++ b/games/model/hetero_message_passing.py
+@@ -1,183 +1,3 @@
+-# import abc
+-# from typing import Any, Dict, List, Optional, Union
+-
+-# import torch
+-# import torch_geometric as pyg
+-# from torch import Tensor
+-# from torch_geometric.nn import Aggregation, SimpleConv
+-# from torch_geometric.nn.conv.hetero_conv import group
+-# from torch_geometric.nn.module_dict import ModuleDict
+-# from torch_geometric.typing import Adj, EdgeType, OptPairTensor
+-
+-
+-# class HeteroRouting(torch.nn.Module):
+-#     """
+-#     Handles heterogeneous message passing very similar to pyg.nn.HeteroConv.
+-#     Instead of specifying a convolution for each EdgeType more generic rules can be used.
+-#     """
+-
+-#     def __init__(self, aggr: Optional[str | Aggregation] = None) -> None:
+-#         super().__init__()
+-#         self.aggr = aggr
+-
+-#     @abc.abstractmethod
+-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
+-#         pass
+-
+-#     @abc.abstractmethod
+-#     def _internal_forward(self, x, edges_index, edge_type: EdgeType):
+-#         pass
+-
+-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
+-#         aggregated: Dict[str, Tensor] = {}
+-#         for key, value in out_dict.items():
+-#             # hetero_conv.group does not yet support Aggregation modules
+-#             if isinstance(self.aggr, Aggregation):
+-#                 out = torch.stack(value, dim=0)
+-#                 out = self.aggr(out, dim=0)
+-#                 if out.dim() == 3 and out.shape[0] == 1:
+-#                     out = out[0]  # TODO Why does Softmax return one dim to much
+-#             else:
+-#                 out = group(value, self.aggr)
+-#             aggregated[key] = out
+-#         return aggregated
+-
+-#     def forward(self, x_dict, edge_index_dict):
+-#         """
+-#         Apply message passing to each edge_index key if the edge-type is accepted.
+-#         Calls the internal forward with a normal homogenous signature of x, edge_index
+-#         :param x_dict: Dictionary with a feature matrix for each node type
+-#         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
+-#         :return: Dictionary with each processed dst as key and their updated embedding as value.
+-#         """
+-       
+-#         out_dict: Dict[str, Any] = {}
+-#         for edge_type in edge_index_dict.keys():
+-#             src, rel, dst = edge_type
+-
+-#             if not self._accept_edge(src, rel, dst):
+-#                 continue
+-
+-#             if src == dst and src in x_dict:
+-#                 x = x_dict[src]
+-#             elif src in x_dict or dst in x_dict:
+-#                 x = (
+-#                     x_dict.get(src, None),
+-#                     x_dict.get(dst, None),
+-#                 )
+-#             else:
+-#                 raise ValueError(
+-#                     f"Neither src ({src}) nor destination ({dst})"
+-#                     + f" found in x_dict ({x_dict})"
+-#                 )
+-
+-#             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
+-#             if dst not in out_dict:
+-#                 out_dict[dst] = [out]
+-#             else:
+-#                 out_dict[dst].append(out)
+-
+-#         return self._group_out(out_dict)
+-
+-
+-# class FanOutMP(HeteroRouting):
+-#     """
+-#      Accepts EdgeTypes with the defined src_name.
+-#     1. For each destination concatenate all embeddings of the source.
+-#     2. Run the destination specific MLP on the concatenated embeddings.
+-#     3. Save the new embedding under the destination key.
+-#     FanOut should be aggregation free in theory.
+-#     Every atom gets only as many messages as the arity of its predicate.
+-#     :param update_mlp_by_dst: An MLP for each possible destination.
+-#         Needs the degree of incoming edges as input and output dimension
+-#     :param src_name: The node-type for which outgoing edges should be accepted.
+-#     """
+-
+-#     def __init__(
+-#         self,
+-#         update_mlp_by_dst: Dict[str, torch.nn.Module],
+-#         src_name: str,
+-#     ) -> None:
+-#         """ """
+-#         super().__init__()
+-#         self.update_mlp_by_dst = ModuleDict(update_mlp_by_dst)
+-#         self.simple = SimpleConv()
+-#         self.src_name = src_name
+-
+-#     def _accept_edge(self, src, rel, dst) -> bool:
+-#         return src == self.src_name
+-
+-#     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
+-#         position = int(edge_type[1])
+-        
+-#         # Debug: Print edge index and node features
+-
+-#         # Ensure edge indices are within bounds
+-#         max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
+-#         if edge_index.max() >= max_index:
+-#             raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
+-        
+-
+-#         out = self.simple(x, edge_index)
+-#         return position, out
+-
+-#     def _group_out(self, out_dict: Dict[str, List]) -> Dict[str, Tensor]:
+-#         for dst, value in out_dict.items():
+-#             sorted_out = sorted(value, key=lambda tpl: tpl[0])
+-#             stacked = torch.cat([out for _, out in sorted_out], dim=1)
+-#             out_dict[dst] = self.update_mlp_by_dst[dst](stacked)
+-
+-#         return out_dict
+-
+-
+-# class FanInMP(HeteroRouting):
+-
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         dst_name: str,
+-#         aggr: Optional[Union[str, Aggregation]] = "sum",
+-#     ) -> None:
+-#         super().__init__(aggr)
+-#         self.select = SelectMP(hidden_size)
+-#         self.dst_name = dst_name
+-
+-#     def _accept_edge(self, src: str, rel: str, dst: str) -> bool:
+-#         return dst == self.dst_name
+-
+-#     def _internal_forward(self, x, edges_index, edge_type):
+-#         return self.select(x, edges_index, int(edge_type[1]))
+-
+-
+-# class SelectMP(pyg.nn.MessagePassing):
+-
+-#     def __init__(
+-#         self,
+-#         hidden_size: int,
+-#         aggr: Optional[str | List[str]] = "sum",
+-#         aggr_kwargs: Optional[Dict[str, Any]] = None,
+-#     ) -> None:
+-#         super().__init__(
+-#             aggr,
+-#             aggr_kwargs=aggr_kwargs,
+-#         )
+-#         self.hidden = hidden_size
+-
+-#     def forward(
+-#         self, x: Union[Tensor, OptPairTensor], edge_index: Adj, position: int
+-#     ) -> Tensor:
+-#         if isinstance(x, Tensor):
+-#             x = (x, x)
+-#         return self.propagate(edge_index, x=x, position=position)
+-
+-#     def message(self, x_j: Tensor, position: int) -> Tensor:
+-#         # Take the i-th hidden-number of elements from the last dimension
+-#         # e.g from [1, 2, 3, 4, 5, 6] with hidden=2 and position=1 -> [3, 4]
+-#         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
+-#         #               split[self.position]
+-#         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
+-#         return sliced
+-
+ import abc
+ from typing import Any, Dict, List, Optional, Union
+ 
+@@ -230,6 +50,7 @@ class HeteroRouting(torch.nn.Module):
+         :param edge_index_dict: One edge_index adjacency matrix for each edge type.
+         :return: Dictionary with each processed dst as key and their updated embedding as value.
+         """
++       
+         out_dict: Dict[str, Any] = {}
+         for edge_type in edge_index_dict.keys():
+             src, rel, dst = edge_type
+@@ -251,7 +72,6 @@ class HeteroRouting(torch.nn.Module):
+                 )
+ 
+             out = self._internal_forward(x, edge_index_dict[edge_type], edge_type)
+-
+             if dst not in out_dict:
+                 out_dict[dst] = [out]
+             else:
+@@ -289,6 +109,15 @@ class FanOutMP(HeteroRouting):
+ 
+     def _internal_forward(self, x, edge_index, edge_type: EdgeType):
+         position = int(edge_type[1])
++        
++        # Debug: Print edge index and node features
++
++        # Ensure edge indices are within bounds
++        max_index = x.shape[0] if isinstance(x, torch.Tensor) else max(x[0].shape[0], x[1].shape[0])
++        if edge_index.max() >= max_index:
++            raise ValueError(f"Invalid edge index: {edge_index.max()} is out of bounds for tensor with size {max_index}")
++        
++
+         out = self.simple(x, edge_index)
+         return position, out
+ 
+@@ -347,4 +176,4 @@ class SelectMP(pyg.nn.MessagePassing):
+         # alternatively split = torch.split(x_j, self.hidden, dim=-1)
+         #               split[self.position]
+         sliced = x_j[:, position * self.hidden : (position + 1) * self.hidden]
+-        return sliced
++        return sliced
+\ No newline at end of file
+diff --git a/games/model/policy.py b/games/model/policy.py
+index 7119db4..2d9ea67 100644
+--- a/games/model/policy.py
++++ b/games/model/policy.py
+@@ -1,5 +1,3 @@
+-import pstats
+-import time
+ import torch as th
+ import torch.nn as nn
+ import gymnasium as gym
+@@ -7,53 +5,48 @@ from stable_baselines3.common.policies import ActorCriticPolicy
+ from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
+ from games.model.hetero_gnn import HeteroGNN
+ from typing import Dict
+-from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
++from games.encoder.GraphEncoder import HeteroGNNEncoderPong
+ from gymnasium import spaces
++import torch
++import torch.nn as nn
++from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
++from games.encoder.GraphEncoder import HeteroGNNEncoderPong, GraphEncoderFreeway, GraphEncoderPacman, GraphEncoderBreakout
++from games.model.hetero_gnn import HeteroGNN
+ import torch_geometric as pyg
+ from games.model.cnn_model import CNNgame
+-
++import time
+ class CustomHeteroGNN(BaseFeaturesExtractor):
+     def __init__(self, observation_space, features_dim=64, hidden_size=64, num_layer=2, obj_type_id='obj', arity_dict={'atom': 2}, game = 'pong'):
+         super().__init__(observation_space, features_dim=hidden_size)
+         if game == 'pong':
+             self.encoder = HeteroGNNEncoderPong()
+         elif game == 'freeway':
+-            self.encoder = GraphEncoderFreeway()
++            self.encoder = GraphEncoderFreeway() 
+         elif game == 'pacman':
+             self.encoder = GraphEncoderPacman()
+             self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=8)
+         elif game == 'breakout':
+             self.encoder = GraphEncoderBreakout()
+         
+-        self.counter = 0
+-
+         # set device to mps if available
+-        # self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
++        #self.device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
+         self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+-        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict).to(self.device)
++        self.model = HeteroGNN(hidden_size, num_layer, obj_type_id, arity_dict, input_size=7).to(self.device)
++
+ 
+     def forward(self, observations):
+         # Encode observations to a graph using the encoder
+-        self.counter+=1
+-        
+         start = time.time()
+         pyg_data = self.encoder.encode(observations)
+-
+         # if observations.shape[0] >1:
+         #     print(f"Time to encode: {time.time() - start}")
+ 
+-        #pyg_data = pyg_data.to(self.device) 
++        pyg_data = pyg_data.to(self.device) 
+         obj_emb = self.model(pyg_data.x_dict, pyg_data.edge_index_dict, pyg_data.batch_dict)
+         # Flatten or pool the embeddings if necessary to match the expected features_dim
+-        #print(f"Time to encode: {time.time() - start}")
+-        #total_time += 
+-        if self.counter % 2048/64 == 0:
+-            print(f"time to encode step size is: {time.time() - start}")
+-
+         return obj_emb
+ 
+ 
+-# Additional classes for the rest of the code remain unchanged
+ 
+ import torch
+ import torch.nn as nn
+@@ -101,5 +94,4 @@ class CustomCNN(BaseFeaturesExtractor):
+         
+         cnn_output = self.cnn(observations)
+         final_output = self.adjust_to_features_dim(cnn_output)
+-        return final_output
+-
++        return final_output
+\ No newline at end of file
+Submodule games/pacman contains modified content
+diff --git a/games/pacman/config.py b/games/pacman/config.py
+deleted file mode 100644
+index 73568ce..0000000
+--- a/games/pacman/config.py
++++ /dev/null
+@@ -1,40 +0,0 @@
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]+"/games/pacman"
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-# set up the colors 
+-ghostcolor = {}
+-ghostcolor[0] = (255, 0, 0, 255)
+-ghostcolor[1] = (255, 128, 255, 255)
+-ghostcolor[2] = (128, 255, 255, 255)
+-ghostcolor[3] = (255, 128, 0, 255)
+-ghostcolor[4] = (50, 50, 255, 255) # blue, vulnerable ghost
+-ghostcolor[5] = (255, 255, 255, 255) # white, flashing ghost
+\ No newline at end of file
+diff --git a/games/pacman/fruit.py b/games/pacman/fruit.py
+deleted file mode 100644
+index 51e2b1c..0000000
+--- a/games/pacman/fruit.py
++++ /dev/null
+@@ -1,112 +0,0 @@
+-from games.pacman.config import *
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        #self.thisGame = thisGame
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self, thisGame):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            #snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+diff --git a/games/pacman/game.py b/games/pacman/game.py
+deleted file mode 100644
+index 334c813..0000000
+--- a/games/pacman/game.py
++++ /dev/null
+@@ -1,214 +0,0 @@
+-from games.pacman.config import *
+-import os
+-import pygame
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self, thisFruit, player, screen):
+-        self.player = player
+-        self.screen = screen
+-        self.thisFruit = thisFruit
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 4 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self, thisLevel, tileID, tileIDImage, tileIDName):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 1 )
+-        thisLevel.LoadLevel( self.GetLevelNum(), tileID, tileIDImage , tileIDName)
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                #snd_extralife.play()
+-                self.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (self.thisFruit.imFruit[ self.thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self, thisLevel):
+-            
+-        possibleScreenX = self.player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = self.player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        self.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        self.thisLevel.LoadLevel( self.thisGame.GetLevelNum() )
+-        
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+\ No newline at end of file
+diff --git a/games/pacman/ghost.py b/games/pacman/ghost.py
+deleted file mode 100644
+index 628eb75..0000000
+--- a/games/pacman/ghost.py
++++ /dev/null
+@@ -1,174 +0,0 @@
+-from games.pacman.config import *
+-
+-class ghost ():
+-    def __init__ (self, ghostID, path, screen, player):
+-        self.player = player
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.ghostTimer = 0
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self, thisGame, tileID, tileIDImage, ghosts):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if self.player.x > self.x and self.player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif self.player.x < self.x and self.player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif self.player.x > self.x and self.player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif self.player.x < self.x and self.player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            self.screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            self.screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self, thisLevel, tileID):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay(thisLevel, tileID)
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = self.path.FindPath( (self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol) )
+-                self.FollowNextPathWay(thisLevel, tileID)
+-            
+-    def FollowNextPathWay(self, thisLevel, tileID, counter=0, max_recursion_depth=900):
+-        # Stop recursion if the maximum depth is reached
+-        if counter >= max_recursion_depth:
+-            return
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-            else:
+-                # this ghost has reached his destination!!
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (self.player.nearestRow, self.player.nearestCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1) 
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID['pellet'] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = self.path.FindPath((self.nearestRow, self.nearestCol), (randRow, randCol))
+-                    self.FollowNextPathWay(thisLevel, tileID, counter+1)
+\ No newline at end of file
+diff --git a/games/pacman/images/blue.png b/games/pacman/images/blue.png
+deleted file mode 100644
+index c633636..0000000
+Binary files a/games/pacman/images/blue.png and /dev/null differ
+diff --git a/games/pacman/images/pacman.png b/games/pacman/images/pacman.png
+deleted file mode 100644
+index d005d4d..0000000
+Binary files a/games/pacman/images/pacman.png and /dev/null differ
+diff --git a/games/pacman/images/pink.png b/games/pacman/images/pink.png
+deleted file mode 100644
+index 9614f58..0000000
+Binary files a/games/pacman/images/pink.png and /dev/null differ
+diff --git a/games/pacman/images/play.png b/games/pacman/images/play.png
+deleted file mode 100644
+index 05842b1..0000000
+Binary files a/games/pacman/images/play.png and /dev/null differ
+diff --git a/games/pacman/images/red.png b/games/pacman/images/red.png
+deleted file mode 100644
+index 5c5ea84..0000000
+Binary files a/games/pacman/images/red.png and /dev/null differ
+diff --git a/games/pacman/images/win.png b/games/pacman/images/win.png
+deleted file mode 100644
+index 728ccdf..0000000
+Binary files a/games/pacman/images/win.png and /dev/null differ
+diff --git a/games/pacman/images/yellow.png b/games/pacman/images/yellow.png
+deleted file mode 100644
+index 8db5a0a..0000000
+Binary files a/games/pacman/images/yellow.png and /dev/null differ
+diff --git a/games/pacman/level.py b/games/pacman/level.py
+deleted file mode 100644
+index b5153ee..0000000
+--- a/games/pacman/level.py
++++ /dev/null
+@@ -1,471 +0,0 @@
+-from games.pacman.config import *
+-
+-class level ():
+-    
+-    def __init__ (self, game, player, ghosts, path, Fruit, screen):
+-        self.player = player
+-        self.ghosts = ghosts
+-        self.path = path
+-        self.thisFruit = Fruit
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        self.thisLevel = level
+-        # self.snd_pellet = snd_pellet
+-        # self.snd_powerpellet = snd_powerpellet
+-        self.map = {}
+-        self.thisGame = game
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        self.screen = screen
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > self.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > self.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = self.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-    def GetWallLocations(self):
+-        wallLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.IsWall(row, col):
+-                    wallLocations.append((row, col))
+-        return wallLocations 
+-    
+-    def GetPelletLocations(self):
+-        pelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 2:
+-                    pelletLocations.append((row*16, col*16))
+-        return pelletLocations
+-    
+-    def GetPowerPelletLocations(self):
+-        powerPelletLocations = []
+-        for row in range(self.lvlHeight):
+-            for col in range(self.lvlWidth):
+-                if self.GetMapTile(row, col) == 3:
+-                    powerPelletLocations.append((row, col))
+-        return powerPelletLocations
+-    
+-
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-        
+-    # check if player has hit a pellet, powerpellet or a wall
+-    def CheckIfHit(self, playerX, playerY, row, col, tileID):
+-        
+-            for iRow in range(row - 1, row + 2, 1):
+-                for iCol in range(col - 1, col + 2, 1):
+-                
+-                    if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                        # check the offending tile ID
+-                        result = self.GetMapTile(iRow, iCol)
+-            
+-                        if result == tileID:
+-                            return True   
+-                        elif result >= 100 and result <= 199:
+-                            return True
+-                        else:
+-                            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col, tileID):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = self.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_pellet[self.player.pelletSndNum].play()
+-                        self.player.pelletSndNum = 1 - self.player.pelletSndNum
+-                        
+-                        self.pellets -= 1
+-                        
+-                        self.thisGame.AddToScore(10)
+-                        
+-                        if self.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            self.thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        self.SetMapTile(iRow, iCol, 0)
+-                        #self.snd_powerpellet.play()
+-                        
+-                        self.thisGame.AddToScore(100)
+-                        self.thisGame.ghostValue = 200
+-                        
+-                        self.thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if self.ghosts[i].state == 1:
+-                                self.ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, self.thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if self.thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    self.player.x = i * 16
+-                                    
+-                                    if self.player.velX > 0:
+-                                        self.player.x += 16
+-                                    else:
+-                                        self.player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, self.thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if self.thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    self.player.y = i * 16
+-                                    
+-                                    if self.player.velY > 0:
+-                                        self.player.y += 16
+-                                    else:
+-                                        self.player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self, tileID):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self,  tileID):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if self.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, self.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if self.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self, tileID, tileIDImage):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, self.thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, self.thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = self.thisGame.screenNearestTilePos[0] + row
+-                actualCol = self.thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        self.screen.blit (self.thisGame.imLogo, (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                        self.screen.blit(self.thisGame.imHiscores,(col*16-self.thisGame.screenPixelOffset[0],row*16-self.thisGame.screenPixelOffset[1]))
+-                    
+-              
+-                    else:
+-                        self.screen.blit (tileIDImage[ useTile ], (col * 16 - self.thisGame.screenPixelOffset[0], row * 16 - self.thisGame.screenPixelOffset[1]) )
+-    
+-    
+-    def GetCrossRef(self, tileIDName, tileID, tileIDImage):
+-        for key, value in tileIDName.items():
+-            thisID = key
+-            if thisID not in NO_GIF_TILES:
+-                tileIDImage[thisID] = pygame.image.load(os.path.join(SCRIPT_PATH, "res", "tiles", value + ".gif")).convert()
+-            else:
+-                tileIDImage[thisID] = pygame.Surface((16, 16))
+-
+-            # Change colors in tileIDImage to match maze colors
+-            for y in range(16):
+-                for x in range(16):
+-                    current_color = tileIDImage[thisID].get_at((x, y))
+-                    if current_color == (255, 206, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeLightColor)
+-                    elif current_color == (132, 0, 132, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.fillColor)
+-                    elif current_color == (255, 0, 255, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.edgeShadowColor)
+-                    elif current_color == (128, 0, 128, 255):
+-                        tileIDImage[thisID].set_at((x, y), self.pelletColor)
+-
+-
+-
+-    def LoadLevel (self, levelNum, tileID, tileIDImage, tileIDName):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    self.thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            self.player.homeX = k * 16
+-                            self.player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the self.ghosts
+-                            
+-                            self.ghosts[thisID - 10].homeX = k * 16
+-                            self.ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        self.GetCrossRef(tileIDName, tileID, tileIDImage)
+-
+-        # load map into the pathfinder object
+-        self.path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, self.path.size[0], 1):
+-            for col in range(0, self.path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    self.path.SetType( row, col, 1 )
+-                else:
+-                    self.path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart(tileID)
+-        
+-    def Restart (self, tileID):
+-        
+-        for i in range(0, 4, 1):
+-            # move self.ghosts back to home
+-
+-            self.ghosts[i].x = self.ghosts[i].homeX
+-            self.ghosts[i].y = self.ghosts[i].homeY
+-            self.ghosts[i].velX = 0
+-            self.ghosts[i].velY = 0
+-            self.ghosts[i].state = 1
+-            self.ghosts[i].speed = 1
+-            self.ghosts[i].Move(self, tileID)
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            self.ghosts[i].currentPath = self.path.FindPath( (self.ghosts[i].nearestRow, self.ghosts[i].nearestCol), (randRow, randCol) )
+-            self.ghosts[i].FollowNextPathWay(self, tileID)
+-            
+-        self.thisFruit.active = False
+-            
+-        self.thisGame.fruitTimer = 0
+-
+-        self.player.x = self.player.homeX
+-        self.player.y = self.player.homeY
+-        self.player.velX = 0
+-        self.player.velY = 0
+-        
+-        self.player.anim_pacmanCurrent = self.player.anim_pacmanS
+-        self.player.animFrame = 3
+-
+-
+diff --git a/games/pacman/pacman.py b/games/pacman/pacman.py
+deleted file mode 100644
+index 70436f3..0000000
+--- a/games/pacman/pacman.py
++++ /dev/null
+@@ -1,686 +0,0 @@
+-import random
+-import pygame
+-import numpy as np
+-from pygame.math import Vector2
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-        # create a 2d grid numpy array of 20x20
+-
+-
+-
+-    
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-        self.ghost_eating = False
+-        self.position = Vector2(x, y)  # Current position as a vector
+-        self.goal = Vector2()  # Goal position initialized to zero vector
+-        self.directions = {
+-            'up': Vector2(0, -1),
+-            'down': Vector2(0, 1),
+-            'left': Vector2(-1, 0),
+-            'right': Vector2(1, 0)
+-        }
+-
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-   
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-    
+-
+-
+-class Ghost(Player):
+-    """
+-    Class to handle ghosts, inheriting from Player.
+-    """
+-    def __init__(self, x, y, filename, game):
+-        super().__init__(x, y, filename)
+-        self.game = game
+-
+-    def update_behavior(self, pacman):
+-        self.mode = "flee" if pacman.ghost_eating else "chase"
+-
+-    def move(self, pacman):
+-        self.update_behavior(pacman)
+-        direction = self.chase_pacman() if self.mode == "chase" else self.run_away_from_pacman()
+-        if direction:
+-            movement = self.calculate_movement(direction)
+-            self.change_speed(*movement)
+-
+-    def chase_pacman(self):
+-        return self.goal_direction(self.game.game_map)
+-
+-    def run_away_from_pacman(self):
+-        furthest_point = self.find_furthest_point()
+-        self.set_goal(*furthest_point)
+-        return self.goal_direction(self.game.game_map)
+-
+-    def find_furthest_point(self):
+-        max_distance = 0
+-        furthest_point = (self.rect.x, self.rect.y)
+-        for y in range(self.game.path_finder.size[0]):
+-            for x in range(self.game.path_finder.size[1]):
+-                if self.game.game_map[y][x] == 0:
+-                    distance = (Vector2(x, y) - self.position).length_squared()
+-                    if distance > max_distance:
+-                        max_distance = distance
+-                        furthest_point = (x, y)
+-        return furthest_point
+-
+-    def goal_direction(self, game_map):
+-        TILEWIDTH = 30
+-        distances = []
+-        directions = list(self.directions.keys())
+-        for direction in directions:
+-            next_position = self.position + self.directions[direction] * TILEWIDTH
+-            if game_map[int(next_position.y // TILEWIDTH)][int(next_position.x // TILEWIDTH)] == 1:
+-                distances.append(float('inf'))
+-            else:
+-                vec = next_position - self.goal
+-                distances.append(vec.length_squared())
+-        if min(distances) == float('inf'):
+-            return None
+-        else:
+-            index = distances.index(min(distances))
+-            return directions[index]
+-
+-    def calculate_movement(self, direction):
+-        movement_map = {
+-            'up': (0, -30),
+-            'down': (0, 30),
+-            'left': (-30, 0),
+-         'right': (30, 0)
+-        }
+-        return movement_map.get(direction, (0, 0)) 
+-    
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.cell_size = 30
+-        self.grid_width = 20
+-        self.grid_height = 20
+-        #self.path_finder = path_finder()
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-       
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        self.block_list = pygame.sprite.RenderPlain()
+-        self.ghost_list = pygame.sprite.RenderPlain()
+-        self.pacman_collide = pygame.sprite.RenderPlain()
+-        self.wall_list = self.setup_walls()
+-
+-        self.gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        self.pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(self.pacman)
+-        self.pacman_collide.add(self.pacman)
+-
+-        self.ghost_two = Ghost(w, b_h, 'images/red.png', self)
+-        self.ghost_list.add(self.ghost_two)
+-        self.all_sprites_list.add(self.ghost_two)
+-
+-        self.ghost_one = Ghost(w, m_h, 'images/pink.png', self)
+-        self.ghost_list.add(self.ghost_one)
+-        self.all_sprites_list.add(self.ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png',self)
+-        self.ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png',self)
+-        self.ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-        grid = [[0 for _ in range(19)] for _ in range(19)]
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, self.wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, self.pacman_collide, False)
+-                    if b_collide:
+-                        grid[row][column] = 1
+-
+-                        continue
+-
+-                    elif p_collide:
+-                        grid[row][column] = 0
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        grid[row][column] = 0
+-                        self.block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # create new grid which is 20x20 with edges as 1 from grid
+-        
+-        new_grid = [[1 if i == 0 or i == 19 or j == 0 or j == 19 else grid[i-1][j-1] for j in range(20)] for i in range(20)] 
+-        self.game_map = new_grid
+-        self.path_finder.ResizeMap(20, 20)
+-        self.update_path_finder_with_walls(new_grid)
+-        blocks = list(self.block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-        self.power_pellet_list = pygame.sprite.RenderPlain()
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            self.power_pellet_list.add(power_pellet)
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        self.bll = len(self.block_list)
+-
+-
+-   
+-
+-    def update_path_finder_with_walls(self, grid):
+-        for i in range(len(grid[0])):
+-            for j in range(len(grid[1])):
+-                self.path_finder.SetType(i,j, grid[i][j])
+-
+-
+-
+-    def get_maze_size(self):
+-        max_width = 0
+-        max_height = 0
+-
+-        for wall in self.walls:
+-            x, y, width, height = wall
+-            # Calculate the furthest extents of the walls
+-            max_width = max(max_width, x + width)
+-            max_height = max(max_height, y + height)
+-
+-        return max_width, max_height
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate 
+-    
+-
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-
+-
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-       
+-
+-        
+-                
+-       
+-
+-        # Get the unique row indices
+-
+-        
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        self.pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        self.pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        self.pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        self.pacman.change_speed(0, -30)
+-
+-            self.pacman.update(self.wall_list, self.gate) 
+-
+-            # Assuming new_grid is your grid
+-            
+-
+-            # Check if the two grids are the same
+-            # print(f"new_grid_np: {new_grid_np}")
+-            # print(f"path_finder_grid: {path_finder_grid}")
+-            # print(f"Are the grids equal? {are_grids_equal}")
+-        # whic
+-            #self.ghost_one.move(self.pacman)
+-            self.ghost_two.move(self.pacman)
+-            # ghost_three.move(pacman)
+-            # ghost_four.move(pacman)
+-
+-            # ghost_one.update(wall_list, None)
+-            self.ghost_two.update(self.wall_list, None)
+-            print(f"Ghost Two position: {self.ghost_two.rect.x}, {self.ghost_two.rect.y}")
+-            print("Is Ghost Two in all_sprites_list?", self.ghost_two in self.all_sprites_list)
+-            print("Is Ghost Two in ghost_list?", self.ghost_two in self.ghost_list)
+-            # ghost_three.update(wall_list, None)
+-            # ghost_four.update(wall_list, None)
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(self.pacman, self.block_list, True) 
+-            power_pellets_hit_list = pygame.sprite.spritecollide(self.pacman, self.power_pellet_list, True)
+-            # check if pacman hits any power pellet
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            self.wall_list.draw(self.screen)
+-            self.gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            self.ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(self.bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == self.bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(self.pacman, self.ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    self.block_list,
+-                    self.ghost_list,
+-                    self.pacman_collide,
+-                    self.wall_list,
+-                    self.gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_env.py b/games/pacman/pacman_env.py
+deleted file mode 100644
+index e185f02..0000000
+--- a/games/pacman/pacman_env.py
++++ /dev/null
+@@ -1,370 +0,0 @@
+-import gym
+-from gym import spaces
+-import pygame
+-import numpy as np
+-import os
+-import sys
+-from pygame.locals import *
+-import time
+-# Import your game modules
+-from games.pacman.player import pacman
+-from games.pacman.ghost import ghost
+-from games.pacman.path import path_finder
+-from games.pacman.level import level
+-from games.pacman.game import game
+-from games.pacman.fruit import fruit
+-from games.pacman.config import *
+-import networkx as nx
+-from games.encoder.GraphEncoder import GraphConverter
+-
+-class PacmanEnv(gym.Env):
+-    metadata = {'render.modes': ['human', 'rgb_array']}
+-    def __init__(self):
+-        super(PacmanEnv, self).__init__()
+-
+-        # Action space (4 directions)
+-        self.action_space = spaces.Discrete(4)  # [Up, Down, Left, Right]
+-
+-        # Observation space (Assuming a RGB image of the screen)
+-        self.observation_space = spaces.Box(low=0, high=255,
+-                                            shape=(self.window_height, self.window_width, 3 * self.frame_stack),
+-                                            dtype=np.uint8)
+-        # Initialize the game
+-        pygame.init()
+-        self.window = pygame.display.set_mode((1, 1))
+-        img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-        pygame.display.set_caption("Pacman")
+-        self.screen = pygame.display.get_surface()
+-        self.tileID = {}
+-        self.tileIDName = {}
+-        self.tileIDImage = {}
+-        self.NO_GIF_TILES = set()
+-        self.path = path_finder()
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen)
+-        self.frame_stack = 4 
+-        self.window_width = 336
+-        self.window_height = 400
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        self.load_resources()
+-
+-
+-    def load_resources(self):
+-        lineNum = 0
+-        self.SCRIPT_PATH = os.path.dirname(__file__)
+-        res_path = os.path.join(self.SCRIPT_PATH, "res")
+-        # Load background images
+-        self.img_Background = pygame.image.load(os.path.join(res_path, "backgrounds", "1.gif")).convert()
+-        
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-
+-        # Load tile images and other assets by initializing the cross-reference data structures
+-          # Define this properly based on your game's requirements
+-
+-        # Assume crossref.txt has the mappings from tile ID to tile names and their associated images
+-        for i in f.readlines():
+-            # print " ========= Line " + str(lineNum) + " ============ "
+-            while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-            while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-            str_splitBySpace = i.split(' ')
+-            
+-            j = str_splitBySpace[0]
+-                
+-            if (j == "'" or j == "" or j == "#"):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-            else:
+-                # print str(wordNum) + ". " + j
+-                useLine = True
+-            
+-            if useLine == True:
+-                self.tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-                self.tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-                
+-                thisID = int(str_splitBySpace[0])
+-                if not thisID in NO_GIF_TILES:
+-                    self.tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-                else:
+-                        self.tileIDImage[ thisID ] = pygame.Surface((16,16))
+-                
+-                # change colors in tileIDImage to match maze colors
+-                for y in range(0, 16, 1):
+-                    for x in range(0, 16, 1):
+-                    
+-                        if self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                            # wall edge
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeLightColor )
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                            # wall fill
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.fillColor ) 
+-
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.edgeShadowColor )   
+-                            
+-                        elif self.tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                            # pellet color
+-                            self.tileIDImage[ thisID ].set_at( (x, y), self.level.pelletColor )   
+-                    
+-                # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-            lineNum += 1
+-    
+-    def reset(self):
+-        # Reset the game
+-                # Load resources
+-        #self.load_resources()
+-        
+-        # Game components
+-        self.player = pacman(self.path, self.screen)
+-        self.ghosts = {i: ghost(i, self.path, self.screen, self.player) for i in range(6)}
+-        self.fruit = fruit()
+-        self.game = game(self.fruit, self.player, self.screen)
+-        self.level = level(self.game, self.player, self.ghosts, self.path, self.fruit, self.screen) 
+-        self.load_resources()
+-        #self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.clock = pygame.time.Clock()
+-        self.game.StartNewGame(self.level, self.tileID, self.tileIDImage, self.tileIDName)
+-        self.level.LoadLevel( self.game.GetLevelNum(), self.tileID, self.tileIDImage, self.tileIDName )
+-        self.window = pygame.display.set_mode( self.game.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-        self.frame_buffer = np.zeros((self.window_height, self.window_width, 3 * self.frame_stack), dtype=np.uint8)
+-        return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def step(self, action):
+-        reward = 0
+-        done = False
+-        # Map action to game controls
+-        #print(self.game.mode)
+-        if self.game.mode == 1:
+-            if action == 0:
+-                if not self.level.CheckIfHitWall(self.player.x + self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = self.player.speed
+-                    self.player.velY = 0
+-                    
+-            elif action == 1:
+-                if not self.level.CheckIfHitWall(self.player.x - self.player.speed, self.player.y, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = -self.player.speed
+-                    self.player.velY = 0
+-                
+-            elif action == 2:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.speed, self.player.nearestRow, self.player.nearestCol): 
+-                    self.player.velX = 0
+-                    self.player.velY = self.player.speed
+-                
+-            elif action == 3:
+-                if not self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.speed, self.player.nearestRow, self.player.nearestCol):
+-                    self.player.velX = 0
+-                    self.player.velY = -self.player.speed
+-            # Game logic
+-            
+-            score = self.game.score
+-            self.game.modeTimer += 1
+-            self.player.Move(self.game, self.level, self.ghosts, self.fruit, self.tileID)
+-            for ghost in self.ghosts.values():
+-                ghost.Move(self.level, self.tileID)
+-           
+-            new_score = self.game.score
+-            reward = new_score - score  # Reward for eating pellets
+-            #reward = eaten_pellets * 10  # Reward for eating pellets
+-
+-        elif self.game.mode == 2:
+-                reward = -100
+-                self.game.modeTimer += 1
+-        
+-                if self.game.modeTimer == 90:
+-                    self.level.Restart(self.tileID)
+-                #self.level.Restart(self.tileID)
+-                self.game.lives -= 1
+-                if self.game.lives == -1:
+-                    done = True
+-            
+-        elif self.game.mode == 5:
+-            reward = 100
+-            self.game.mode = 1
+-        
+-        elif self.game.mode == 6:
+-            reward = 1000
+-            done = True
+-
+-
+-        info = self.get_graph_data()  # Additional data, not used now but required by Gym's API
+-
+-            # Get observation
+-        observation = self._get_observation()
+-
+-        return observation, reward, done, info
+-
+-      # Return initial state
+-    def _get_observation(self):
+-        # You can also choose to return other representations of the game state
+-        frame = pygame.surfarray.array3d(pygame.display.get_surface())
+-        frame = frame.transpose((1, 0, 2))  # Correct the shape to (height, width, channels)
+-        # Update frame buffer
+-        self.frame_buffer = np.roll(self.frame_buffer, -3, axis=2)
+-        self.frame_buffer[:, :, -3:] = frame
+-        return self.frame_buffer
+-
+-    
+-    def get_graph_data(self):
+-        # Initialize a NetworkX graph
+-        graph = nx.Graph()
+-
+-        # Define object features and add nodes
+-        pacman_features = [self.player.x, self.player.y, self.player.velX, self.player.velY, 1, 0, 0, 0]
+-        graph.add_node("pacman", type="object", features=pacman_features)
+-
+-        ghost_features = [[ghost.x, ghost.y, ghost.velX, ghost.velY,0,1,0,0] for ghost in self.ghosts.values()]
+-        for i, features in enumerate(ghost_features):
+-            graph.add_node(f"ghost_{i}", type="object", features=features)
+-
+-        pellet_features = [[pellet[0], pellet[1],0,0,0,0,1,0] for pellet in self.level.GetPelletLocations()]
+-        for i, features in enumerate(pellet_features):
+-            graph.add_node(f"pellet_{i}", type="object", features=features)
+-
+-        power_pellet_features = [[pellet[0], pellet[1],0,0,0,0,0,1] for pellet in self.level.GetPowerPelletLocations()]
+-        for i, features in enumerate(power_pellet_features):
+-            graph.add_node(f"power_pellet_{i}", type="object", features=features)
+-
+-        # Combine object positions
+-        object_positions = {
+-            "pacman": pacman_features[:2],
+-        }
+-        for i, ghost in enumerate(self.ghosts.values()):
+-            object_positions[f"ghost_{i}"] = ghost_features[i][:2]
+-        for i, pellet in enumerate(self.level.GetPelletLocations()):
+-            object_positions[f"pellet_{i}"] = pellet_features[i][:2]
+-        for i, power_pellet in enumerate(self.level.GetPowerPelletLocations()):
+-            object_positions[f"power_pellet_{i}"] = power_pellet_features[i][:2]
+-
+-        # Proximity threshold for creating atoms
+-        #proximity_threshold = self.proximity_threshold
+-
+-        # Create atom nodes and edges based on proximity
+-        atom_index = len(object_positions)  # Start indexing atoms after all objects
+-
+-        # Determine wall proximity around Pac-Man
+-        walls = {
+-            'up': self.level.CheckIfHitWall(self.player.x, self.player.y - self.player.velY, self.player.y - 1, self.player.x),
+-            'down': self.level.CheckIfHitWall(self.player.x, self.player.y + self.player.velY, self.player.y + 1, self.player.x),
+-            'left': self.level.CheckIfHitWall(self.player.x - self.player.velX, self.player.y, self.player.y, self.player.x - 1),
+-            'right': self.level.CheckIfHitWall(self.player.x + self.player.velX, self.player.y, self.player.y, self.player.x + 1)
+-        }
+-
+-        standard_feature_vector_size = len(pacman_features)
+-        empty_feature_vector = [0] *(2* standard_feature_vector_size)
+-
+-        # Add wall direction atoms and edges for Pac-Man
+-        for direction, hit in walls.items():
+-            if hit:
+-                atom_node = f"Wall{direction.capitalize()}_{atom_index}"
+-                graph.add_node(atom_node, type="atom", features=empty_feature_vector, predicate=f"Wall{direction.capitalize()}")
+-                graph.add_edge("pacman", atom_node, position=0)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for ghosts
+-        for i, ghost_pos in enumerate(ghost_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(ghost_pos[:2]))
+-            direction = np.array(pacman_features[:2]) - np.array(ghost_pos[:2])
+-            
+-            atom_node_distance = f"Distance_Pacman_Ghost_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"ghost_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-            if pacman_features[0] == ghost_pos[0]:
+-                atom_node_same_row = f"SameRow_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_row, features=empty_feature_vector,type="atom", predicate="SameRow")
+-                graph.add_edge("pacman", atom_node_same_row, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_row, position=1)
+-                atom_index += 1
+-
+-            if pacman_features[1] == ghost_pos[1]:
+-                atom_node_same_column = f"SameColumn_Pacman_Ghost_{i}_{atom_index}"
+-                graph.add_node(atom_node_same_column, features=empty_feature_vector, type="atom", predicate="SameColumn")
+-                graph.add_edge("pacman", atom_node_same_column, position=0)
+-                graph.add_edge(f"ghost_{i}", atom_node_same_column, position=1)
+-                atom_index += 1
+-
+-        # Add distance and direction atoms and edges for pellets
+-        for i, pellet_pos in enumerate(pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_Pellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance, features=empty_feature_vector,type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Add distance and direction atoms and edges for power pellets
+-        for i, power_pellet_pos in enumerate(power_pellet_features):
+-            distance = np.linalg.norm(np.array(pacman_features[:2]) - np.array(power_pellet_pos[:2]))
+-            
+-            atom_node_distance = f"Distance_Pacman_PowerPellet_{i}_{atom_index}"
+-            graph.add_node(atom_node_distance,features=empty_feature_vector, type="atom", predicate="Distance")
+-            graph.add_edge("pacman", atom_node_distance, position=0)
+-            graph.add_edge(f"power_pellet_{i}", atom_node_distance, position=1)
+-            
+-            atom_index += 1
+-
+-        # Create a GraphConverter object
+-        converter = GraphConverter()
+-
+-        # Convert the NetworkX graph to a PyG Data object
+-        data = converter.to_pyg_data(graph)
+-        return data
+-    
+-
+-    
+-    def render(self, mode='human'):
+-        self.screen.blit(self.img_Background, (0, 0))
+-        self.level.DrawMap(self.tileID, self.tileIDImage)
+-        
+-        if self.game.fruitScoreTimer > 0:
+-            if self.game.modeTimer % 2 == 0:
+-                self.game.DrawNumber (2500, self.fruit.x - self.game.screenPixelPos[0] - 16, self.fruit.y - self.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            self.ghosts[i].Draw(self.game,self.tileID, self.tileIDImage, self.ghosts)
+-        self.fruit.Draw(self.game)
+-        self.player.Draw(self.game)
+-        if mode == 'human':
+-            
+-            pygame.display.flip()
+-        elif mode == 'rgb_array':
+-            return pygame.surfarray.array3d(pygame.display.get_surface())
+-
+-    def close(self):
+-        pygame.quit()
+-
+-# Usage Example
+-if __name__ == "__main__":
+-    env = PacmanEnv()
+-    obs = env.reset()
+-    done = False
+-
+-    while not done:
+-        #env.render()  # Ensure the environment is rendered every loop
+-        action = env.action_space.sample()
+-        
+-        obs, reward, done, info = env.step(action)
+-        if reward<0:
+-            print("Ghost collision")
+-        #print(f"Action: {action}, Reward: {reward}")
+-        #time.sleep(0.1)  # Add a delay to make changes observable
+-
+-        if done:
+-            print("Game Over. Restarting...")
+-            obs = env.reset()
+-            done = False
+-            time.sleep(2)  # Pause before restarting
+-
+-    env.close()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_new.py b/games/pacman/pacman_new.py
+deleted file mode 100644
+index 1baea23..0000000
+--- a/games/pacman/pacman_new.py
++++ /dev/null
+@@ -1,1583 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-
+-# WIN???
+-SCRIPT_PATH=sys.path[0]
+-
+-# NO_GIF_TILES -- tile numbers which do not correspond to a GIF file
+-# currently only "23" for the high-score list
+-NO_GIF_TILES=[23]
+-
+-NO_WX=0 # if set, the high-score code will not attempt to ask the user his name
+-USER_NAME="User" # USER_NAME=os.getlogin() # the default user name if wx fails to load or NO_WX
+-
+-# Joystick defaults - maybe add a Preferences dialog in the future?
+-JS_DEVNUM=0 # device 0 (pygame joysticks always start at 0). if JS_DEVNUM is not a valid device, will use 0
+-JS_XAXIS=0 # axis 0 for left/right (default for most joysticks)
+-JS_YAXIS=1 # axis 1 for up/down (default for most joysticks)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-
+-# Must come before pygame.init()
+-pygame.mixer.pre_init(22050,16,2,512)
+-JS_STARTBUTTON=0 # button number to start the game. this is a matter of personal preference, and will vary from device to device
+-pygame.mixer.init()
+-
+-clock = pygame.time.Clock()
+-pygame.init()
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-class game ():
+-
+-    def defaulthiscorelist(self):
+-            return [ (100000,"David") , (80000,"Andy") , (60000,"Count Pacula") , (40000,"Cleopacra") , (20000,"Brett Favre") , (10000,"Sergei Pachmaninoff") ]
+-
+-    def gethiscores(self):
+-            """If res/hiscore.txt exists, read it. If not, return the default high scores.
+-               Output is [ (score,name) , (score,name) , .. ]. Always 6 entries."""
+-            try:
+-              f=open(os.path.join(SCRIPT_PATH,"res","hiscore.txt"))
+-              hs=[]
+-              for line in f:
+-                while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-                while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-                score=int(line.split(" ")[0])
+-                name=line.partition(" ")[2]
+-                if score>99999999: score=99999999
+-                if len(name)>22: name=name[:22]
+-                hs.append((score,name))
+-              f.close()
+-              if len(hs)>6: hs=hs[:6]
+-              while len(hs)<6: hs.append((0,""))
+-              return hs
+-            except IOError:
+-              return self.defaulthiscorelist()
+-              
+-    def writehiscores(self,hs):
+-            """Given a new list, write it to the default file."""
+-            fname=os.path.join(SCRIPT_PATH,"res","hiscore.txt")
+-            f=open(fname,"w")
+-            for line in hs:
+-              f.write(str(line[0])+" "+line[1]+"\n")
+-            f.close()
+-            
+-    def getplayername(self):
+-            """Ask the player his name, to go on the high-score list."""
+-            if NO_WX: return USER_NAME
+-            try:
+-              import wx
+-            except:
+-              print("Pacman Error: No module wx. Can not ask the user his name!")
+-              print( "     :(       Download wx from http://www.wxpython.org/")
+-              print( "     :(       To avoid seeing this error again, set NO_WX in file pacman.pyw.")
+-              return USER_NAME
+-            app=wx.App(None)
+-            dlog=wx.TextEntryDialog(None,"You made the high-score list! Name:")
+-            dlog.ShowModal()
+-            name=dlog.GetValue()
+-            dlog.Destroy()
+-            app.Destroy()
+-            return name
+-              
+-    def updatehiscores(self,newscore):
+-            """Add newscore to the high score list, if appropriate."""
+-            hs=self.gethiscores()
+-            for line in hs:
+-              if newscore>=line[0]:
+-                hs.insert(hs.index(line),(newscore,self.getplayername()))
+-                hs.pop(-1)
+-                break
+-            self.writehiscores(hs)
+-
+-    def makehiscorelist(self):
+-            "Read the High-Score file and convert it to a useable Surface."
+-            # My apologies for all the hard-coded constants.... -Andy
+-            f=pygame.font.Font(os.path.join(SCRIPT_PATH,"res","VeraMoBd.ttf"),10)
+-            scoresurf=pygame.Surface((276,86),pygame.SRCALPHA)
+-            scoresurf.set_alpha(200)
+-            linesurf=f.render(" "*18+"HIGH SCORES",1,(255,255,0))
+-            scoresurf.blit(linesurf,(0,0))
+-            hs=self.gethiscores()
+-            vpos=0
+-            for line in hs:
+-              vpos+=12
+-              linesurf=f.render(line[1].rjust(22)+str(line[0]).rjust(9),1,(255,255,255))
+-              scoresurf.blit(linesurf,(0,vpos))
+-            return scoresurf
+-            
+-    def drawmidgamehiscores(self):
+-            """Redraw the high-score list image after pacman dies."""
+-            self.imHiscores=self.makehiscorelist()
+-
+-    def __init__ (self):
+-        self.levelNum = 0
+-        self.score = 0
+-        self.lives = 3
+-        
+-        # game "mode" variable
+-        # 1 = normal
+-        # 2 = hit ghost
+-        # 3 = game over
+-        # 4 = wait to start
+-        # 5 = wait after eating ghost
+-        # 6 = wait after finishing level
+-        self.mode = 0
+-        self.modeTimer = 0
+-        self.ghostTimer = 0
+-        self.ghostValue = 0
+-        self.fruitTimer = 0
+-        self.fruitScoreTimer = 0
+-        self.fruitScorePos = (0, 0)
+-        
+-        self.SetMode( 3 )
+-        
+-        # camera variables
+-        self.screenPixelPos = (0, 0) # absolute x,y position of the screen from the upper-left corner of the level
+-        self.screenNearestTilePos = (0, 0) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (0, 0) # offset in pixels of the screen from its nearest-tile position
+-        
+-        self.screenTileSize = (23, 21)
+-        self.screenSize = (self.screenTileSize[1] * 16, self.screenTileSize[0] * 16)
+-
+-        # numerical display digits
+-        self.digit = {}
+-        for i in range(0, 10, 1):
+-            self.digit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text",str(i) + ".gif")).convert()
+-        self.imLife = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","life.gif")).convert()
+-        self.imGameOver = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","gameover.gif")).convert()
+-        self.imReady = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","ready.gif")).convert()
+-        self.imLogo = pygame.image.load(os.path.join(SCRIPT_PATH,"res","text","logo.gif")).convert()
+-        self.imHiscores = self.makehiscorelist()
+-        
+-    def StartNewGame (self):
+-        self.levelNum = 1
+-        self.score = 0
+-        self.lives = 3
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-            
+-    def AddToScore (self, amount):
+-        
+-        extraLifeSet = [25000, 50000, 100000, 150000]
+-        
+-        for specialScore in extraLifeSet:
+-            if self.score < specialScore and self.score + amount >= specialScore:
+-                snd_extralife.play()
+-                thisGame.lives += 1
+-        
+-        self.score += amount
+-        
+-    
+-    def DrawScore (self):
+-        self.DrawNumber (self.score, 24 + 16, self.screenSize[1] - 24 )
+-            
+-        for i in range(0, self.lives, 1):
+-            screen.blit (self.imLife, (24 + i * 10 + 16, self.screenSize[1] - 12) )
+-            
+-        screen.blit (thisFruit.imFruit[ thisFruit.fruitType ], (4 + 16, self.screenSize[1] - 20) )
+-            
+-        if self.mode == 3:
+-            screen.blit (self.imGameOver, (self.screenSize[0] / 2 - 32, self.screenSize[1] / 2 - 10) )
+-        elif self.mode == 4:
+-            screen.blit (self.imReady, (self.screenSize[0] / 2 - 20, self.screenSize[1] / 2 + 12) )
+-            
+-        self.DrawNumber (self.levelNum, 0, self.screenSize[1] - 12 )
+-            
+-    def DrawNumber (self, number, x, y):
+-        strNumber = str(int(number))
+-        for i in range(0, len(strNumber), 1):
+-            iDigit = int(strNumber[i])
+-            screen.blit (self.digit[ iDigit ], (x + i * 9, y) )
+-        
+-    def SmartMoveScreen (self):
+-            
+-        possibleScreenX = player.x - self.screenTileSize[1] / 2 * 16
+-        possibleScreenY = player.y - self.screenTileSize[0] / 2 * 16
+-        
+-        if possibleScreenX < 0:
+-            possibleScreenX = 0
+-        elif possibleScreenX > thisLevel.lvlWidth * 16 - self.screenSize[0]:
+-            possibleScreenX = thisLevel.lvlWidth * 16 - self.screenSize[0]
+-            
+-        if possibleScreenY < 0:
+-            possibleScreenY = 0
+-        elif possibleScreenY > thisLevel.lvlHeight * 16 - self.screenSize[1]:
+-            possibleScreenY = thisLevel.lvlHeight * 16 - self.screenSize[1]
+-        
+-        thisGame.MoveScreen( possibleScreenX, possibleScreenY )
+-        
+-    def MoveScreen (self, newX, newY ):
+-        self.screenPixelPos = (newX, newY)
+-        self.screenNearestTilePos = (int(newY / 16), int(newX / 16)) # nearest-tile position of the screen from the UL corner
+-        self.screenPixelOffset = (newX - self.screenNearestTilePos[1]*16, newY - self.screenNearestTilePos[0]*16)
+-        
+-    def GetScreenPos (self):
+-        return self.screenPixelPos
+-        
+-    def GetLevelNum (self):
+-        return self.levelNum
+-    
+-    def SetNextLevel (self):
+-        self.levelNum += 1
+-        
+-        self.SetMode( 4 )
+-        thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-        
+-        player.velX = 0
+-        player.velY = 0
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        
+-        
+-    def SetMode (self, newMode):
+-        self.mode = newMode
+-        self.modeTimer = 0
+-        # print " ***** GAME MODE IS NOW ***** " + str(newMode)
+-        
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    def draw (self):
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-            
+-                thisTile = self.GetType((row, col))
+-                screen.blit (tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+-class ghost ():
+-    def __init__ (self, ghostID):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.id = ghostID
+-        
+-        # ghost "state" variable
+-        # 1 = normal
+-        # 2 = vulnerable
+-        # 3 = spectacles
+-        self.state = 1
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.currentPath = ""
+-        
+-        self.anim = {}
+-        for i in range(1, 7, 1):
+-            self.anim[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","ghost " + str(i) + ".gif")).convert()
+-            
+-            # change the ghost color in this frame
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if self.anim[i].get_at( (x, y) ) == (255, 0, 0, 255):
+-                        # default, red ghost body color
+-                        self.anim[i].set_at( (x, y), ghostcolor[ self.id ] )
+-            
+-        self.animFrame = 1
+-        self.animDelay = 0
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        
+-        # ghost eyes --
+-        for y in range(4, 8, 1):
+-            for x in range(3, 7, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (255, 255, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (255, 255, 255, 255) )
+-                
+-                if player.x > self.x and player.y > self.y:
+-                    #player is to lower-right
+-                    pupilSet = (5, 6)
+-                elif player.x < self.x and player.y > self.y:
+-                    #player is to lower-left
+-                    pupilSet = (3, 6)
+-                elif player.x > self.x and player.y < self.y:
+-                    #player is to upper-right
+-                    pupilSet = (5, 4)
+-                elif player.x < self.x and player.y < self.y:
+-                    #player is to upper-left
+-                    pupilSet = (3, 4)
+-                else:
+-                    pupilSet = (4, 6)
+-                    
+-        for y in range(pupilSet[1], pupilSet[1] + 2, 1):
+-            for x in range(pupilSet[0], pupilSet[0] + 2, 1):
+-                self.anim[ self.animFrame ].set_at( (x, y), (0, 0, 255, 255) )  
+-                self.anim[ self.animFrame ].set_at( (x+6, y), (0, 0, 255, 255) )    
+-        # -- end ghost eyes
+-        
+-        if self.state == 1:
+-            # draw regular ghost (this one)
+-            screen.blit (self.anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        elif self.state == 2:
+-            # draw vulnerable ghost
+-            
+-            if thisGame.ghostTimer > 100:
+-                # blue
+-                screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            else:
+-                # blue/white flashing
+-                tempTimerI = int(thisGame.ghostTimer / 10)
+-                if tempTimerI == 1 or tempTimerI == 3 or tempTimerI == 5 or tempTimerI == 7 or tempTimerI == 9:
+-                    screen.blit (ghosts[5].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-                else:
+-                    screen.blit (ghosts[4].anim[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-            
+-        elif self.state == 3:
+-            # draw glasses
+-            screen.blit (tileIDImage[ tileID[ 'glasses' ] ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 6 or thisGame.mode == 7:
+-            # don't animate ghost if the level is complete
+-            return False
+-        
+-        self.animDelay += 1
+-        
+-        if self.animDelay == 2:
+-            self.animFrame += 1 
+-        
+-            if self.animFrame == 7:
+-                # wrap to beginning
+-                self.animFrame = 1
+-                
+-            self.animDelay = 0
+-            
+-    def Move (self):
+-        
+-
+-        self.x += self.velX
+-        self.y += self.velY
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        if (self.x % 16) == 0 and (self.y % 16) == 0:
+-            # if the ghost is lined up with the grid again
+-            # meaning, it's time to go to the next path item
+-            
+-            if (self.currentPath):
+-                self.currentPath = self.currentPath[1:]
+-                self.FollowNextPathWay()
+-        
+-            else:
+-                self.x = self.nearestCol * 16
+-                self.y = self.nearestRow * 16
+-            
+-                # chase pac-man
+-                self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                self.FollowNextPathWay()
+-            
+-    def FollowNextPathWay (self):
+-        
+-        # print "Ghost " + str(self.id) + " rem: " + self.currentPath
+-        
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-                    
+-            else:
+-                # this ghost has reached his destination!!
+-                
+-                if not self.state == 3:
+-                    # chase pac-man
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (player.nearestRow, player.nearestCol) )
+-                    self.FollowNextPathWay()
+-                
+-                else:
+-                    # glasses found way back to ghost box
+-                    self.state = 1
+-                    self.speed = self.speed / 4
+-                    
+-                    # give ghost a path to a random spot (containing a pellet)
+-                    (randRow, randCol) = (0, 0)
+-
+-                    while not thisLevel.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                        randRow = random.randint(1, thisLevel.lvlHeight - 2)
+-                        randCol = random.randint(1, thisLevel.lvlWidth - 2)
+-
+-                    self.currentPath = path.FindPath( (self.nearestRow, self.nearestCol), (randRow, randCol) )
+-                    self.FollowNextPathWay()
+-
+-class fruit ():
+-    def __init__ (self):
+-        # when fruit is not in use, it's in the (-1, -1) position off-screen.
+-        self.slowTimer = 0
+-        self.x = -16
+-        self.y = -16
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 1
+-        self.active = False
+-        
+-        self.bouncei = 0
+-        self.bounceY = 0
+-        
+-        self.nearestRow = (-1, -1)
+-        self.nearestCol = (-1, -1)
+-        
+-        self.imFruit = {}
+-        for i in range(0, 5, 1):
+-            self.imFruit[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","fruit " + str(i) + ".gif")).convert()
+-        
+-        self.currentPath = ""
+-        self.fruitType = 1
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3 or self.active == False:
+-            return False
+-        
+-        screen.blit (self.imFruit[ self.fruitType ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1] - self.bounceY))
+-
+-            
+-    def Move (self):
+-        
+-        if self.active == False:
+-            return False
+-        
+-        self.bouncei += 1
+-        if self.bouncei == 1:
+-            self.bounceY = 2
+-        elif self.bouncei == 2:
+-            self.bounceY = 4
+-        elif self.bouncei == 3:
+-            self.bounceY = 5
+-        elif self.bouncei == 4:
+-            self.bounceY = 5
+-        elif self.bouncei == 5:
+-            self.bounceY = 6
+-        elif self.bouncei == 6:
+-            self.bounceY = 6
+-        elif self.bouncei == 9:
+-            self.bounceY = 6
+-        elif self.bouncei == 10:
+-            self.bounceY = 5
+-        elif self.bouncei == 11:
+-            self.bounceY = 5
+-        elif self.bouncei == 12:
+-            self.bounceY = 4
+-        elif self.bouncei == 13:
+-            self.bounceY = 3
+-        elif self.bouncei == 14:
+-            self.bounceY = 2
+-        elif self.bouncei == 15:
+-            self.bounceY = 1
+-        elif self.bouncei == 16:
+-            self.bounceY = 0
+-            self.bouncei = 0
+-            snd_fruitbounce.play()
+-        
+-        self.slowTimer += 1
+-        if self.slowTimer == 2:
+-            self.slowTimer = 0
+-            
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            self.nearestRow = int(((self.y + 8) / 16))
+-            self.nearestCol = int(((self.x + 8) / 16))
+-
+-            if (self.x % 16) == 0 and (self.y % 16) == 0:
+-                # if the fruit is lined up with the grid again
+-                # meaning, it's time to go to the next path item
+-                
+-                if len(self.currentPath) > 0:
+-                    self.currentPath = self.currentPath[1:]
+-                    self.FollowNextPathWay()
+-            
+-                else:
+-                    self.x = self.nearestCol * 16
+-                    self.y = self.nearestRow * 16
+-                    
+-                    self.active = False
+-                    thisGame.fruitTimer = 0
+-            
+-    def FollowNextPathWay (self):
+-        
+-
+-        # only follow this pathway if there is a possible path found!
+-        if not self.currentPath == False:
+-        
+-            if len(self.currentPath) > 0:
+-                if self.currentPath[0] == "L":
+-                    (self.velX, self.velY) = (-self.speed, 0)
+-                elif self.currentPath[0] == "R":
+-                    (self.velX, self.velY) = (self.speed, 0)
+-                elif self.currentPath[0] == "U":
+-                    (self.velX, self.velY) = (0, -self.speed)
+-                elif self.currentPath[0] == "D":
+-                    (self.velX, self.velY) = (0, self.speed)
+-
+-class pacman ():
+-    
+-    def __init__ (self):
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self):
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos()[0]+1, thisLevel.GetGhostBoxPos()[1]) )
+-                        ghosts[i].FollowNextPathWay()
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos()
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+-class level ():
+-    
+-    def __init__ (self):
+-        self.lvlWidth = 0
+-        self.lvlHeight = 0
+-        self.edgeLightColor = (255, 255, 0, 255)
+-        self.edgeShadowColor = (255, 150, 0, 255)
+-        self.fillColor = (0, 255, 255, 255)
+-        self.pelletColor = (255, 255, 255, 255)
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        self.powerPelletBlinkTimer = 0
+-        
+-    def SetMapTile (self, row, col, newValue):
+-        self.map[ (row * self.lvlWidth) + col ] = newValue
+-        
+-    def GetMapTile (self, row, col):
+-        if row >= 0 and row < self.lvlHeight and col >= 0 and col < self.lvlWidth:
+-            return self.map[ (row * self.lvlWidth) + col ]
+-        else:
+-            return 0
+-    
+-    def IsWall (self, row, col):
+-    
+-        if row > thisLevel.lvlHeight - 1 or row < 0:
+-            return True
+-        
+-        if col > thisLevel.lvlWidth - 1 or col < 0:
+-            return True
+-    
+-        # check the offending tile ID
+-        result = thisLevel.GetMapTile(row, col)
+-
+-        # if the tile was a wall
+-        if result >= 100 and result <= 199:
+-            return True
+-        else:
+-            return False
+-    
+-                    
+-    def CheckIfHitWall (self, possiblePlayerX, possiblePlayerY, row, col):
+-    
+-        numCollisions = 0
+-        
+-        # check each of the 9 surrounding tiles for a collision
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (possiblePlayerX - (iCol * 16) < 16) and (possiblePlayerX - (iCol * 16) > -16) and (possiblePlayerY - (iRow * 16) < 16) and (possiblePlayerY - (iRow * 16) > -16):
+-                    
+-                    if self.IsWall(iRow, iCol):
+-                        numCollisions += 1
+-                        
+-        if numCollisions > 0:
+-            return True
+-        else:
+-            return False
+-        
+-        
+-    def CheckIfHit (self, playerX, playerY, x, y, cushion):
+-    
+-        if (playerX - x < cushion) and (playerX - x > -cushion) and (playerY - y < cushion) and (playerY - y > -cushion):
+-            return True
+-        else:
+-            return False
+-
+-
+-    def CheckIfHitSomething (self, playerX, playerY, row, col):
+-    
+-        for iRow in range(row - 1, row + 2, 1):
+-            for iCol in range(col - 1, col + 2, 1):
+-            
+-                if  (playerX - (iCol * 16) < 16) and (playerX - (iCol * 16) > -16) and (playerY - (iRow * 16) < 16) and (playerY - (iRow * 16) > -16):
+-                    # check the offending tile ID
+-                    result = thisLevel.GetMapTile(iRow, iCol)
+-        
+-                    if result == tileID[ 'pellet' ]:
+-                        # got a pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_pellet[player.pelletSndNum].play()
+-                        player.pelletSndNum = 1 - player.pelletSndNum
+-                        
+-                        thisLevel.pellets -= 1
+-                        
+-                        thisGame.AddToScore(10)
+-                        
+-                        if thisLevel.pellets == 0:
+-                            # no more pellets left!
+-                            # WON THE LEVEL
+-                            thisGame.SetMode( 6 )
+-                            
+-                        
+-                    elif result == tileID[ 'pellet-power' ]:
+-                        # got a power pellet
+-                        thisLevel.SetMapTile(iRow, iCol, 0)
+-                        snd_powerpellet.play()
+-                        
+-                        thisGame.AddToScore(100)
+-                        thisGame.ghostValue = 200
+-                        
+-                        thisGame.ghostTimer = 360
+-                        for i in range(0, 4, 1):
+-                            if ghosts[i].state == 1:
+-                                ghosts[i].state = 2
+-                        
+-                    elif result == tileID[ 'door-h' ]:
+-                        # ran into a horizontal door
+-                        for i in range(0, thisLevel.lvlWidth, 1):
+-                            if not i == iCol:
+-                                if thisLevel.GetMapTile(iRow, i) == tileID[ 'door-h' ]:
+-                                    player.x = i * 16
+-                                    
+-                                    if player.velX > 0:
+-                                        player.x += 16
+-                                    else:
+-                                        player.x -= 16
+-                                        
+-                    elif result == tileID[ 'door-v' ]:
+-                        # ran into a vertical door
+-                        for i in range(0, thisLevel.lvlHeight, 1):
+-                            if not i == iRow:
+-                                if thisLevel.GetMapTile(i, iCol) == tileID[ 'door-v' ]:
+-                                    player.y = i * 16
+-                                    
+-                                    if player.velY > 0:
+-                                        player.y += 16
+-                                    else:
+-                                        player.y -= 16
+-                                        
+-    def GetGhostBoxPos (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'ghost-door' ]:
+-                    return (row, col)
+-                
+-        return False
+-    
+-    def GetPathwayPairPos (self):
+-        
+-        doorArray = []
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            for col in range(0, self.lvlWidth, 1):
+-                if self.GetMapTile(row, col) == tileID[ 'door-h' ]:
+-                    # found a horizontal door
+-                    doorArray.append( (row, col) )
+-                elif self.GetMapTile(row, col) == tileID[ 'door-v' ]:
+-                    # found a vertical door
+-                    doorArray.append( (row, col) )
+-        
+-        if len(doorArray) == 0:
+-            return False
+-        
+-        chosenDoor = random.randint(0, len(doorArray) - 1)
+-        
+-        if self.GetMapTile( doorArray[chosenDoor][0],doorArray[chosenDoor][1] ) == tileID[ 'door-h' ]:
+-            # horizontal door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlWidth, 1):
+-                if not i == doorArray[chosenDoor][1]:
+-                    if thisLevel.GetMapTile(doorArray[chosenDoor][0], i) == tileID[ 'door-h' ]:
+-                        return doorArray[chosenDoor], (doorArray[chosenDoor][0], i)
+-        else:
+-            # vertical door was chosen
+-            # look for the opposite one
+-            for i in range(0, thisLevel.lvlHeight, 1):
+-                if not i == doorArray[chosenDoor][0]:
+-                    if thisLevel.GetMapTile(i, doorArray[chosenDoor][1]) == tileID[ 'door-v' ]:
+-                        return doorArray[chosenDoor], (i, doorArray[chosenDoor][1])
+-                    
+-        return False
+-        
+-    def PrintMap (self):
+-        
+-        for row in range(0, self.lvlHeight, 1):
+-            outputLine = ""
+-            for col in range(0, self.lvlWidth, 1):
+-            
+-                outputLine += str( self.GetMapTile(row, col) ) + ", "
+-                
+-            # print outputLine
+-            
+-    def DrawMap (self):
+-        
+-        self.powerPelletBlinkTimer += 1
+-        if self.powerPelletBlinkTimer == 60:
+-            self.powerPelletBlinkTimer = 0
+-        
+-        for row in range(-1, thisGame.screenTileSize[0] +1, 1):
+-            outputLine = ""
+-            for col in range(-1, thisGame.screenTileSize[1] +1, 1):
+-
+-                # row containing tile that actually goes here
+-                actualRow = thisGame.screenNearestTilePos[0] + row
+-                actualCol = thisGame.screenNearestTilePos[1] + col
+-
+-                useTile = self.GetMapTile(actualRow, actualCol)
+-                if not useTile == 0 and not useTile == tileID['door-h'] and not useTile == tileID['door-v']:
+-                    # if this isn't a blank tile
+-
+-                    if useTile == tileID['pellet-power']:
+-                        if self.powerPelletBlinkTimer < 30:
+-                            screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-
+-                    elif useTile == tileID['showlogo']:
+-                        screen.blit (thisGame.imLogo, (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-                    
+-                    elif useTile == tileID['hiscores']:
+-                            screen.blit(thisGame.imHiscores,(col*16-thisGame.screenPixelOffset[0],row*16-thisGame.screenPixelOffset[1]))
+-                    
+-                    else:
+-                        screen.blit (tileIDImage[ useTile ], (col * 16 - thisGame.screenPixelOffset[0], row * 16 - thisGame.screenPixelOffset[1]) )
+-        
+-    def LoadLevel (self, levelNum):
+-        
+-        self.map = {}
+-        
+-        self.pellets = 0
+-        
+-        f = open(os.path.join(SCRIPT_PATH,"res","levels",str(levelNum) + ".txt"), 'r')
+-        # ANDY -- edit this
+-        #fileOutput = f.read()
+-        #str_splitByLine = fileOutput.split('\n')
+-        lineNum=-1
+-        rowNum = 0
+-        useLine = False
+-        isReadingLevelData = False
+-          
+-        for line in f:
+-
+-          lineNum += 1
+-        
+-            # print " ------- Level Line " + str(lineNum) + " -------- "
+-          while len(line)>0 and (line[-1]=="\n" or line[-1]=="\r"): line=line[:-1]
+-          while len(line)>0 and (line[0]=="\n" or line[0]=="\r"): line=line[1:]
+-          str_splitBySpace = line.split(' ')
+-            
+-            
+-          j = str_splitBySpace[0]
+-                
+-          if (j == "'" or j == ""):
+-                # comment / whitespace line
+-                # print " ignoring comment line.. "
+-                useLine = False
+-          elif j == "#":
+-                # special divider / attribute line
+-                useLine = False
+-                
+-                firstWord = str_splitBySpace[1]
+-                
+-                if firstWord == "lvlwidth":
+-                    self.lvlWidth = int( str_splitBySpace[2] )
+-                    # print "Width is " + str( self.lvlWidth )
+-                    
+-                elif firstWord == "lvlheight":
+-                    self.lvlHeight = int( str_splitBySpace[2] )
+-                    # print "Height is " + str( self.lvlHeight )
+-                    
+-                elif firstWord == "edgecolor":
+-                    # edge color keyword for backwards compatibility (single edge color) mazes
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgelightcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeLightColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "edgeshadowcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.edgeShadowColor = (red, green, blue, 255)
+-                
+-                elif firstWord == "fillcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.fillColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "pelletcolor":
+-                    red = int( str_splitBySpace[2] )
+-                    green = int( str_splitBySpace[3] )
+-                    blue = int( str_splitBySpace[4] )
+-                    self.pelletColor = (red, green, blue, 255)
+-                    
+-                elif firstWord == "fruittype":
+-                    thisFruit.fruitType = int( str_splitBySpace[2] )
+-                    
+-                elif firstWord == "startleveldata":
+-                    isReadingLevelData = True
+-                        # print "Level data has begun"
+-                    rowNum = 0
+-                    
+-                elif firstWord == "endleveldata":
+-                    isReadingLevelData = False
+-                    # print "Level data has ended"
+-                    
+-          else:
+-                useLine = True
+-                
+-                
+-            # this is a map data line   
+-          if useLine == True:
+-                
+-                if isReadingLevelData == True:
+-                        
+-                    # print str( len(str_splitBySpace) ) + " tiles in this column"
+-                    
+-                    for k in range(0, self.lvlWidth, 1):
+-                        self.SetMapTile(rowNum, k, int(str_splitBySpace[k]) )
+-                        
+-                        thisID = int(str_splitBySpace[k])
+-                        if thisID == 4: 
+-                            # starting position for pac-man
+-                            
+-                            player.homeX = k * 16
+-                            player.homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                            
+-                        elif thisID >= 10 and thisID <= 13:
+-                            # one of the ghosts
+-                            
+-                            ghosts[thisID - 10].homeX = k * 16
+-                            ghosts[thisID - 10].homeY = rowNum * 16
+-                            self.SetMapTile(rowNum, k, 0 )
+-                        
+-                        elif thisID == 2:
+-                            # pellet
+-                            
+-                            self.pellets += 1
+-                            
+-                    rowNum += 1
+-                    
+-                
+-        # reload all tiles and set appropriate colors
+-        GetCrossRef()
+-
+-        # load map into the pathfinder object
+-        path.ResizeMap( self.lvlHeight, self.lvlWidth )
+-        
+-        for row in range(0, path.size[0], 1):
+-            for col in range(0, path.size[1], 1):
+-                if self.IsWall( row, col ):
+-                    path.SetType( row, col, 1 )
+-                else:
+-                    path.SetType( row, col, 0 )
+-        
+-        # do all the level-starting stuff
+-        self.Restart()
+-        
+-    def Restart (self):
+-        
+-        for i in range(0, 4, 1):
+-            # move ghosts back to home
+-
+-            ghosts[i].x = ghosts[i].homeX
+-            ghosts[i].y = ghosts[i].homeY
+-            ghosts[i].velX = 0
+-            ghosts[i].velY = 0
+-            ghosts[i].state = 1
+-            ghosts[i].speed = 1
+-            ghosts[i].Move()
+-            
+-            # give each ghost a path to a random spot (containing a pellet)
+-            (randRow, randCol) = (0, 0)
+-
+-            while not self.GetMapTile(randRow, randCol) == tileID[ 'pellet' ] or (randRow, randCol) == (0, 0):
+-                randRow = random.randint(1, self.lvlHeight - 2)
+-                randCol = random.randint(1, self.lvlWidth - 2)
+-            
+-            # print "Ghost " + str(i) + " headed towards " + str((randRow, randCol))
+-            ghosts[i].currentPath = path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (randRow, randCol) )
+-            ghosts[i].FollowNextPathWay()
+-            
+-        thisFruit.active = False
+-            
+-        thisGame.fruitTimer = 0
+-
+-        player.x = player.homeX
+-        player.y = player.homeY
+-        player.velX = 0
+-        player.velY = 0
+-        
+-        player.anim_pacmanCurrent = player.anim_pacmanS
+-        player.animFrame = 3
+-
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 3:
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame()
+-            
+-
+-    
+-#      _____________________________________________
+-# ___/  function: Get ID-Tilename Cross References  \______________________________________ 
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-
+-# create the pacman
+-player = pacman()
+-
+-# create a path_finder object
+-path = path_finder()
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i)
+-    
+-# create piece of fruit
+-thisFruit = fruit()
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-# create game and level objects and load first level
+-thisGame = game()
+-thisLevel = level()
+-thisLevel.LoadLevel( thisGame.GetLevelNum() )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move()
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move()
+-        thisFruit.Move()
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisLevel.Restart()
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen()
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap()
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw()
+-        thisFruit.Draw()
+-        player.Draw()
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+\ No newline at end of file
+diff --git a/games/pacman/pacman_old.py b/games/pacman/pacman_old.py
+deleted file mode 100644
+index fc711fe..0000000
+--- a/games/pacman/pacman_old.py
++++ /dev/null
+@@ -1,970 +0,0 @@
+-import pygame
+-import random
+-import numpy as np
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1 
+-
+-
+-class path_finder ():
+-    
+-    def __init__ (self):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    
+-        
+-class Color:
+-    """
+-    Class to store hex values for colors/
+-    """
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-        self.black = (0, 0, 0)
+-        self.grey = (100, 100, 100)
+-        self.white = (255, 255, 255)
+-        self.blue = (0, 0, 255)
+-        self.green = (0, 255, 0)
+-        self.red = (255, 0, 0)
+-        self.purple = (255, 0, 255)
+-        self.yellow = (255, 255, 0)
+-
+-class PowerUp(pygame.sprite.Sprite):
+-    def __init__(self, x, y):
+-        super().__init__()
+-        self.image = pygame.Surface([20, 20])
+-        self.image.fill(Color().purple)  # Color indicating special power-up
+-        self.rect = self.image.get_rect()
+-        self.rect.x = x
+-        self.rect.y = y
+-        self.type = 'eat_ghosts'  # Specific type for eating ghosts
+-        self.duration = 7000  # Lasts for 7 seconds
+-
+-    def apply_effect(self, player):
+-        if self.type == 'eat_ghosts':
+-            player.enable_ghost_eating(self.duration)
+-
+-
+-class Wall(pygame.sprite.Sprite):
+-    def __init__(self, x, y, width, height, color):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        :param color:
+-        :type color:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Make a wall, of the size specified in the parameters
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(color)
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-
+-
+-class Block(pygame.sprite.Sprite):
+-    """
+-    This class represents the ball
+-    It derives from the "Sprite" class in Pygame
+-    """
+-
+-    def __init__(self, color, width, height):
+-        """
+-        Constructor. Pass in the color of the block and its x and y position
+-        :param color:
+-        :type color:
+-        :param width:
+-        :type width:
+-        :param height:
+-        :type height:
+-        """
+-
+-        # Call the parent class (Sprite) constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Create an image of the block, and fill it with a color.
+-        # This could also be an image loaded from the disk.
+-        self.color = Color()
+-        self.image = pygame.Surface([width, height])
+-        self.image.fill(self.color.white)
+-        self.image.set_colorkey(self.color.white)
+-        pygame.draw.ellipse(self.image, color, [0, 0, width, height])
+-
+-        # Fetch the rectangle object that has the dimensions of the image.
+-        # Update the position of this object by setting the values
+-        # of rect.x and rect.y
+-        self.rect = self.image.get_rect()
+-
+-
+-class Player(pygame.sprite.Sprite):
+-    """
+-    This class represents the bar at the bottom that the player controls
+-    """
+-
+-    change_x = 0
+-    change_y = 0
+-
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor function
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        :param filename:
+-        :type filename:
+-        """
+-
+-        # Call the parent's constructor
+-        pygame.sprite.Sprite.__init__(self)
+-
+-        # Set height, width
+-        self.image = pygame.image.load(filename).convert()
+-
+-        # Make our top-left corner the passed-in location.
+-        self.rect = self.image.get_rect()
+-        self.rect.top = y
+-        self.rect.left = x
+-        self.prev_x = x
+-        self.prev_y = y
+-        self.goal = None
+-
+-    def prev_direction(self):
+-        """
+-        Clear the speed of the player
+-        """
+-        self.prev_x = self.change_x
+-        self.prev_y = self.change_y
+-
+-    def change_speed(self, x, y):
+-        """
+-        Change the speed of the player
+-        :param x:
+-        :type x:
+-        :param y:
+-        :type y:
+-        """
+-        self.change_x += x
+-        self.change_y += y
+-
+-    def update(self, walls, gate):
+-        """
+-        Find a new position for the player
+-        :param walls: 
+-        :type walls: 
+-        :param gate: 
+-        :type gate: 
+-        """
+-        for event in pygame.event.get():
+-            if event.type == pygame.USEREVENT + 3:  # Timer for ghost eating power-up
+-                self.ghost_eating = False
+-        # Get the old position, in case we need to go back to it
+-        old_x = self.rect.left
+-        new_x = old_x + self.change_x
+-        self.rect.left = new_x
+-
+-        old_y = self.rect.top
+-        new_y = old_y + self.change_y
+-
+-        x_collide = pygame.sprite.spritecollide(self, walls, False)
+-        if x_collide:
+-            self.rect.left = old_x
+-        else:
+-            self.rect.top = new_y
+-            y_collide = pygame.sprite.spritecollide(self, walls, False)
+-            if y_collide:
+-                self.rect.top = old_y
+-
+-        if gate:
+-            gate_hit = pygame.sprite.spritecollide(self, gate, False)
+-            if gate_hit:
+-                self.rect.left = old_x
+-                self.rect.top = old_y 
+-    
+-    def enable_ghost_eating(self, duration):
+-        self.ghost_eating = True
+-        pygame.time.set_timer(pygame.USEREVENT + 3, duration)
+-
+-
+-
+-class Ghost(Player):
+-    def __init__(self, x, y, filename):
+-        """
+-        Constructor Function
+-        """
+-        super().__init__(x, y, filename)
+-        self.ghost_eating = False 
+-        self.goal = None
+-    """
+-    Class to handle ghosts
+-    """
+-    def flee_or_chase(self, player):
+-        """
+-        Determine if the ghost should flee from or chase the player
+-        :param player: the player character, Pacman
+-        """
+-        if player.ghost_eating:
+-            self.run_away_from_pacman(player)
+-        else:
+-            self.chase_pacman(player)
+-
+-    def run_away_from_pacman(self, player):
+-        """
+-        Set direction away from Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost moves in the opposite direction of Pacman
+-        self.change_x = -5 if dx > 0 else 5
+-        self.change_y = -5 if dy > 0 else 5
+-
+-    def chase_pacman(self, player):
+-        """
+-        Set direction towards Pacman
+-        :param player: the player character, Pacman
+-        """
+-        pacman_x, pacman_y = player.rect.center
+-        ghost_x, ghost_y = self.rect.center
+-        dx, dy = pacman_x - ghost_x, pacman_y - ghost_y
+-        # Ghost reduces the distance to Pacman
+-        self.change_x = 5 if dx > 0 else -5
+-        self.change_y = 5 if dy > 0 else -5
+-
+-    def ghost_change_speed(self, direction_list, ghost, turn, steps, l):
+-        """
+-        Change the speed of the ghost
+-        :param direction_list: 
+-        :type direction_list: 
+-        :param ghost: 
+-        :type ghost: 
+-        :param turn: 
+-        :type turn: 
+-        :param steps: 
+-        :type steps: 
+-        :param l: 
+-        :type l: 
+-        :return: 
+-        :rtype: 
+-        """
+-        try:
+-            z = direction_list[turn][2]
+-            if steps < z:
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps += 1
+-            else:
+-                if turn < l:
+-                    turn += 1
+-                elif ghost == 'ghost_four':
+-                    turn = 2
+-                else:
+-                    turn = 0
+-                self.change_x = direction_list[turn][0]
+-                self.change_y = direction_list[turn][1]
+-                steps = 0
+-            return [turn, steps]
+-        except IndexError:
+-            return [0, 0]
+-
+-
+-class Game:
+-    """
+-    Class to run the game.
+-    """
+-
+-    def __init__(self):
+-        """
+-        Constructor Function
+-        """
+-
+-        # This is a list of walls. Each is in the form [x, y, width, height]
+-        self.walls = [
+-            [0, 0, 6, 600],
+-            [0, 0, 600, 6],
+-            [0, 600, 606, 6],
+-            [600, 0, 6, 606],
+-            [300, 0, 6, 66],
+-            [60, 60, 186, 6],
+-            [360, 60, 186, 6],
+-            [60, 120, 66, 6],
+-            [60, 120, 6, 126],
+-            [180, 120, 246, 6],
+-            [300, 120, 6, 66],
+-            [480, 120, 66, 6],
+-            [540, 120, 6, 126],
+-            [120, 180, 126, 6],
+-            [120, 180, 6, 126],
+-            [360, 180, 126, 6],
+-            [480, 180, 6, 126],
+-            [180, 240, 6, 126],
+-            [180, 360, 246, 6],
+-            [420, 240, 6, 126],
+-            [240, 240, 42, 6],
+-            [324, 240, 42, 6],
+-            [240, 240, 6, 66],
+-            [240, 300, 126, 6],
+-            [360, 240, 6, 66],
+-            [0, 300, 66, 6],
+-            [540, 300, 66, 6],
+-            [60, 360, 66, 6],
+-            [60, 360, 6, 186],
+-            [480, 360, 66, 6],
+-            [540, 360, 6, 186],
+-            [120, 420, 366, 6],
+-            [120, 420, 6, 66],
+-            [480, 420, 6, 66],
+-            [180, 480, 246, 6],
+-            [300, 480, 6, 66],
+-            [120, 540, 126, 6],
+-            [360, 540, 126, 6],
+-        ]
+-
+-        self.ghost_one_directions = [
+-            [0, -30, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [-15, 0, 23],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 19],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, 15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 7],
+-            [0, 15, 3],
+-            [-15, 0, 19],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.ghost_two_directions = [
+-            [0, -15, 4],
+-            [15, 0, 9],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, -15, 15],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 7],
+-            [0, -15, 3],
+-            [15, 0, 15],
+-            [0, 15, 15],
+-            [-15, 0, 3],
+-            [0, 15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 5],
+-        ]
+-
+-        self.ghost_three_directions = [
+-            [30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 10],
+-            [0, 15, 7],
+-            [15, 0, 3],
+-            [0, -15, 3],
+-            [15, 0, 3],
+-            [0, -15, 15],
+-            [-15, 0, 15],
+-            [0, 15, 3],
+-            [15, 0, 15],
+-            [0, 15, 11],
+-            [-15, 0, 3],
+-            [0, -15, 7],
+-            [-15, 0, 11],
+-            [0, 15, 3],
+-            [-15, 0, 11],
+-            [0, 15, 7],
+-            [-15, 0, 3],
+-            [0, -15, 3],
+-            [-15, 0, 3],
+-            [0, -15, 15],
+-            [15, 0, 15],
+-            [0, 15, 3],
+-            [-15, 0, 15],
+-            [0, 15, 11],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 11],
+-            [0, 15, 3],
+-            [15, 0, 1],
+-        ]
+-
+-        self.ghost_four_directions = [
+-            [-30, 0, 2],
+-            [0, -15, 4],
+-            [15, 0, 5],
+-            [0, 15, 7],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [-15, 0, 3],
+-            [0, 15, 7],
+-            [-15, 0, 7],
+-            [0, 15, 15],
+-            [15, 0, 15],
+-            [0, -15, 3],
+-            [-15, 0, 11],
+-            [0, -15, 7],
+-            [15, 0, 3],
+-            [0, -15, 11],
+-            [15, 0, 9],
+-        ]
+-
+-        self.color = Color()
+-        # Call this function so the Pygame library can initialize itself
+-        pygame.init()
+-
+-        # Create an 606x606 sized screen
+-        self.screen = pygame.display.set_mode([606, 606])
+-
+-        # Set the title of the window
+-        pygame.display.set_caption('Pacman')
+-
+-        # Create a surface we can draw on
+-        background = pygame.Surface(self.screen.get_size())
+-        background = background.convert()
+-        background.fill(self.color.black)
+-        self.clock = pygame.time.Clock()
+-        pygame.font.init()
+-        self.font = pygame.font.SysFont('arial', 30)
+-        self.all_sprites_list = None
+-        self.power_pellets = pygame.sprite.RenderPlain()
+-    def setup_walls(self):
+-        """
+-        Make the walls. (x_pos, y_pos, width, height)
+-        :return:
+-        :rtype:
+-        """
+-        wall_list = pygame.sprite.RenderPlain()
+-
+-        # Loop through the list. Create the wall, add it to the list
+-        for item in self.walls:
+-            wall = Wall(item[0], item[1], item[2], item[3], self.color.grey)
+-            wall_list.add(wall)
+-            self.all_sprites_list.add(wall)
+-
+-        # return our new list
+-        return wall_list
+-
+-    def setup_gate(self):
+-        """
+-        Add gates in the walls
+-        :return:
+-        :rtype:
+-        """
+-        gate = pygame.sprite.RenderPlain()
+-        gate.add(Wall(282, 242, 42, 2, self.color.white))
+-        self.all_sprites_list.add(gate)
+-        return gate
+-    def setup_power_pellets(self):
+-        # Define power pellet locations and add them to the game
+-        locations = [(100, 200), (500, 300), (300, 100)]  # Example locations
+-        for x, y in locations:
+-            pellet = PowerUp(x, y)
+-            self.power_pellets.add(pellet)
+-            self.all_sprites_list.add(pellet) 
+-    def start_game(self):
+-        """
+-        start the game
+-        """
+-
+-        pl = len(self.ghost_one_directions) - 1
+-        bl = len(self.ghost_two_directions) - 1
+-        il = len(self.ghost_three_directions) - 1
+-        cl = len(self.ghost_four_directions) - 1
+-
+-        # default locations for Pacman and ghosts
+-        w = 303 - 16  # Width
+-        p_h = 7 * 60 + 19
+-        m_h = 4 * 60 + 19
+-        b_h = 3 * 60 + 19
+-        i_w = 303 - 16 - 32
+-        c_w = 303 + 32 - 16
+-
+-        self.all_sprites_list = pygame.sprite.RenderPlain()
+-        block_list = pygame.sprite.RenderPlain()
+-        ghost_list = pygame.sprite.RenderPlain()
+-        pacman_collide = pygame.sprite.RenderPlain()
+-        wall_list = self.setup_walls()
+-
+-        gate = self.setup_gate()
+-
+-        p_turn = 0
+-        p_steps = 0
+-
+-        b_turn = 0
+-        b_steps = 0
+-
+-        i_turn = 0
+-        i_steps = 0
+-
+-        c_turn = 0
+-        c_steps = 0
+-
+-        # Create the player  object
+-        pacman = Player(w, p_h, 'images/pacman.png')
+-        self.all_sprites_list.add(pacman)
+-        pacman_collide.add(pacman)
+-
+-        ghost_two = Ghost(w, b_h, 'images/red.png')
+-        ghost_list.add(ghost_two)
+-        self.all_sprites_list.add(ghost_two)
+-
+-        ghost_one = Ghost(w, m_h, 'images/pink.png')
+-        ghost_list.add(ghost_one)
+-        self.all_sprites_list.add(ghost_one)
+-
+-        ghost_three = Ghost(i_w, m_h, 'images/blue.png')
+-        ghost_list.add(ghost_three)
+-        self.all_sprites_list.add(ghost_three)
+-
+-        ghost_four = Ghost(c_w, m_h, 'images/yellow.png')
+-        ghost_list.add(ghost_four)
+-        self.all_sprites_list.add(ghost_four)
+-
+-        # Draw the grid
+-        for row in range(19):
+-            for column in range(19):
+-                if (row == 7 or row == 8) and (column == 8 or column == 9 or column == 10):
+-                    continue
+-                else:
+-                    block = Block(self.color.yellow, 4, 4)
+-
+-                    # Set a random location for the block
+-                    block.rect.x = 30 * column + 6 + 26
+-                    block.rect.y = 30 * row + 6 + 26
+-
+-                    b_collide = pygame.sprite.spritecollide(block, wall_list, False)
+-                    p_collide = pygame.sprite.spritecollide(block, pacman_collide, False)
+-                    if b_collide:
+-                        continue
+-                    elif p_collide:
+-                        continue
+-                    else:
+-                        # Add the block to the list of objects
+-                        block_list.add(block)
+-                        self.all_sprites_list.add(block)
+-        # Randomly select four blocks
+-        blocks = list(block_list)
+-        selected_blocks = random.sample(blocks, 4)
+-
+-# Replace the selected blocks with power pellets
+-        for block in selected_blocks:
+-            power_pellet = PowerUp(block.rect.x, block.rect.y)  # Assuming you have a PowerPellet class
+-            
+-    # Add the power pellet to the game (you might need to modify this part based on your game structure)
+-            self.all_sprites_list.add(power_pellet)
+-        bll = len(block_list)
+-        score = 0
+-        done = False
+-        while not done:
+-            # Events
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    done = True
+-
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, -30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, 30)
+-
+-                if event.type == pygame.KEYUP:
+-                    if event.key == pygame.K_LEFT:
+-                        pacman.change_speed(30, 0)
+-                    if event.key == pygame.K_RIGHT:
+-                        pacman.change_speed(-30, 0)
+-                    if event.key == pygame.K_UP:
+-                        pacman.change_speed(0, 30)
+-                    if event.key == pygame.K_DOWN:
+-                        pacman.change_speed(0, -30)
+-
+-            pacman.update(wall_list, gate)
+-            returned = ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            p_turn = returned[0]
+-            p_steps = returned[1]
+-            ghost_one.ghost_change_speed(self.ghost_one_directions, False, p_turn, p_steps, pl)
+-            ghost_one.update(wall_list, False)
+-
+-            returned = ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            b_turn = returned[0]
+-            b_steps = returned[1]
+-            ghost_two.ghost_change_speed(self.ghost_two_directions, False, b_turn, b_steps, bl)
+-            ghost_two.update(wall_list, False)
+-
+-            returned = ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            i_turn = returned[0]
+-            i_steps = returned[1]
+-            ghost_three.ghost_change_speed(self.ghost_three_directions, False, i_turn, i_steps, il)
+-            ghost_three.update(wall_list, False)
+-
+-            returned = ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            c_turn = returned[0]
+-            c_steps = returned[1]
+-            ghost_four.ghost_change_speed(self.ghost_four_directions, 'ghost_four', c_turn, c_steps, cl)
+-            ghost_four.update(wall_list, False)
+-
+-            # See if the pacman block has collided with anything.
+-            blocks_hit_list = pygame.sprite.spritecollide(pacman, block_list, True) 
+-            # check if pacman hits any power pellet
+-            pellet_hit_list = pygame.sprite.spritecollide(pacman, self.power_pellets,True)
+-            # if pellet is hit 
+-            # Check the list of collisions.
+-            if len(blocks_hit_list) > 0:
+-                score += len(blocks_hit_list)
+-
+-            self.screen.fill(self.color.black)
+-
+-            wall_list.draw(self.screen)
+-            gate.draw(self.screen)
+-            self.all_sprites_list.draw(self.screen)
+-            ghost_list.draw(self.screen)
+-
+-            text = self.font.render(str(score) + '/' + str(bll), True, self.color.white)
+-            self.screen.blit(text, [270, 254])
+-
+-            if score == bll:
+-                self.do_next(
+-                    'Congratulations, you won!',
+-                    145,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            ghost_hit_list = pygame.sprite.spritecollide(pacman, ghost_list, False)
+-
+-            if ghost_hit_list:
+-                self.do_next(
+-                    'Game Over',
+-                    235,
+-                    block_list,
+-                    ghost_list,
+-                    pacman_collide,
+-                    wall_list,
+-                    gate,
+-                )
+-                return
+-
+-            pygame.display.flip()
+-
+-            self.clock.tick(10)
+-
+-    def do_next(self, message, left, block_list, ghost_list, pacman_collide, wall_list, gate):
+-        """
+-        Go to next configuration in the game
+-        :param message:
+-        :type message:
+-        :param left:
+-        :type left:
+-        :param block_list:
+-        :type block_list:
+-        :param ghost_list:
+-        :type ghost_list:
+-        :param pacman_collide:
+-        :type pacman_collide:
+-        :param wall_list:
+-        :type wall_list:
+-        :param gate:
+-        :type gate:
+-        """
+-        while True:
+-            for event in pygame.event.get():
+-                if event.type == pygame.QUIT:
+-                    pygame.quit()
+-                    return
+-                if event.type == pygame.KEYDOWN:
+-                    if event.key == pygame.K_ESCAPE:
+-                        pygame.quit()
+-                        return
+-                    if event.key == pygame.K_RETURN:
+-                        del self.all_sprites_list
+-                        del block_list
+-                        del ghost_list
+-                        del pacman_collide
+-                        del wall_list
+-                        del gate
+-                        self.start_game()
+-                        return
+-
+-            # Grey background
+-            w_surface = pygame.Surface((400, 200))  # the size of your rect
+-            w_surface.fill((255, 255, 255))  # this fills the entire surface
+-            self.screen.blit(w_surface, (100, 200))  # (0,0) are the top-left coordinates
+-
+-            # Won or lost
+-            text1 = self.font.render(message, True, self.color.black)
+-            self.screen.blit(text1, [left, 233])
+-
+-            text2 = self.font.render('To play again, press ENTER.', True, self.color.black)
+-            self.screen.blit(text2, [135, 300])
+-            text3 = self.font.render('To quit, press ESCAPE.', True, self.color.black)
+-            self.screen.blit(text3, [165, 340])
+-
+-            pygame.display.flip()
+-            self.clock.tick(10)
+-
+-
+-if __name__ == '__main__':
+-    # main function
+-    game = Game()
+-    game.start_game()
+-    pygame.quit()
+\ No newline at end of file
+diff --git a/games/pacman/pacman_test.py b/games/pacman/pacman_test.py
+deleted file mode 100644
+index dab7b16..0000000
+--- a/games/pacman/pacman_test.py
++++ /dev/null
+@@ -1,366 +0,0 @@
+-#! /usr/bin/python
+-
+-# pacman.pyw
+-# By David Reilly
+-
+-# Modified by Andy Sommerville, 8 October 2007:
+-# - Changed hard-coded DOS paths to os.path calls
+-# - Added constant SCRIPT_PATH (so you don't need to have pacman.pyw and res in your cwd, as long
+-# -   as those two are in the same directory)
+-# - Changed text-file reading to accomodate any known EOLn method (\n, \r, or \r\n)
+-# - I (happily) don't have a Windows box to test this. Blocks marked "WIN???"
+-# -   should be examined if this doesn't run in Windows
+-# - Added joystick support (configure by changing JS_* constants)
+-# - Added a high-score list. Depends on wx for querying the user's name
+-
+-import pygame, sys, os, random
+-from pygame.locals import *
+-from player import pacman
+-from ghost import ghost
+-from path import path_finder
+-from level import level
+-from game import game
+-from fruit import fruit
+-from config import *
+-
+-
+-window = pygame.display.set_mode((1, 1))
+-pygame.display.set_caption("Pacman")
+-
+-screen = pygame.display.get_surface()
+-
+-img_Background = pygame.image.load(os.path.join(SCRIPT_PATH,"res","backgrounds","1.gif")).convert()
+-
+-snd_pellet = {}
+-snd_pellet[0] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet1.wav"))
+-snd_pellet[1] = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","pellet2.wav"))
+-snd_powerpellet = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","powerpellet.wav"))
+-snd_eatgh = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatgh2.wav"))
+-snd_fruitbounce = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","fruitbounce.wav"))
+-snd_eatfruit = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","eatfruit.wav"))
+-snd_extralife = pygame.mixer.Sound(os.path.join(SCRIPT_PATH,"res","sounds","extralife.wav"))
+-
+-
+-
+-#      ___________________
+-# ___/  class definitions  \_______________________________________________
+-
+-def CheckIfCloseButton(events):
+-    for event in events: 
+-        if event.type == pygame.QUIT: 
+-            sys.exit(0)
+-
+-
+-def CheckInputs(): 
+-    
+-    if thisGame.mode == 1:
+-        if pygame.key.get_pressed()[ pygame.K_RIGHT ] or (js!=None and js.get_axis(JS_XAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x + player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = player.speed
+-                player.velY = 0
+-                
+-        elif pygame.key.get_pressed()[ pygame.K_LEFT ] or (js!=None and js.get_axis(JS_XAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x - player.speed, player.y, player.nearestRow, player.nearestCol): 
+-                player.velX = -player.speed
+-                player.velY = 0
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_DOWN ] or (js!=None and js.get_axis(JS_YAXIS)>0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y + player.speed, player.nearestRow, player.nearestCol): 
+-                player.velX = 0
+-                player.velY = player.speed
+-            
+-        elif pygame.key.get_pressed()[ pygame.K_UP ] or (js!=None and js.get_axis(JS_YAXIS)<0):
+-            if not thisLevel.CheckIfHitWall(player.x, player.y - player.speed, player.nearestRow, player.nearestCol):
+-                player.velX = 0
+-                player.velY = -player.speed
+-                
+-    if pygame.key.get_pressed()[ pygame.K_ESCAPE ]:
+-        sys.exit(0)
+-            
+-    elif thisGame.mode == 4 :
+-        if pygame.key.get_pressed()[ pygame.K_RETURN ] or (js!=None and js.get_button(JS_STARTBUTTON)):
+-            thisGame.StartNewGame(thisLevel, tileID, tileIDImage, tileIDName)
+-            
+-    
+-def GetCrossRef ():
+-
+-    f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-    # ANDY -- edit
+-    #fileOutput = f.read()
+-    #str_splitByLine = fileOutput.split('\n')
+-
+-    lineNum = 0
+-    useLine = False
+-
+-    for i in f.readlines():
+-        # print " ========= Line " + str(lineNum) + " ============ "
+-        while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-        while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-        str_splitBySpace = i.split(' ')
+-        
+-        j = str_splitBySpace[0]
+-            
+-        if (j == "'" or j == "" or j == "#"):
+-            # comment / whitespace line
+-            # print " ignoring comment line.. "
+-            useLine = False
+-        else:
+-            # print str(wordNum) + ". " + j
+-            useLine = True
+-        
+-        if useLine == True:
+-            tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-            tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-            
+-            thisID = int(str_splitBySpace[0])
+-            if not thisID in NO_GIF_TILES:
+-                tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-            else:
+-                    tileIDImage[ thisID ] = pygame.Surface((16,16))
+-            
+-            # change colors in tileIDImage to match maze colors
+-            for y in range(0, 16, 1):
+-                for x in range(0, 16, 1):
+-                
+-                    if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                        # wall edge
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                        # wall fill
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                        
+-                    elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                        # pellet color
+-                        tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-                
+-            # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-        lineNum += 1
+-
+-    
+-#      _____________________________
+-#      __________________
+-# ___/  main code block  \_____________________________________________________
+-# create a path_finder object
+-
+-f = open(os.path.join(SCRIPT_PATH,"res","crossref.txt"), 'r')
+-# ANDY -- edit
+-#fileOutput = f.read()
+-#str_splitByLine = fileOutput.split('\n')
+-
+-lineNum = 0
+-useLine = False
+-
+-tileIDName = {} # gives tile name (when the ID# is known)
+-tileID = {} # gives tile ID (when the name is known)
+-tileIDImage = {} # gives tile image (when the ID# is known)
+-
+-
+-path = path_finder()
+-
+-# create pacman object
+-player = pacman(path, screen)
+-
+-# create ghost objects
+-ghosts = {}
+-for i in range(0, 6, 1):
+-    # remember, ghost[4] is the blue, vulnerable ghost
+-    ghosts[i] = ghost(i, path, screen, player)
+-    
+-# create piece of fruit
+-thisFruit = fruit() 
+-
+-
+-
+-
+-
+-# create game and level objects and load first level
+-thisGame = game(thisFruit, player, screen)
+-thisLevel = level( thisGame, player, ghosts, path, thisFruit, screen)
+-for i in f.readlines():
+-    # print " ========= Line " + str(lineNum) + " ============ "
+-    while len(i)>0 and (i[-1]=='\n' or i[-1]=='\r'): i=i[:-1]
+-    while len(i)>0 and (i[0]=='\n' or i[0]=='\r'): i=i[1:]
+-    str_splitBySpace = i.split(' ')
+-    
+-    j = str_splitBySpace[0]
+-        
+-    if (j == "'" or j == "" or j == "#"):
+-        # comment / whitespace line
+-        # print " ignoring comment line.. "
+-        useLine = False
+-    else:
+-        # print str(wordNum) + ". " + j
+-        useLine = True
+-    
+-    if useLine == True:
+-        tileIDName[ int(str_splitBySpace[0]) ] = str_splitBySpace[1]
+-        tileID[ str_splitBySpace[1] ] = int(str_splitBySpace[0])
+-        
+-        thisID = int(str_splitBySpace[0])
+-        if not thisID in NO_GIF_TILES:
+-            tileIDImage[ thisID ] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","tiles",str_splitBySpace[1] + ".gif")).convert()
+-        else:
+-                tileIDImage[ thisID ] = pygame.Surface((16,16))
+-        
+-        # change colors in tileIDImage to match maze colors
+-        for y in range(0, 16, 1):
+-            for x in range(0, 16, 1):
+-            
+-                if tileIDImage[ thisID ].get_at( (x, y) ) == (255, 206, 255, 255):
+-                    # wall edge
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeLightColor )
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (132, 0, 132, 255):
+-                    # wall fill
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.fillColor ) 
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (255, 0, 255, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.edgeShadowColor )   
+-                    
+-                elif tileIDImage[ thisID ].get_at( (x, y) ) == (128, 0, 128, 255):
+-                    # pellet color
+-                    tileIDImage[ thisID ].set_at( (x, y), thisLevel.pelletColor )   
+-            
+-        # print str_splitBySpace[0] + " is married to " + str_splitBySpace[1]
+-    lineNum += 1
+-thisLevel.LoadLevel( thisGame.GetLevelNum(), tileID, tileIDImage, tileIDName )
+-thisGame.StartNewGame( thisLevel, tileID, tileIDImage, tileIDName )
+-
+-window = pygame.display.set_mode( thisGame.screenSize, pygame.DOUBLEBUF | pygame.HWSURFACE )
+-
+-# initialise the joystick
+-if pygame.joystick.get_count()>0:
+-  if JS_DEVNUM<pygame.joystick.get_count(): js=pygame.joystick.Joystick(JS_DEVNUM)
+-  else: js=pygame.joystick.Joystick(0)
+-  js.init()
+-else: js=None   
+-print(tileID)
+-
+-while True: 
+-
+-    CheckIfCloseButton( pygame.event.get() )
+-    
+-    if thisGame.mode == 1:
+-        # normal gameplay mode
+-        CheckInputs()
+-        
+-        thisGame.modeTimer += 1
+-        player.Move(thisGame, thisLevel, ghosts, thisFruit, tileID)
+-        for i in range(0, 4, 1):
+-            ghosts[i].Move(thisLevel, tileID)
+-        thisFruit.Move(thisGame)
+-            
+-    elif thisGame.mode == 2:
+-        # waiting after getting hit by a ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            # close the game
+-            #pygame.quit()
+-            thisLevel.Restart(tileID)
+-            
+-            thisGame.lives -= 1
+-            if thisGame.lives == -1:
+-                thisGame.updatehiscores(thisGame.score)
+-                thisGame.SetMode( 3 )
+-                thisGame.drawmidgamehiscores()
+-            else:
+-                thisGame.SetMode( 4 )
+-                
+-    elif thisGame.mode == 3:
+-        # game over
+-        print("Game Over")
+-        running = False
+-        #pygame.quit()
+-        CheckInputs()
+-            
+-    elif thisGame.mode == 4:
+-        # waiting to start
+-        print("Waiting to start")
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 90:
+-            thisGame.SetMode( 1 )
+-            player.velX = player.speed
+-            
+-    elif thisGame.mode == 5:
+-        # brief pause after munching a vulnerable ghost
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 30:
+-            thisGame.SetMode( 1 )
+-            
+-    elif thisGame.mode == 6:
+-        # pause after eating all the pellets
+-        thisGame.modeTimer += 1
+-        
+-        if thisGame.modeTimer == 60:
+-            thisGame.SetMode( 7 )
+-            oldEdgeLightColor = thisLevel.edgeLightColor
+-            oldEdgeShadowColor = thisLevel.edgeShadowColor
+-            oldFillColor = thisLevel.fillColor
+-            
+-    elif thisGame.mode == 7:
+-        # flashing maze after finishing level
+-        thisGame.modeTimer += 1
+-        
+-        whiteSet = [10, 30, 50, 70]
+-        normalSet = [20, 40, 60, 80]
+-        
+-        if not whiteSet.count(thisGame.modeTimer) == 0:
+-            # member of white set
+-            thisLevel.edgeLightColor = (255, 255, 255, 255)
+-            thisLevel.edgeShadowColor = (255, 255, 255, 255)
+-            thisLevel.fillColor = (0, 0, 0, 255)
+-            GetCrossRef()
+-        elif not normalSet.count(thisGame.modeTimer) == 0:
+-            # member of normal set
+-            thisLevel.edgeLightColor = oldEdgeLightColor
+-            thisLevel.edgeShadowColor = oldEdgeShadowColor
+-            thisLevel.fillColor = oldFillColor
+-            GetCrossRef()
+-        elif thisGame.modeTimer == 150:
+-            thisGame.SetMode ( 8 )
+-            
+-    elif thisGame.mode == 8:
+-        # blank screen before changing levels
+-        thisGame.modeTimer += 1
+-        if thisGame.modeTimer == 10:
+-            thisGame.SetNextLevel()
+-
+-    thisGame.SmartMoveScreen(thisLevel)
+-    
+-    screen.blit(img_Background, (0, 0))
+-    
+-    if not thisGame.mode == 8:
+-        thisLevel.DrawMap(tileID, tileIDImage)
+-        
+-        if thisGame.fruitScoreTimer > 0:
+-            if thisGame.modeTimer % 2 == 0:
+-                thisGame.DrawNumber (2500, thisFruit.x - thisGame.screenPixelPos[0] - 16, thisFruit.y - thisGame.screenPixelPos[1] + 4)
+-
+-        for i in range(0, 4, 1):
+-            ghosts[i].Draw(thisGame, tileID, tileIDImage, ghosts)
+-        thisFruit.Draw(thisGame)
+-        player.Draw(thisGame)
+-        
+-        if thisGame.mode == 3:
+-                screen.blit(thisGame.imHiscores,(32,256))
+-        
+-    if thisGame.mode == 5:
+-        thisGame.DrawNumber (thisGame.ghostValue / 2, player.x - thisGame.screenPixelPos[0] - 4, player.y - thisGame.screenPixelPos[1] + 6)
+-    
+-    
+-    
+-    thisGame.DrawScore()
+-    
+-    pygame.display.flip()
+-    
+-    clock.tick (60)
+-
+diff --git a/games/pacman/path.py b/games/pacman/path.py
+deleted file mode 100644
+index bd3d8a6..0000000
+--- a/games/pacman/path.py
++++ /dev/null
+@@ -1,238 +0,0 @@
+-from games.pacman.config import *
+-
+-class node ():
+-    
+-    def __init__ (self):
+-        self.g = -1 # movement cost to move from previous node to this one (usually +10)
+-        self.h = -1 # estimated movement cost to move from this node to the ending node (remaining horizontal and vertical steps * 10)
+-        self.f = -1 # total movement cost of this node (= g + h)
+-        # parent node - used to trace path back to the starting node at the end
+-        self.parent = (-1, -1)
+-        # node type - 0 for empty space, 1 for wall (optionally, 2 for starting node and 3 for end)
+-        self.type = -1
+-        
+-class path_finder ():
+-    
+-    def __init__ (self,):
+-        # map is a 1-DIMENSIONAL array.
+-        # use the Unfold( (row, col) ) function to convert a 2D coordinate pair
+-        # into a 1D index to use with this array.
+-        self.map = {}
+-        self.size = (-1, -1) # rows by columns
+-        
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-                
+-        # starting and ending nodes
+-        self.start = (-1, -1)
+-        self.end = (-1, -1)
+-        
+-        # current node (used by algorithm)
+-        self.current = (-1, -1)
+-        
+-        # open and closed lists of nodes to consider (used by algorithm)
+-        self.openList = []
+-        self.closedList = []
+-        
+-        # used in algorithm (adjacent neighbors path finder is allowed to consider)
+-        self.neighborSet = [ (0, -1), (0, 1), (-1, 0), (1, 0) ]
+-        
+-    def ResizeMap (self, numRows, numCols):
+-        self.map = {}
+-        self.size = (numRows, numCols)
+-
+-        # initialize path_finder map to a 2D array of empty nodes
+-        for row in range(0, self.size[0], 1):
+-            for col in range(0, self.size[1], 1):
+-                self.Set( row, col, node() )
+-                self.SetType( row, col, 0 )
+-        
+-    def CleanUpTemp (self):
+-        
+-        # this resets variables needed for a search (but preserves the same map / maze)
+-    
+-        self.pathChainRev = ""
+-        self.pathChain = ""
+-        self.current = (-1, -1)
+-        self.openList = []
+-        self.closedList = []
+-        
+-    def FindPath (self, startPos, endPos ):
+-        
+-        self.CleanUpTemp()
+-        
+-        # (row, col) tuples
+-        self.start = startPos
+-        self.end = endPos
+-        
+-        # add start node to open list
+-        self.AddToOpenList( self.start )
+-        self.SetG ( self.start, 0 )
+-        self.SetH ( self.start, 0 )
+-        self.SetF ( self.start, 0 )
+-        
+-        doContinue = True
+-        
+-        while (doContinue == True):
+-        
+-            thisLowestFNode = self.GetLowestFNode()
+-
+-            if not thisLowestFNode == self.end and not thisLowestFNode == False:
+-                self.current = thisLowestFNode
+-                self.RemoveFromOpenList( self.current )
+-                self.AddToClosedList( self.current )
+-                
+-                for offset in self.neighborSet:
+-                    thisNeighbor = (self.current[0] + offset[0], self.current[1] + offset[1])
+-                    
+-                    if not thisNeighbor[0] < 0 and not thisNeighbor[1] < 0 and not thisNeighbor[0] > self.size[0] - 1 and not thisNeighbor[1] > self.size[1] - 1 and not self.GetType( thisNeighbor ) == 1:
+-                        cost = self.GetG( self.current ) + 10
+-                        
+-                        if self.IsInOpenList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                            self.RemoveFromOpenList( thisNeighbor )
+-                            
+-                        #if self.IsInClosedList( thisNeighbor ) and cost < self.GetG( thisNeighbor ):
+-                        #   self.RemoveFromClosedList( thisNeighbor )
+-                            
+-                        if not self.IsInOpenList( thisNeighbor ) and not self.IsInClosedList( thisNeighbor ):
+-                            self.AddToOpenList( thisNeighbor )
+-                            self.SetG( thisNeighbor, cost )
+-                            self.CalcH( thisNeighbor )
+-                            self.CalcF( thisNeighbor )
+-                            self.SetParent( thisNeighbor, self.current )
+-            else:
+-                doContinue = False
+-                        
+-        if thisLowestFNode == False:
+-            return False
+-                        
+-        # reconstruct path
+-        self.current = self.end
+-        while not self.current == self.start:
+-            # build a string representation of the path using R, L, D, U
+-            if self.current[1] > self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'R' 
+-            elif self.current[1] < self.GetParent(self.current)[1]:
+-                self.pathChainRev += 'L'
+-            elif self.current[0] > self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'D'
+-            elif self.current[0] < self.GetParent(self.current)[0]:
+-                self.pathChainRev += 'U'
+-            self.current = self.GetParent(self.current)
+-            self.SetType( self.current[0],self.current[1], 4)
+-            
+-        # because pathChainRev was constructed in reverse order, it needs to be reversed!
+-        for i in range(len(self.pathChainRev) - 1, -1, -1):
+-            self.pathChain += self.pathChainRev[i]
+-        
+-        # set start and ending positions for future reference
+-        self.SetType( self.start[0],self.start[1], 2)
+-        self.SetType( self.end[0],self.start[1], 3)
+-        
+-        return self.pathChain
+-
+-    def Unfold (self, row,col):
+-        # this function converts a 2D array coordinate pair (row, col)
+-        # to a 1D-array index, for the object's 1D map array.
+-        return (row * self.size[1]) + col
+-    
+-    def Set (self, row,col, newNode):
+-        # sets the value of a particular map cell (usually refers to a node object)
+-        self.map[ self.Unfold(row, col) ] = newNode
+-        
+-    def GetType (self,val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].type
+-        
+-    def SetType (self,row,col, newValue):
+-        self.map[ self.Unfold(row, col) ].type = newValue
+-
+-    def GetF (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].f
+-
+-    def GetG (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].g
+-    
+-    def GetH (self, val):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].h
+-        
+-    def SetG (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].g = newValue
+-
+-    def SetH (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = newValue
+-        
+-    def SetF (self, val, newValue ):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].f = newValue
+-        
+-    def CalcH (self, val):
+-        row,col = val
+-        self.map[ self.Unfold(row, col) ].h = abs(row - self.end[0]) + abs(col - self.end[0])
+-        
+-    def CalcF (self, val):
+-        row,col = val
+-        unfoldIndex = self.Unfold(row, col)
+-        self.map[unfoldIndex].f = self.map[unfoldIndex].g + self.map[unfoldIndex].h
+-    
+-    def AddToOpenList (self, val):
+-        row,col = val
+-        self.openList.append( (row, col) )
+-        
+-    def RemoveFromOpenList (self, val ):
+-        row,col = val
+-        self.openList.remove( (row, col) )
+-        
+-    def IsInOpenList (self, val ):
+-        row,col = val
+-        if self.openList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-        
+-    def GetLowestFNode (self):
+-        lowestValue = 1000 # start arbitrarily high
+-        lowestPair = (-1, -1)
+-        
+-        for iOrderedPair in self.openList:
+-            if self.GetF( iOrderedPair ) < lowestValue:
+-                lowestValue = self.GetF( iOrderedPair )
+-                lowestPair = iOrderedPair
+-        
+-        if not lowestPair == (-1, -1):
+-            return lowestPair
+-        else:
+-            return False
+-        
+-    def AddToClosedList (self, val ):
+-        row,col = val
+-        self.closedList.append( (row, col) )
+-        
+-    def IsInClosedList (self, val ):
+-        row,col = val
+-        if self.closedList.count( (row, col) ) > 0:
+-            return True
+-        else:
+-            return False
+-
+-    def SetParent (self, val, val2 ):
+-        row,col = val
+-        parentRow,parentCol = val2
+-        self.map[ self.Unfold(row, col) ].parent = (parentRow, parentCol)
+-
+-    def GetParent (self, val ):
+-        row,col = val
+-        return self.map[ self.Unfold(row, col) ].parent
+-        
+-    # def draw (self):
+-    #     for row in range(0, self.size[0], 1):
+-    #         for col in range(0, self.size[1], 1):
+-            
+-    #             thisTile = self.GetType((row, col))
+-    #             screen.blit (self.tileIDImage[ thisTile ], (col * 32, row * 32))
+-        
+\ No newline at end of file
+diff --git a/games/pacman/player.py b/games/pacman/player.py
+deleted file mode 100644
+index 6ddd81e..0000000
+--- a/games/pacman/player.py
++++ /dev/null
+@@ -1,153 +0,0 @@
+-import pygame 
+-import os
+-from games.pacman.config import SCRIPT_PATH
+-class pacman ():
+-    
+-    def __init__ (self, path, screen):
+-        self.screen = screen
+-        self.path = path
+-        self.x = 0
+-        self.y = 0
+-        self.velX = 0
+-        self.velY = 0
+-        self.speed = 2
+-        
+-        self.nearestRow = 0
+-        self.nearestCol = 0
+-        
+-        self.homeX = 0
+-        self.homeY = 0
+-        
+-        self.anim_pacmanL = {}
+-        self.anim_pacmanR = {}
+-        self.anim_pacmanU = {}
+-        self.anim_pacmanD = {}
+-        self.anim_pacmanS = {}
+-        self.anim_pacmanCurrent = {}
+-        
+-        for i in range(1, 9, 1):
+-            self.anim_pacmanL[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-l " + str(i) + ".gif")).convert()
+-            self.anim_pacmanR[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-r " + str(i) + ".gif")).convert()
+-            self.anim_pacmanU[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-u " + str(i) + ".gif")).convert()
+-            self.anim_pacmanD[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman-d " + str(i) + ".gif")).convert()
+-            self.anim_pacmanS[i] = pygame.image.load(os.path.join(SCRIPT_PATH,"res","sprite","pacman.gif")).convert()
+-
+-        self.pelletSndNum = 0
+-        
+-    def Move (self, thisGame, thisLevel, ghosts, thisFruit, tileID):   
+-        
+-        self.nearestRow = int(((self.y + 8) / 16))
+-        self.nearestCol = int(((self.x + 8) / 16))
+-
+-        # make sure the current velocity will not cause a collision before moving
+-        if not thisLevel.CheckIfHitWall(self.x + self.velX, self.y + self.velY, self.nearestRow, self.nearestCol):
+-            # it's ok to Move
+-            self.x += self.velX
+-            self.y += self.velY
+-            
+-            # check for collisions with other tiles (pellets, etc)
+-            thisLevel.CheckIfHitSomething(self.x, self.y, self.nearestRow, self.nearestCol, tileID)
+-            
+-            # check for collisions with the ghosts
+-            for i in range(0, 4, 1):
+-                if thisLevel.CheckIfHit( self.x, self.y, ghosts[i].x, ghosts[i].y, 8):
+-                    # hit a ghost
+-                    
+-                    if ghosts[i].state == 1:
+-                        # ghost is normal
+-                        thisGame.SetMode( 2 )
+-                        
+-                    elif ghosts[i].state == 2:
+-                        # ghost is vulnerable
+-                        # give them glasses
+-                        # make them run
+-                        thisGame.AddToScore(thisGame.ghostValue)
+-                        thisGame.ghostValue = thisGame.ghostValue * 2
+-                        #snd_eatgh.play()
+-                        
+-                        ghosts[i].state = 3
+-                        ghosts[i].speed = ghosts[i].speed * 4
+-                        # and send them to the ghost box
+-                        ghosts[i].x = ghosts[i].nearestCol * 16
+-                        ghosts[i].y = ghosts[i].nearestRow * 16
+-                        ghosts[i].currentPath = self.path.FindPath( (ghosts[i].nearestRow, ghosts[i].nearestCol), (thisLevel.GetGhostBoxPos(tileID)[0]+1, thisLevel.GetGhostBoxPos(tileID)[1]) )
+-                        ghosts[i].FollowNextPathWay(thisLevel, tileID)
+-                        
+-                        # set game mode to brief pause after eating
+-                        thisGame.SetMode( 5 )
+-                        
+-            # check for collisions with the fruit
+-            if thisFruit.active == True:
+-                if thisLevel.CheckIfHit( self.x, self.y, thisFruit.x, thisFruit.y, 8):
+-                    thisGame.AddToScore(2500)
+-                    thisFruit.active = False
+-                    thisGame.fruitTimer = 0
+-                    thisGame.fruitScoreTimer = 120
+-                    #snd_eatfruit.play()
+-        
+-        else:
+-            # we're going to hit a wall -- stop moving
+-            self.velX = 0
+-            self.velY = 0
+-            
+-        # deal with power-pellet ghost timer
+-        if thisGame.ghostTimer > 0:
+-            thisGame.ghostTimer -= 1
+-            
+-            if thisGame.ghostTimer == 0:
+-                for i in range(0, 4, 1):
+-                    if ghosts[i].state == 2:
+-                        ghosts[i].state = 1
+-                self.ghostValue = 0
+-                
+-        # deal with fruit timer
+-        thisGame.fruitTimer += 1
+-        if thisGame.fruitTimer == 500:
+-            pathwayPair = thisLevel.GetPathwayPairPos(tileID)
+-            
+-            if not pathwayPair == False:
+-            
+-                pathwayEntrance = pathwayPair[0]
+-                pathwayExit = pathwayPair[1]
+-                
+-                thisFruit.active = True
+-                
+-                thisFruit.nearestRow = pathwayEntrance[0]
+-                thisFruit.nearestCol = pathwayEntrance[1]
+-                
+-                thisFruit.x = thisFruit.nearestCol * 16
+-                thisFruit.y = thisFruit.nearestRow * 16
+-                
+-                thisFruit.currentPath = self.path.FindPath( (thisFruit.nearestRow, thisFruit.nearestCol), pathwayExit )
+-                thisFruit.FollowNextPathWay()
+-            
+-        if thisGame.fruitScoreTimer > 0:
+-            thisGame.fruitScoreTimer -= 1
+-            
+-        
+-    def Draw (self, thisGame):
+-        
+-        if thisGame.mode == 3:
+-            return False
+-        
+-        # set the current frame array to match the direction pacman is facing
+-        if self.velX > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanR
+-        elif self.velX < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanL
+-        elif self.velY > 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanD
+-        elif self.velY < 0:
+-            self.anim_pacmanCurrent = self.anim_pacmanU
+-            
+-        self.screen.blit (self.anim_pacmanCurrent[ self.animFrame ], (self.x - thisGame.screenPixelPos[0], self.y - thisGame.screenPixelPos[1]))
+-        
+-        if thisGame.mode == 1:
+-            if not self.velX == 0 or not self.velY == 0:
+-                # only Move mouth when pacman is moving
+-                self.animFrame += 1 
+-            
+-            if self.animFrame == 9:
+-                # wrap to beginning
+-                self.animFrame = 1
+-            
+\ No newline at end of file
+diff --git a/games/pacman/res/VeraMoBd.ttf b/games/pacman/res/VeraMoBd.ttf
+deleted file mode 100644
+index 9be6547..0000000
+Binary files a/games/pacman/res/VeraMoBd.ttf and /dev/null differ
+diff --git a/games/pacman/res/backgrounds/1.gif b/games/pacman/res/backgrounds/1.gif
+deleted file mode 100644
+index fddeb90..0000000
+Binary files a/games/pacman/res/backgrounds/1.gif and /dev/null differ
+diff --git a/games/pacman/res/crossref.txt b/games/pacman/res/crossref.txt
+deleted file mode 100644
+index bfb3780..0000000
+--- a/games/pacman/res/crossref.txt
++++ /dev/null
+@@ -1,68 +0,0 @@
+-'    ____                  ____             ____
+-'   / __/_ _____  ___ ____/ __/__________  / / /
+-'  _\ \/ // / _ \/ -_) __/\ \/ __/ __/ _ \/ / / 
+-' /___/\_,_/ .__/\__/_/ /___/\__/_/  \___/_/_/  
+-'         /_/                  game engine
+-'
+-' Cross-reference for tiles and sprites.
+-'
+-' Syntax for each line is:
+-'      [number] [tilename] [tile description]
+-' Ex.  5130 wirecornerul upper-left corner of wire path
+-'
+-' Tile numbers may go from 1-32767. (Tile 0 is empty space.)
+-' Tiles 9000-9999 are invisible during gameplay.
+-'
+-' Commands:
+-'      # tiles              < tile declarations start here
+-'      # sprites            < sprite descriptions start here
+-' __________________________________________________________
+-
+-
+-# tiles
+-
+-1 ghost-door wall of the ghost box
+-2 pellet a normal pellet (required)
+-3 pellet-power a power pellet (makes pac-man invincible)
+-4 start the starting position for pac-man
+-
+-10 ghost-blinky blinky
+-11 ghost-pinky pinky
+-12 ghost-inky inky
+-13 ghost-sue sue
+-
+-20 door-h horizontal door (flip to other side of maze)
+-21 door-v vertical door (flip to other side of maze)
+-22 showlogo causes the logo to be drawn
+-23 hiscores generate and draw a hi-score list
+-
+-100 wall-straight-horiz a horizontal wall
+-101 wall-straight-vert a vertical wall
+-
+-105 wall-corner-ll lower-left corner of a wall
+-106 wall-corner-lr lower-right corner of a wall
+-107 wall-corner-ul upper-left corner of a wall
+-108 wall-corner-ur upper-right corner of a wall
+-
+-110 wall-end-b bottom end of a wall
+-111 wall-end-l left end of a wall
+-112 wall-end-r right end of a wall
+-113 wall-end-t top end of a wall
+-
+-120 wall-nub a one-tile "nub" wall
+-
+-130 wall-t-bottom a "T"-shaped wall, bottom-orientation
+-131 wall-t-left a "T"-shaped wall, left-orientation
+-132 wall-t-right a "T"-shaped wall, right-orientation
+-133 wall-t-top a "T"-shaped wall, top-orientation
+-
+-140 wall-x a four-way wall
+-
+-300 glasses ghost glasses
+-
+-500 x-paintwall use this tile to paint walls automatically
+-
+-
+-
+-# sprites
+-
+diff --git a/games/pacman/res/hiscore.txt b/games/pacman/res/hiscore.txt
+deleted file mode 100644
+index 48bdfbf..0000000
+--- a/games/pacman/res/hiscore.txt
++++ /dev/null
+@@ -1,6 +0,0 @@
+-135260 David
+-100000 David
+-80000 Andy
+-60000 Count Pacula
+-40000 Cleopacra
+-24790 User
+diff --git a/games/pacman/res/levels/0.txt b/games/pacman/res/levels/0.txt
+deleted file mode 100644
+index cd90d89..0000000
+--- a/games/pacman/res/levels/0.txt
++++ /dev/null
+@@ -1,48 +0,0 @@
+-# lvlwidth 35
+-# lvlheight 35
+-# bgcolor 0 0 0
+-# edgelightcolor 0 0 255
+-# edgeshadowcolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 107 100 100 100 100 100 100 100 108 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 100 100 100 100 100 100 106 2 0 0 0 0 0 2 105 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-20 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 4 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 20 
+-120 0 111 100 100 100 100 100 100 100 100 100 100 108 2 0 0 0 0 0 2 107 100 100 100 100 100 100 100 100 100 100 100 100 112 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 101 3 2 2 2 2 2 3 101 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 100 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 107 112 1 111 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 101 11 12 13 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 105 100 100 100 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/1.txt b/games/pacman/res/levels/1.txt
+deleted file mode 100644
+index f6a84e6..0000000
+--- a/games/pacman/res/levels/1.txt
++++ /dev/null
+@@ -1,37 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgecolor 0 0 255
+-# fillcolor 0 0 0
+-# pelletcolor 255 255 255
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 3 120 2 113 2 111 100 108 2 107 100 112 2 113 2 120 3 101 0 
+-0 101 2 2 2 101 2 2 2 101 2 101 2 2 2 101 2 2 2 101 0 
+-0 101 2 111 100 106 2 113 2 110 2 110 2 113 2 105 100 112 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 120 2 111 100 130 100 112 2 111 100 130 100 112 2 120 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 113 2 111 100 100 100 100 100 112 2 113 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 0 0 10 0 0 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 105 112 2 107 112 1 111 108 2 111 106 2 105 100 100 112 
+-20 0 0 0 2 0 0 2 101 11 12 13 101 2 0 0 2 0 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 0 0 2 0 0 0 0 0 2 0 0 2 2 2 101 0 
+-0 101 2 120 2 107 112 2 111 100 100 100 112 2 111 108 2 120 2 101 0 
+-0 101 2 2 2 101 2 2 0 0 4 0 0 2 2 101 2 2 2 101 0 
+-0 105 133 112 2 110 2 111 100 100 133 100 100 112 2 110 2 111 133 106 0 
+-0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 0 0 
+-0 0 101 2 111 112 2 111 108 2 101 2 107 112 2 111 112 2 101 0 0 
+-107 100 106 2 2 2 2 2 101 2 101 2 101 2 2 2 2 2 105 100 108 
+-101 2 2 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 2 2 101 
+-101 3 120 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 120 3 101 
+-101 2 2 2 107 100 100 100 100 108 0 107 100 100 100 100 108 2 2 2 101 
+-105 100 100 100 106 0 0 0 0 110 21 110 0 0 0 0 105 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/10.txt b/games/pacman/res/levels/10.txt
+deleted file mode 100644
+index e254045..0000000
+--- a/games/pacman/res/levels/10.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 128 0 64
+-# fillcolor 215 0 107
+-# pelletcolor 0 255 0
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 107 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 108 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 120 2 111 100 108 2 111 100 112 2 107 100 112 2 120 3 105 112 
+-20 0 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 0 20 
+-111 100 100 112 2 120 2 110 2 113 2 113 2 110 2 120 2 111 100 100 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-111 108 0 120 2 113 2 111 100 106 2 105 100 112 2 113 2 120 0 107 112 
+-0 101 2 2 2 101 2 0 0 0 10 0 0 0 2 101 2 2 2 101 0 
+-0 101 2 111 100 130 112 2 107 112 1 111 108 2 111 130 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 2 101 0 
+-0 101 2 111 133 100 112 2 105 100 100 100 106 2 111 100 133 112 2 101 0 
+-0 101 2 2 101 2 2 2 0 0 0 0 0 2 2 2 101 2 2 101 0 
+-0 131 112 2 110 2 107 100 112 0 113 0 111 100 108 2 110 2 111 132 0 
+-0 101 2 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 2 101 0 
+-111 106 2 120 0 111 106 2 120 2 101 2 120 2 105 112 0 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 20 
+-111 100 100 112 2 111 108 2 111 100 130 100 112 2 107 112 2 111 100 100 112 
+-20 0 2 2 2 2 101 2 2 2 4 2 2 2 101 2 2 2 2 0 20 
+-111 108 3 111 112 2 105 100 112 2 120 2 111 100 106 2 111 112 3 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/11.txt b/games/pacman/res/levels/11.txt
+deleted file mode 100644
+index c546ac7..0000000
+--- a/games/pacman/res/levels/11.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 203 211 44
+-# edgeshadowcolor 0 64 0
+-# fillcolor 0 0 0
+-# pelletcolor 255 0 0
+-# fruittype 1
+-
+-# startleveldata
+-113 21 107 100 100 100 100 100 100 100 133 100 100 100 100 100 100 100 108 21 113 
+-101 0 110 0 0 2 2 2 2 2 110 2 2 2 2 2 0 0 110 0 101 
+-101 0 0 0 113 2 113 2 113 2 2 2 113 2 113 2 113 0 0 0 101 
+-131 100 100 100 106 3 110 2 110 2 113 2 110 2 110 3 105 100 100 100 132 
+-101 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 100 112 2 113 0 111 100 140 100 112 0 113 2 111 100 108 2 101 
+-101 2 101 2 2 2 101 0 0 0 101 0 0 0 101 2 2 2 101 2 101 
+-101 2 110 2 111 100 130 100 112 0 110 0 111 100 130 100 112 2 110 2 101 
+-101 2 2 2 0 0 0 0 0 0 10 0 0 0 0 0 0 2 2 2 101 
+-101 2 111 100 100 100 108 0 107 112 1 111 108 0 107 100 100 100 112 2 101 
+-101 2 2 2 2 2 110 0 101 11 12 13 101 0 110 2 2 2 2 2 101 
+-105 100 100 100 112 2 2 2 131 100 100 100 132 2 2 2 111 100 100 100 106 
+-20 0 0 0 0 0 113 2 110 0 0 0 110 2 113 0 0 0 0 0 20 
+-107 100 100 100 100 100 106 2 0 0 113 0 0 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 111 100 140 100 112 2 2 2 2 2 2 2 101 
+-101 2 113 2 107 100 108 0 0 0 101 0 0 0 107 100 108 2 113 2 101 
+-101 2 101 2 110 0 105 100 112 0 110 0 111 100 106 0 110 2 101 2 101 
+-101 2 101 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 101 2 101 
+-101 2 110 2 120 2 111 100 108 2 113 2 107 100 112 2 120 2 110 2 101 
+-101 2 2 2 3 2 2 2 101 2 101 2 101 2 2 2 3 2 2 2 101 
+-101 0 113 2 111 100 112 2 110 2 110 2 110 2 111 100 112 2 113 0 101 
+-101 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 101 
+-110 21 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/12.txt b/games/pacman/res/levels/12.txt
+deleted file mode 100644
+index 137aad1..0000000
+--- a/games/pacman/res/levels/12.txt
++++ /dev/null
+@@ -1,40 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 27
+-# bgcolor 0 0 0
+-# edgelightcolor 52 61 139
+-# edgeshadowcolor 35 41 95
+-# fillcolor 0 0 0
+-# pelletcolor 238 183 128
+-# fruittype 3
+-
+-# startleveldata
+-111 112 21 111 100 100 100 100 100 100 100 100 100 100 100 100 100 112 21 111 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 107 100 100 100 100 100 100 100 100 100 100 100 100 100 108 2 107 112 
+-0 101 2 101 22 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-0 101 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 101 0 
+-111 106 2 101 0 0 0 0 0 0 0 0 0 0 0 0 0 101 2 105 112 
+-20 0 2 105 100 100 133 100 100 100 133 100 100 100 133 100 100 106 2 0 20 
+-111 108 2 2 2 2 110 2 2 2 110 2 2 2 110 2 2 2 2 107 112 
+-0 101 2 111 108 2 2 2 113 0 10 0 113 2 2 2 107 112 2 101 0 
+-0 101 2 2 110 0 120 0 131 112 1 111 132 0 120 0 110 2 2 101 0 
+-0 131 108 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 107 132 0 
+-111 130 106 2 111 100 112 2 105 100 100 100 106 2 111 100 112 2 105 130 112 
+-20 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 20 
+-111 108 2 113 2 120 2 113 2 120 0 120 2 113 2 120 2 113 2 107 112 
+-0 101 2 101 2 2 2 101 2 2 4 2 2 101 2 2 2 101 2 101 0 
+-0 101 2 110 2 111 100 130 100 112 0 111 100 130 100 112 2 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-111 106 2 120 3 120 2 120 2 113 2 113 2 120 2 120 3 120 2 105 112 
+-20 0 2 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 2 0 20 
+-111 108 2 111 100 112 2 111 100 106 2 105 100 112 2 111 100 112 2 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 100 133 100 100 100 100 100 100 108 0 0 0 
+-0 107 100 106 2 2 2 2 2 2 110 2 2 2 2 2 2 105 100 108 0 
+-0 101 2 2 2 107 100 100 108 2 2 2 107 100 100 108 2 2 2 101 0 
+-0 110 21 111 100 106 0 0 105 100 100 100 106 0 0 105 100 112 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/2.txt b/games/pacman/res/levels/2.txt
+deleted file mode 100644
+index b65a9eb..0000000
+--- a/games/pacman/res/levels/2.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 33
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 85 0 170
+-# fillcolor 128 0 255
+-# pelletcolor 255 255 255
+-# fruittype 2
+-
+-# startleveldata
+-0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 0 113 21 113 0 
+-0 101 0 105 100 100 100 100 100 100 133 100 100 100 100 106 0 105 100 100 100 100 133 100 100 100 100 100 100 106 0 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-111 106 3 111 112 2 113 2 113 2 110 2 111 100 100 100 133 100 100 100 112 2 110 2 113 2 113 2 111 112 3 105 112 
+-20 0 2 2 2 2 101 2 101 0 0 2 2 2 2 2 101 2 2 2 2 2 0 0 101 2 101 2 2 2 2 0 20 
+-111 108 0 111 100 100 106 2 105 100 112 2 111 100 108 0 101 0 107 100 112 2 111 100 106 2 105 100 100 112 0 107 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 0 0 110 0 110 0 110 0 0 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 131 100 100 112 2 111 100 108 2 107 100 112 0 0 0 10 0 0 0 111 100 108 2 107 100 112 2 111 100 100 132 0 
+-0 101 2 2 2 2 2 2 110 2 110 0 0 0 107 112 1 111 108 0 0 0 110 2 110 2 2 2 2 2 2 101 0 
+-0 101 2 120 0 111 112 2 2 2 2 2 113 0 101 11 12 13 101 0 113 2 2 2 2 2 111 112 0 120 2 101 0 
+-0 101 2 2 2 2 2 2 120 0 111 100 132 2 105 100 100 100 106 2 131 100 112 0 120 2 2 2 2 2 2 101 0 
+-0 101 2 111 100 100 112 2 2 2 3 2 110 2 2 2 2 2 2 2 110 2 3 2 2 2 111 100 100 112 2 101 0 
+-0 101 2 2 2 2 2 2 113 0 113 2 2 2 113 2 113 2 113 2 2 2 113 0 113 2 2 2 2 2 2 101 0 
+-0 101 2 111 112 0 120 2 110 0 110 2 111 100 106 2 110 2 105 100 112 2 110 0 110 2 120 0 111 112 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 105 100 108 2 107 112 0 111 100 100 100 112 0 111 100 133 100 112 0 111 100 100 100 112 0 111 108 2 107 100 106 0 
+-0 0 0 101 2 101 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 0 
+-111 100 100 106 2 101 2 113 2 111 133 100 100 100 108 2 110 2 107 100 100 100 133 112 2 113 2 101 2 105 100 100 112 
+-20 0 0 0 2 101 2 101 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 101 2 101 2 0 0 0 20 
+-111 108 0 120 3 110 2 105 112 2 110 2 113 2 110 2 120 2 110 2 113 2 110 2 111 106 2 110 3 120 0 107 112 
+-0 101 0 0 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 0 0 101 0 
+-0 101 0 107 100 100 100 100 100 100 100 100 130 100 100 108 0 107 100 100 130 100 100 100 100 100 100 100 100 108 0 101 0 
+-0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 0 110 21 110 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/3.txt b/games/pacman/res/levels/3.txt
+deleted file mode 100644
+index e72d1c4..0000000
+--- a/games/pacman/res/levels/3.txt
++++ /dev/null
+@@ -1,38 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 25
+-# bgcolor 0 0 0
+-# edgelightcolor 251 233 130
+-# edgeshadowcolor 124 70 16
+-# fillcolor 225 151 51
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-111 100 100 100 100 100 100 108 0 101 0 101 0 107 100 100 100 100 100 100 112 
+-20 0 3 2 2 2 2 101 0 101 0 101 0 101 2 2 2 2 3 0 20 
+-111 108 2 107 100 108 2 101 0 101 0 101 0 101 2 107 100 108 2 107 112 
+-0 101 2 101 0 101 2 105 100 106 0 105 100 106 2 101 0 101 2 101 0 
+-0 101 2 101 0 101 2 2 2 2 2 2 2 2 2 101 0 101 2 101 0 
+-0 101 2 101 0 131 133 133 133 133 133 133 133 133 133 132 0 101 2 101 0 
+-0 101 2 131 133 140 140 130 130 130 130 130 130 130 140 140 133 132 2 101 0 
+-0 101 2 105 130 130 106 2 2 2 10 2 2 2 105 130 130 106 2 101 0 
+-0 101 0 2 2 0 0 2 107 112 1 111 108 2 0 0 2 2 0 101 0 
+-0 105 100 108 2 107 108 2 101 11 12 13 101 2 107 108 2 107 100 106 0 
+-0 0 0 101 2 105 106 2 105 100 100 100 106 2 105 106 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 113 2 107 100 100 100 100 100 108 2 113 2 101 0 0 0 
+-0 0 0 101 0 101 2 110 0 0 4 0 0 110 2 101 0 101 0 0 0 
+-0 107 100 106 0 101 2 2 2 111 133 112 2 2 2 101 0 105 100 108 0 
+-0 101 2 2 2 110 2 113 2 2 101 2 2 113 2 110 2 2 2 101 0 
+-0 101 2 113 0 0 2 131 108 2 101 2 107 132 2 0 0 113 2 101 0 
+-111 106 2 105 100 108 2 105 106 2 110 2 105 106 2 107 100 106 2 105 112 
+-20 0 3 2 2 101 2 2 2 2 0 2 2 2 2 101 2 2 3 0 20 
+-111 100 100 108 2 110 2 111 100 100 133 100 100 112 2 110 2 107 100 100 112 
+-0 0 0 101 0 2 2 2 2 2 110 2 2 2 2 2 0 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 2 2 2 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 105 108 0 107 106 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/4.txt b/games/pacman/res/levels/4.txt
+deleted file mode 100644
+index 11394c2..0000000
+--- a/games/pacman/res/levels/4.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 128 255 0
+-# edgeshadowcolor 128 255 0
+-# fillcolor 0 128 0
+-# pelletcolor 0 255 255
+-# fruittype 4
+-
+-# startleveldata
+-107 100 100 100 108 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-101 3 2 2 105 100 100 100 100 106 0 105 100 100 100 100 100 100 100 108 0 
+-101 2 113 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-101 2 105 133 100 108 2 111 100 108 2 107 100 112 2 107 100 108 2 101 0 
+-101 2 2 101 0 101 2 2 2 101 2 101 2 2 2 101 0 101 2 101 0 
+-105 108 2 105 100 106 2 113 2 110 2 110 2 113 2 105 100 106 2 101 0 
+-0 101 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 101 0 
+-0 101 2 113 2 111 100 130 100 112 2 111 100 130 100 112 2 113 2 101 0 
+-0 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 
+-0 101 2 110 2 113 2 111 100 100 100 100 100 112 2 113 2 110 2 101 0 
+-0 101 3 2 2 101 2 2 0 0 10 0 0 2 2 101 2 2 3 101 0 
+-111 130 100 112 2 105 112 2 107 112 1 111 108 2 111 106 2 111 100 130 112 
+-20 0 0 2 2 2 2 2 101 11 12 13 101 2 2 2 2 2 0 0 20 
+-111 133 100 112 2 111 112 2 105 100 100 100 106 2 111 112 2 111 100 133 112 
+-0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 113 0 107 112 2 111 100 100 100 112 2 111 108 0 113 2 101 0 
+-0 101 2 101 0 101 2 2 0 0 4 0 0 2 2 101 0 101 2 101 0 
+-0 101 2 110 0 110 2 111 100 100 133 100 100 112 2 110 0 110 2 101 0 
+-0 101 2 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 101 0 
+-0 101 2 120 2 120 2 111 112 2 110 2 111 112 2 120 2 120 2 101 0 
+-0 101 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 101 0 
+-0 105 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 106 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/5.txt b/games/pacman/res/levels/5.txt
+deleted file mode 100644
+index 74a735a..0000000
+--- a/games/pacman/res/levels/5.txt
++++ /dev/null
+@@ -1,78 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 65
+-# bgcolor 0 0 0
+-# edgelightcolor 255 0 128
+-# edgeshadowcolor 0 0 0
+-# fillcolor 0 0 0
+-# pelletcolor 0 0 255
+-# fruittype 4
+-
+-# startleveldata
+-113 21 113 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 113 21 113 
+-101 0 105 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 106 0 101 
+-101 0 0 0 2 2 2 2 2 0 0 0 2 2 2 2 2 0 0 0 101 
+-131 100 100 112 3 120 2 113 2 111 100 112 2 113 2 120 3 111 100 100 132 
+-101 2 2 2 2 2 2 101 2 2 2 2 2 101 2 2 2 2 2 2 101 
+-101 2 111 108 2 111 100 140 100 112 2 111 100 140 100 112 2 107 112 2 101 
+-101 2 2 101 2 2 2 101 2 2 2 2 2 101 2 2 2 101 2 2 101 
+-131 112 2 101 2 113 2 110 2 111 133 112 2 110 2 113 2 101 2 111 132 
+-101 2 2 101 2 101 2 2 2 2 101 2 2 2 2 101 2 101 2 2 101 
+-101 2 111 132 2 105 100 100 112 2 110 2 111 100 100 106 2 131 112 2 101 
+-101 2 2 101 2 2 2 2 2 2 0 2 2 2 2 2 2 101 2 2 101 
+-105 108 2 110 2 113 2 120 2 111 100 112 2 120 2 113 2 110 2 107 106 
+-0 101 2 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 2 101 0 
+-111 130 100 112 2 105 100 100 100 108 2 107 100 100 100 106 2 111 100 130 112 
+-20 0 0 0 2 2 2 2 2 101 2 101 2 2 2 2 2 0 0 0 20 
+-107 100 100 100 100 100 100 112 2 110 2 110 2 111 100 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 
+-101 2 107 108 3 120 0 113 0 111 133 112 0 113 0 120 3 107 108 2 101 
+-101 2 131 132 2 0 0 101 0 0 101 0 0 101 0 0 2 131 132 2 101 
+-101 2 131 132 2 111 100 130 112 0 101 0 111 130 100 112 2 131 132 2 101 
+-101 2 131 132 2 2 2 2 2 2 101 2 2 2 2 2 2 131 132 2 101 
+-101 2 131 132 2 107 112 2 113 2 110 2 113 2 111 108 2 131 132 2 101 
+-101 2 131 132 2 110 2 2 101 2 2 2 101 2 2 110 2 131 132 2 101 
+-101 2 131 132 2 0 2 111 132 0 120 0 131 112 2 0 2 131 132 2 101 
+-101 2 131 132 2 113 2 2 101 0 0 0 101 2 2 113 2 131 132 2 101 
+-101 2 131 106 2 105 112 2 110 0 113 0 110 2 111 106 2 105 132 2 101 
+-110 2 101 0 2 2 2 2 2 2 101 2 2 2 2 2 2 0 101 2 110 
+-20 2 101 0 111 112 2 107 112 2 101 2 111 108 2 111 112 0 101 2 20 
+-113 2 101 2 2 2 2 101 2 2 101 2 2 101 2 2 2 2 101 2 113 
+-101 2 101 2 113 2 111 106 2 111 130 112 2 105 112 2 113 2 101 2 101 
+-101 2 101 2 101 2 2 2 2 0 0 0 2 2 2 2 101 2 101 2 101 
+-101 2 101 2 105 100 100 100 112 0 113 0 111 100 100 100 106 2 101 2 101 
+-101 2 101 2 2 2 2 0 0 0 101 0 0 0 2 2 2 2 101 2 101 
+-101 2 101 3 111 112 2 111 100 100 130 100 100 112 2 111 112 3 101 2 101 
+-101 2 101 2 2 2 2 2 0 0 10 0 0 2 2 2 2 2 101 2 101 
+-101 2 131 133 133 133 108 2 107 112 1 111 108 2 107 133 133 133 132 2 101 
+-101 2 105 130 130 130 106 2 101 11 12 13 101 2 105 130 130 130 106 2 101 
+-101 2 2 2 2 2 2 2 105 100 100 100 106 2 2 2 2 2 2 2 101 
+-131 133 133 133 133 133 108 0 0 0 0 0 0 0 107 133 133 133 133 133 132 
+-131 140 140 130 130 130 130 100 100 108 2 107 100 100 130 130 130 130 140 140 132 
+-105 130 132 2 2 2 2 2 2 101 2 101 2 2 2 2 2 2 131 130 106 
+-20 0 110 2 107 100 100 112 2 110 2 110 2 111 100 100 108 2 110 0 20 
+-113 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 113 
+-101 2 111 133 132 2 111 100 100 100 133 100 100 100 112 2 131 133 112 2 101 
+-101 2 2 131 132 2 2 2 2 2 101 2 2 2 2 2 131 132 2 2 101 
+-131 108 2 105 106 2 113 2 113 2 101 2 113 2 113 2 105 106 2 107 132 
+-131 132 2 2 2 2 101 2 110 2 110 2 110 2 101 2 2 2 2 131 132 
+-131 140 133 133 108 2 101 2 0 2 2 2 0 2 101 2 107 133 133 140 132 
+-131 140 140 140 132 2 101 2 107 112 2 111 108 2 101 2 131 140 140 140 132 
+-131 140 140 140 106 2 110 2 110 2 4 2 110 2 110 2 105 140 140 140 132 
+-105 130 130 106 2 2 2 2 2 2 113 2 2 2 2 2 2 105 130 130 106 
+-20 0 0 2 2 113 2 111 100 100 140 100 100 112 2 113 2 2 0 0 20 
+-113 0 113 2 107 132 2 2 2 2 110 2 2 2 2 131 108 2 113 0 113 
+-101 0 101 2 131 132 3 111 112 2 0 2 111 112 3 131 132 2 101 0 101 
+-101 0 101 2 105 132 2 0 0 2 113 2 0 0 2 131 106 2 101 0 101 
+-101 0 101 2 2 101 2 111 112 2 101 2 111 112 2 101 2 2 101 0 101 
+-101 0 131 108 2 101 2 2 2 2 101 2 2 2 2 101 2 107 132 0 101 
+-101 0 131 106 2 101 2 111 100 100 130 100 100 112 2 101 2 105 132 0 101 
+-101 0 101 2 2 101 2 2 2 2 2 2 2 2 2 101 2 2 101 0 101 
+-101 0 101 2 107 132 2 111 100 108 2 107 100 112 2 131 108 2 101 0 101 
+-101 0 101 2 131 132 2 2 2 101 2 101 2 2 2 131 132 2 101 0 101 
+-101 0 101 2 105 130 100 112 2 110 2 110 2 111 100 130 106 2 101 0 101 
+-101 0 101 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 101 0 101 
+-101 0 131 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 132 0 101 
+-110 21 105 130 130 130 130 130 130 130 130 130 130 130 130 130 130 130 106 21 110 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/6.txt b/games/pacman/res/levels/6.txt
+deleted file mode 100644
+index fe40285..0000000
+--- a/games/pacman/res/levels/6.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 255 255 255
+-# edgeshadowcolor 0 128 255
+-# fillcolor 129 11 168
+-# pelletcolor 255 255 255
+-# fruittype 3
+-
+-# startleveldata
+-107 100 100 100 133 100 100 100 100 100 100 100 100 100 100 100 133 100 100 100 108 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-101 3 120 2 110 2 113 2 111 100 100 100 112 2 113 2 110 2 120 3 101 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-131 100 112 2 120 2 105 100 100 100 133 100 100 100 106 2 120 2 111 100 132 
+-101 2 2 2 0 2 2 2 2 2 101 2 2 2 2 2 0 2 2 2 101 
+-101 2 111 100 112 2 107 100 112 2 110 2 111 100 108 2 111 100 112 2 101 
+-101 2 0 2 2 2 110 2 2 2 2 2 2 2 110 2 2 2 0 2 101 
+-105 100 108 2 120 2 0 0 111 100 100 100 112 0 0 2 120 2 107 100 106 
+-0 0 101 2 2 2 113 0 0 0 10 0 0 0 113 2 2 2 101 0 0 
+-0 0 105 100 108 2 101 0 107 112 1 111 108 0 101 2 107 100 106 0 0 
+-0 0 0 0 101 2 101 0 101 11 12 13 101 0 101 2 101 0 0 0 0 
+-111 100 100 100 106 2 110 0 105 100 100 100 106 0 110 2 105 100 100 100 112 
+-20 0 0 0 0 2 2 2 2 2 4 2 2 2 2 2 0 0 0 0 20 
+-111 100 100 100 108 2 113 2 111 100 100 100 112 2 113 2 107 100 100 100 112 
+-0 0 0 0 101 2 101 2 2 2 0 2 2 2 101 2 101 0 0 0 0 
+-0 0 107 100 106 2 131 100 112 2 113 2 111 100 132 2 105 100 108 0 0 
+-0 0 101 2 2 2 101 2 2 2 101 2 2 2 101 2 2 2 101 0 0 
+-107 100 106 2 120 2 101 2 111 100 130 100 112 2 101 2 120 2 105 100 108 
+-101 2 2 2 2 2 101 2 2 2 2 2 2 2 101 2 2 2 2 2 101 
+-101 3 120 2 113 2 105 100 112 2 120 2 111 100 106 2 113 2 120 3 101 
+-101 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 101 
+-105 100 100 100 130 100 100 100 100 100 100 100 100 100 100 100 130 100 100 100 106 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/7.txt b/games/pacman/res/levels/7.txt
+deleted file mode 100644
+index a34c0a9..0000000
+--- a/games/pacman/res/levels/7.txt
++++ /dev/null
+@@ -1,35 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgecolor 255 128 128
+-# fillcolor 100 100 100
+-# pelletcolor 170 0 85
+-# fruittype 0
+-
+-# startleveldata
+-120 21 111 100 108 0 107 100 100 100 100 100 100 100 108 0 107 100 112 21 120 
+-20 2 2 2 105 100 106 2 2 2 2 2 2 2 105 100 106 2 2 2 20 
+-113 3 120 2 2 2 2 2 111 100 133 100 112 2 2 2 2 2 120 3 113 
+-101 2 2 2 107 100 108 2 2 2 101 2 2 2 107 100 108 2 2 2 101 
+-105 100 100 100 106 0 101 2 113 2 101 2 113 2 101 0 105 100 100 100 106 
+-0 0 0 0 0 0 101 2 101 2 101 2 101 2 101 0 0 0 0 0 0 
+-107 100 100 100 100 100 106 2 101 2 110 2 101 2 105 100 100 100 100 100 108 
+-101 2 2 2 2 2 2 2 101 2 2 2 101 2 2 2 2 2 2 2 101 
+-101 2 113 2 113 2 111 100 130 112 0 111 130 100 112 2 113 2 113 2 101 
+-101 2 101 2 101 2 2 2 2 2 4 2 2 2 2 2 101 2 101 2 101 
+-101 2 110 2 105 100 100 112 2 113 0 113 2 111 100 100 106 2 110 2 101 
+-101 2 2 2 2 2 2 2 2 101 0 101 2 2 2 2 2 2 2 2 101 
+-105 100 108 2 107 112 2 107 100 106 0 105 100 108 2 111 108 2 107 100 106 
+-0 0 101 2 101 2 2 101 2 2 2 2 2 101 2 2 101 2 101 0 0 
+-0 0 101 2 110 2 111 106 2 111 100 112 2 105 112 2 110 2 101 0 0 
+-0 0 101 2 2 2 2 2 2 0 10 0 2 2 2 2 2 2 101 0 0 
+-0 0 105 100 108 2 120 2 107 112 1 111 108 2 120 2 107 100 106 0 0 
+-0 0 0 0 101 2 2 2 101 11 12 13 101 2 2 2 101 0 0 0 0 
+-0 0 0 0 101 2 120 2 105 100 100 100 106 2 120 2 101 0 0 0 0 
+-0 0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 0 
+-111 100 100 100 106 0 113 2 111 100 100 100 112 2 113 0 105 100 100 100 112 
+-20 0 0 0 0 0 101 2 2 2 3 2 2 2 101 0 0 0 0 0 20 
+-120 21 111 100 100 100 130 100 100 100 100 100 100 100 130 100 100 100 112 21 120 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/8.txt b/games/pacman/res/levels/8.txt
+deleted file mode 100644
+index 21d3396..0000000
+--- a/games/pacman/res/levels/8.txt
++++ /dev/null
+@@ -1,36 +0,0 @@
+-# lvlwidth 21
+-# lvlheight 23
+-# bgcolor 0 0 0
+-# edgelightcolor 0 128 192
+-# edgeshadowcolor 0 51 51
+-# fillcolor 0 0 0
+-# pelletcolor 255 128 0
+-# fruittype 2
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 113 21 113 21 113 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 106 0 110 0 105 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 107 100 106 2 113 2 120 2 111 133 112 2 120 0 113 2 105 100 108 0 
+-0 101 2 2 2 101 2 2 2 2 101 2 2 2 0 110 2 0 0 101 0 
+-0 101 2 107 100 106 0 111 112 0 110 2 111 112 2 2 2 113 0 101 0 
+-107 106 2 110 2 2 2 0 2 2 2 2 0 0 2 120 3 110 0 105 108 
+-101 2 2 2 2 113 2 113 2 113 2 111 100 108 2 0 0 10 0 0 101 
+-101 2 107 100 100 106 2 110 2 101 2 2 2 101 2 107 112 1 111 133 106 
+-101 2 110 2 2 2 2 0 2 105 100 112 2 110 2 101 11 12 13 101 0 
+-101 2 0 3 120 2 111 108 2 2 2 2 2 2 2 105 100 100 100 130 108 
+-101 2 113 2 2 2 2 105 100 108 2 107 100 112 2 2 2 2 2 2 101 
+-101 2 105 100 100 108 2 2 2 101 2 101 2 2 2 107 100 100 112 2 101 
+-101 2 0 0 0 105 100 112 2 110 2 110 2 111 100 106 2 2 2 2 101 
+-101 2 111 108 2 2 2 2 2 2 2 2 2 2 2 2 2 107 112 2 101 
+-101 2 2 110 2 111 100 112 2 120 4 111 100 112 2 120 2 110 2 2 101 
+-105 108 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 107 106 
+-0 101 2 111 112 0 107 100 112 2 113 0 111 100 108 2 111 112 2 101 0 
+-0 101 2 2 2 3 101 2 2 2 101 0 0 0 101 2 2 2 2 101 0 
+-0 105 100 108 2 111 106 2 111 100 130 100 112 0 105 112 2 107 100 106 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 108 0 113 0 107 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 110 21 110 21 110 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/levels/9.txt b/games/pacman/res/levels/9.txt
+deleted file mode 100644
+index 3661b14..0000000
+--- a/games/pacman/res/levels/9.txt
++++ /dev/null
+@@ -1,46 +0,0 @@
+-# lvlwidth 34
+-# lvlheight 33
+-# bgcolor 0 0 0
+-# edgelightcolor 128 0 255
+-# edgeshadowcolor 64 0 64
+-# fillcolor 0 0 0
+-# pelletcolor 0 255 0
+-# fruittype 1
+-
+-# startleveldata
+-0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 0 113 21 113 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 107 100 100 100 100 100 106 0 105 100 100 100 100 100 100 100 100 100 100 106 0 105 100 100 100 100 100 108 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-111 100 100 106 3 111 100 133 100 112 2 111 100 100 100 108 2 113 2 113 2 111 108 2 113 0 120 3 113 2 105 100 100 112 
+-20 0 0 0 2 2 2 101 2 2 2 2 2 2 2 101 2 101 2 101 2 2 101 2 101 0 0 0 101 2 0 0 0 20 
+-111 100 100 108 2 113 2 110 2 111 100 133 100 112 2 101 2 101 2 105 112 2 110 2 101 0 111 100 106 2 107 100 100 112 
+-0 0 0 101 2 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 101 0 0 0 0 2 101 0 0 0 
+-0 0 0 101 2 131 100 112 2 113 2 101 2 111 100 106 2 105 100 100 100 100 112 2 131 100 100 100 112 2 101 0 0 0 
+-0 0 0 101 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 2 111 100 132 2 110 2 111 100 100 100 100 100 100 100 100 112 2 101 2 111 100 108 0 101 0 0 0 
+-0 0 0 101 2 0 2 2 2 101 2 2 2 0 0 0 0 0 0 0 10 0 0 2 101 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 112 2 110 0 113 2 107 100 100 108 0 107 112 1 111 108 2 110 2 120 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 0 0 101 2 101 0 0 101 0 101 11 12 13 101 2 2 2 2 2 101 0 101 0 0 0 
+-0 0 0 101 2 111 100 100 100 100 100 132 2 105 100 100 106 0 105 100 100 100 106 2 111 100 108 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 2 2 0 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 0 111 100 100 100 108 2 110 0 113 2 113 2 111 100 100 100 100 100 100 112 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 2 2 2 2 101 2 2 2 101 2 101 2 2 2 2 2 2 2 2 2 0 101 2 101 0 101 0 0 0 
+-0 0 0 101 2 107 100 112 2 105 100 112 2 101 2 101 2 111 100 100 133 100 100 112 2 111 106 2 110 0 101 0 0 0 
+-0 0 0 101 2 101 0 4 2 2 2 2 2 101 2 101 2 2 2 2 101 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 101 2 110 0 107 100 100 100 112 0 110 2 110 2 111 112 2 101 2 107 100 100 100 100 100 108 2 101 0 0 0 
+-0 0 0 101 2 0 0 101 2 2 2 2 2 2 2 2 2 2 2 2 101 2 101 0 0 2 2 2 110 2 101 0 0 0 
+-0 0 0 101 2 111 100 106 2 113 2 113 2 120 2 113 0 111 112 2 101 2 101 0 113 2 113 2 2 2 101 0 0 0 
+-0 0 0 101 2 2 2 2 3 101 2 101 2 2 2 101 2 2 2 2 101 2 101 0 110 3 105 100 112 2 101 0 0 0 
+-111 100 100 106 2 111 100 100 100 106 2 101 2 120 2 110 2 111 112 0 110 2 101 2 2 2 2 2 2 2 105 100 100 112 
+-20 0 0 0 2 2 2 2 2 2 2 101 2 2 2 2 2 2 2 2 2 2 101 2 107 108 2 107 108 2 0 0 0 20 
+-111 100 100 108 2 111 100 100 100 112 2 105 100 100 100 112 0 111 100 100 100 100 106 2 105 106 2 105 106 2 107 100 100 112 
+-0 0 0 101 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 101 0 0 0 
+-0 0 0 105 100 100 100 100 100 108 0 107 100 100 100 100 100 100 100 100 100 100 108 0 107 100 100 100 100 100 106 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 0 101 0 101 0 0 0 0 0 0 0 0 0 
+-0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 0 110 21 110 0 0 0 0 0 0 0 0 0 
+-# endleveldata
+-
+-# sprites
+diff --git a/games/pacman/res/sounds/eatfruit.wav b/games/pacman/res/sounds/eatfruit.wav
+deleted file mode 100644
+index d180209..0000000
+Binary files a/games/pacman/res/sounds/eatfruit.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/eatgh2.wav b/games/pacman/res/sounds/eatgh2.wav
+deleted file mode 100644
+index 7d8b90e..0000000
+Binary files a/games/pacman/res/sounds/eatgh2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/extralife.wav b/games/pacman/res/sounds/extralife.wav
+deleted file mode 100644
+index 2db3c19..0000000
+Binary files a/games/pacman/res/sounds/extralife.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/fruitbounce.wav b/games/pacman/res/sounds/fruitbounce.wav
+deleted file mode 100644
+index 6e17741..0000000
+Binary files a/games/pacman/res/sounds/fruitbounce.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet1.wav b/games/pacman/res/sounds/pellet1.wav
+deleted file mode 100644
+index 1d39b64..0000000
+Binary files a/games/pacman/res/sounds/pellet1.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/pellet2.wav b/games/pacman/res/sounds/pellet2.wav
+deleted file mode 100644
+index d8363d0..0000000
+Binary files a/games/pacman/res/sounds/pellet2.wav and /dev/null differ
+diff --git a/games/pacman/res/sounds/powerpellet.wav b/games/pacman/res/sounds/powerpellet.wav
+deleted file mode 100644
+index 489de59..0000000
+Binary files a/games/pacman/res/sounds/powerpellet.wav and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 0.gif b/games/pacman/res/sprite/fruit 0.gif
+deleted file mode 100644
+index 8cc3dc4..0000000
+Binary files a/games/pacman/res/sprite/fruit 0.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 1.gif b/games/pacman/res/sprite/fruit 1.gif
+deleted file mode 100644
+index 8adcf61..0000000
+Binary files a/games/pacman/res/sprite/fruit 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 2.gif b/games/pacman/res/sprite/fruit 2.gif
+deleted file mode 100644
+index bda9369..0000000
+Binary files a/games/pacman/res/sprite/fruit 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 3.gif b/games/pacman/res/sprite/fruit 3.gif
+deleted file mode 100644
+index ea8f006..0000000
+Binary files a/games/pacman/res/sprite/fruit 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/fruit 4.gif b/games/pacman/res/sprite/fruit 4.gif
+deleted file mode 100644
+index 0be5f73..0000000
+Binary files a/games/pacman/res/sprite/fruit 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 1.gif b/games/pacman/res/sprite/ghost 1.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/sprite/ghost 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 2.gif b/games/pacman/res/sprite/ghost 2.gif
+deleted file mode 100644
+index 89845aa..0000000
+Binary files a/games/pacman/res/sprite/ghost 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 3.gif b/games/pacman/res/sprite/ghost 3.gif
+deleted file mode 100644
+index 5777f39..0000000
+Binary files a/games/pacman/res/sprite/ghost 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 4.gif b/games/pacman/res/sprite/ghost 4.gif
+deleted file mode 100644
+index e95b7d7..0000000
+Binary files a/games/pacman/res/sprite/ghost 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 5.gif b/games/pacman/res/sprite/ghost 5.gif
+deleted file mode 100644
+index 9956c84..0000000
+Binary files a/games/pacman/res/sprite/ghost 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/ghost 6.gif b/games/pacman/res/sprite/ghost 6.gif
+deleted file mode 100644
+index 56533bf..0000000
+Binary files a/games/pacman/res/sprite/ghost 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 1.gif b/games/pacman/res/sprite/pacman-d 1.gif
+deleted file mode 100644
+index b3db2db..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 2.gif b/games/pacman/res/sprite/pacman-d 2.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 3.gif b/games/pacman/res/sprite/pacman-d 3.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 4.gif b/games/pacman/res/sprite/pacman-d 4.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 5.gif b/games/pacman/res/sprite/pacman-d 5.gif
+deleted file mode 100644
+index 5fa29e9..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 6.gif b/games/pacman/res/sprite/pacman-d 6.gif
+deleted file mode 100644
+index ee009c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 7.gif b/games/pacman/res/sprite/pacman-d 7.gif
+deleted file mode 100644
+index 84f4cf0..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-d 8.gif b/games/pacman/res/sprite/pacman-d 8.gif
+deleted file mode 100644
+index 2e257c5..0000000
+Binary files a/games/pacman/res/sprite/pacman-d 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 1.gif b/games/pacman/res/sprite/pacman-l 1.gif
+deleted file mode 100644
+index ee7f79a..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 2.gif b/games/pacman/res/sprite/pacman-l 2.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 3.gif b/games/pacman/res/sprite/pacman-l 3.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 4.gif b/games/pacman/res/sprite/pacman-l 4.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 5.gif b/games/pacman/res/sprite/pacman-l 5.gif
+deleted file mode 100644
+index b446def..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 6.gif b/games/pacman/res/sprite/pacman-l 6.gif
+deleted file mode 100644
+index c687f08..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 7.gif b/games/pacman/res/sprite/pacman-l 7.gif
+deleted file mode 100644
+index 00d1fea..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-l 8.gif b/games/pacman/res/sprite/pacman-l 8.gif
+deleted file mode 100644
+index 93907ad..0000000
+Binary files a/games/pacman/res/sprite/pacman-l 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 1.gif b/games/pacman/res/sprite/pacman-r 1.gif
+deleted file mode 100644
+index 7719686..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 2.gif b/games/pacman/res/sprite/pacman-r 2.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 3.gif b/games/pacman/res/sprite/pacman-r 3.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 4.gif b/games/pacman/res/sprite/pacman-r 4.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 5.gif b/games/pacman/res/sprite/pacman-r 5.gif
+deleted file mode 100644
+index 1fe5419..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 6.gif b/games/pacman/res/sprite/pacman-r 6.gif
+deleted file mode 100644
+index acbb20c..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 7.gif b/games/pacman/res/sprite/pacman-r 7.gif
+deleted file mode 100644
+index 6a0ab97..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-r 8.gif b/games/pacman/res/sprite/pacman-r 8.gif
+deleted file mode 100644
+index d99ef73..0000000
+Binary files a/games/pacman/res/sprite/pacman-r 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 1.gif b/games/pacman/res/sprite/pacman-u 1.gif
+deleted file mode 100644
+index 01ef0a3..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 1.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 2.gif b/games/pacman/res/sprite/pacman-u 2.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 2.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 3.gif b/games/pacman/res/sprite/pacman-u 3.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 3.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 4.gif b/games/pacman/res/sprite/pacman-u 4.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 4.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 5.gif b/games/pacman/res/sprite/pacman-u 5.gif
+deleted file mode 100644
+index d4698b0..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 5.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 6.gif b/games/pacman/res/sprite/pacman-u 6.gif
+deleted file mode 100644
+index d67a385..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 6.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 7.gif b/games/pacman/res/sprite/pacman-u 7.gif
+deleted file mode 100644
+index 77f41cc..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 7.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman-u 8.gif b/games/pacman/res/sprite/pacman-u 8.gif
+deleted file mode 100644
+index bceebda..0000000
+Binary files a/games/pacman/res/sprite/pacman-u 8.gif and /dev/null differ
+diff --git a/games/pacman/res/sprite/pacman.gif b/games/pacman/res/sprite/pacman.gif
+deleted file mode 100644
+index a584c10..0000000
+Binary files a/games/pacman/res/sprite/pacman.gif and /dev/null differ
+diff --git a/games/pacman/res/text/0.gif b/games/pacman/res/text/0.gif
+deleted file mode 100644
+index f01b653..0000000
+Binary files a/games/pacman/res/text/0.gif and /dev/null differ
+diff --git a/games/pacman/res/text/1.gif b/games/pacman/res/text/1.gif
+deleted file mode 100644
+index 7349994..0000000
+Binary files a/games/pacman/res/text/1.gif and /dev/null differ
+diff --git a/games/pacman/res/text/2.gif b/games/pacman/res/text/2.gif
+deleted file mode 100644
+index 3254d6f..0000000
+Binary files a/games/pacman/res/text/2.gif and /dev/null differ
+diff --git a/games/pacman/res/text/3.gif b/games/pacman/res/text/3.gif
+deleted file mode 100644
+index c88635d..0000000
+Binary files a/games/pacman/res/text/3.gif and /dev/null differ
+diff --git a/games/pacman/res/text/4.gif b/games/pacman/res/text/4.gif
+deleted file mode 100644
+index f3b5c3b..0000000
+Binary files a/games/pacman/res/text/4.gif and /dev/null differ
+diff --git a/games/pacman/res/text/5.gif b/games/pacman/res/text/5.gif
+deleted file mode 100644
+index dae0fd7..0000000
+Binary files a/games/pacman/res/text/5.gif and /dev/null differ
+diff --git a/games/pacman/res/text/6.gif b/games/pacman/res/text/6.gif
+deleted file mode 100644
+index dae7821..0000000
+Binary files a/games/pacman/res/text/6.gif and /dev/null differ
+diff --git a/games/pacman/res/text/7.gif b/games/pacman/res/text/7.gif
+deleted file mode 100644
+index dda359b..0000000
+Binary files a/games/pacman/res/text/7.gif and /dev/null differ
+diff --git a/games/pacman/res/text/8.gif b/games/pacman/res/text/8.gif
+deleted file mode 100644
+index 01305d4..0000000
+Binary files a/games/pacman/res/text/8.gif and /dev/null differ
+diff --git a/games/pacman/res/text/9.gif b/games/pacman/res/text/9.gif
+deleted file mode 100644
+index b29bb19..0000000
+Binary files a/games/pacman/res/text/9.gif and /dev/null differ
+diff --git a/games/pacman/res/text/gameover.gif b/games/pacman/res/text/gameover.gif
+deleted file mode 100644
+index e854b89..0000000
+Binary files a/games/pacman/res/text/gameover.gif and /dev/null differ
+diff --git a/games/pacman/res/text/life.gif b/games/pacman/res/text/life.gif
+deleted file mode 100644
+index 0e8f1bf..0000000
+Binary files a/games/pacman/res/text/life.gif and /dev/null differ
+diff --git a/games/pacman/res/text/logo.gif b/games/pacman/res/text/logo.gif
+deleted file mode 100644
+index 1cd71a7..0000000
+Binary files a/games/pacman/res/text/logo.gif and /dev/null differ
+diff --git a/games/pacman/res/text/ready.gif b/games/pacman/res/text/ready.gif
+deleted file mode 100644
+index 0cdcd89..0000000
+Binary files a/games/pacman/res/text/ready.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/blank.gif b/games/pacman/res/tiles/blank.gif
+deleted file mode 100644
+index ae631b0..0000000
+Binary files a/games/pacman/res/tiles/blank.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-h.gif b/games/pacman/res/tiles/door-h.gif
+deleted file mode 100644
+index 49687f5..0000000
+Binary files a/games/pacman/res/tiles/door-h.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/door-v.gif b/games/pacman/res/tiles/door-v.gif
+deleted file mode 100644
+index 2e7568d..0000000
+Binary files a/games/pacman/res/tiles/door-v.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-blinky.gif b/games/pacman/res/tiles/ghost-blinky.gif
+deleted file mode 100644
+index af02492..0000000
+Binary files a/games/pacman/res/tiles/ghost-blinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-door.gif b/games/pacman/res/tiles/ghost-door.gif
+deleted file mode 100644
+index cffd09a..0000000
+Binary files a/games/pacman/res/tiles/ghost-door.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-inky.gif b/games/pacman/res/tiles/ghost-inky.gif
+deleted file mode 100644
+index 4753970..0000000
+Binary files a/games/pacman/res/tiles/ghost-inky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-pinky.gif b/games/pacman/res/tiles/ghost-pinky.gif
+deleted file mode 100644
+index 6fd82ec..0000000
+Binary files a/games/pacman/res/tiles/ghost-pinky.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/ghost-sue.gif b/games/pacman/res/tiles/ghost-sue.gif
+deleted file mode 100644
+index 14b057d..0000000
+Binary files a/games/pacman/res/tiles/ghost-sue.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/glasses.gif b/games/pacman/res/tiles/glasses.gif
+deleted file mode 100644
+index f17ba54..0000000
+Binary files a/games/pacman/res/tiles/glasses.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/hiscores.gif b/games/pacman/res/tiles/hiscores.gif
+deleted file mode 100644
+index c504d3c..0000000
+Binary files a/games/pacman/res/tiles/hiscores.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet-power.gif b/games/pacman/res/tiles/pellet-power.gif
+deleted file mode 100644
+index 806f7f4..0000000
+Binary files a/games/pacman/res/tiles/pellet-power.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/pellet.gif b/games/pacman/res/tiles/pellet.gif
+deleted file mode 100644
+index 5284dd8..0000000
+Binary files a/games/pacman/res/tiles/pellet.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/showlogo.gif b/games/pacman/res/tiles/showlogo.gif
+deleted file mode 100644
+index 35abd50..0000000
+Binary files a/games/pacman/res/tiles/showlogo.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/start.gif b/games/pacman/res/tiles/start.gif
+deleted file mode 100644
+index 8b0fafe..0000000
+Binary files a/games/pacman/res/tiles/start.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ll.gif b/games/pacman/res/tiles/wall-corner-ll.gif
+deleted file mode 100644
+index 86b0398..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ll.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-lr.gif b/games/pacman/res/tiles/wall-corner-lr.gif
+deleted file mode 100644
+index c43af41..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-lr.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ul.gif b/games/pacman/res/tiles/wall-corner-ul.gif
+deleted file mode 100644
+index 5acadaa..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ul.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-corner-ur.gif b/games/pacman/res/tiles/wall-corner-ur.gif
+deleted file mode 100644
+index be16253..0000000
+Binary files a/games/pacman/res/tiles/wall-corner-ur.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-b.gif b/games/pacman/res/tiles/wall-end-b.gif
+deleted file mode 100644
+index 9041b06..0000000
+Binary files a/games/pacman/res/tiles/wall-end-b.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-l.gif b/games/pacman/res/tiles/wall-end-l.gif
+deleted file mode 100644
+index 2ed728a..0000000
+Binary files a/games/pacman/res/tiles/wall-end-l.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-r.gif b/games/pacman/res/tiles/wall-end-r.gif
+deleted file mode 100644
+index 25c7848..0000000
+Binary files a/games/pacman/res/tiles/wall-end-r.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-end-t.gif b/games/pacman/res/tiles/wall-end-t.gif
+deleted file mode 100644
+index 2155e70..0000000
+Binary files a/games/pacman/res/tiles/wall-end-t.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-nub.gif b/games/pacman/res/tiles/wall-nub.gif
+deleted file mode 100644
+index 113941b..0000000
+Binary files a/games/pacman/res/tiles/wall-nub.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-horiz.gif b/games/pacman/res/tiles/wall-straight-horiz.gif
+deleted file mode 100644
+index 6308eef..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-horiz.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-straight-vert.gif b/games/pacman/res/tiles/wall-straight-vert.gif
+deleted file mode 100644
+index 6b7ddb7..0000000
+Binary files a/games/pacman/res/tiles/wall-straight-vert.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-bottom.gif b/games/pacman/res/tiles/wall-t-bottom.gif
+deleted file mode 100644
+index 10ac483..0000000
+Binary files a/games/pacman/res/tiles/wall-t-bottom.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-left.gif b/games/pacman/res/tiles/wall-t-left.gif
+deleted file mode 100644
+index 3006e2a..0000000
+Binary files a/games/pacman/res/tiles/wall-t-left.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-right.gif b/games/pacman/res/tiles/wall-t-right.gif
+deleted file mode 100644
+index 27bb644..0000000
+Binary files a/games/pacman/res/tiles/wall-t-right.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-t-top.gif b/games/pacman/res/tiles/wall-t-top.gif
+deleted file mode 100644
+index 11f0e1e..0000000
+Binary files a/games/pacman/res/tiles/wall-t-top.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/wall-x.gif b/games/pacman/res/tiles/wall-x.gif
+deleted file mode 100644
+index 3ba8eaa..0000000
+Binary files a/games/pacman/res/tiles/wall-x.gif and /dev/null differ
+diff --git a/games/pacman/res/tiles/x-paintwall.gif b/games/pacman/res/tiles/x-paintwall.gif
+deleted file mode 100644
+index 78f60c4..0000000
+Binary files a/games/pacman/res/tiles/x-paintwall.gif and /dev/null differ
+diff --git a/ppo_custom_heterognn_Freeway.zip b/ppo_custom_heterognn_Freeway.zip
+index 2ab5bea..4df678f 100644
+Binary files a/ppo_custom_heterognn_Freeway.zip and b/ppo_custom_heterognn_Freeway.zip differ
+diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
+index 45c0c79..52ecce9 120000
+--- a/wandb/debug-internal.log
++++ b/wandb/debug-internal.log
+@@ -1 +1 @@
+-run-20240729_191107-3eokwam7/logs/debug-internal.log
+\ No newline at end of file
++run-20240729_234616-8lal1ggc/logs/debug-internal.log
+\ No newline at end of file
+diff --git a/wandb/debug.log b/wandb/debug.log
+index a5e6cab..5a93adb 120000
+--- a/wandb/debug.log
++++ b/wandb/debug.log
+@@ -1 +1 @@
+-run-20240729_191107-3eokwam7/logs/debug.log
+\ No newline at end of file
++run-20240729_234616-8lal1ggc/logs/debug.log
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+deleted file mode 100644
+index 043386e..0000000
+--- a/wandb/latest-run
++++ /dev/null
+@@ -1 +0,0 @@
+-run-20240715_125454-7cw9smqu
+\ No newline at end of file
+diff --git a/wandb/latest-run b/wandb/latest-run
+new file mode 120000
+index 0000000..18e3241
+--- /dev/null
++++ b/wandb/latest-run
+@@ -0,0 +1 @@
++run-20240729_234616-8lal1ggc
+\ No newline at end of file
diff --git a/wandb/run-20240729_234616-8lal1ggc/files/output.log b/wandb/run-20240729_234616-8lal1ggc/files/output.log
new file mode 100644
index 0000000..95146ab
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/files/output.log
@@ -0,0 +1,1015 @@
+Using cpu device
+Wrapping the env with a `Monitor` wrapper
+Wrapping the env in a DummyVecEnv.
+-----------------------------
+| time/              |      |
+|    fps             | 330  |
+|    iterations      | 1    |
+|    time_elapsed    | 6    |
+|    total_timesteps | 2048 |
+-----------------------------
+----------------------------------------
+| time/                   |            |
+|    fps                  | 104        |
+|    iterations           | 2          |
+|    time_elapsed         | 39         |
+|    total_timesteps      | 4096       |
+| train/                  |            |
+|    approx_kl            | 0.01119299 |
+|    clip_fraction        | 0.062      |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -1.09      |
+|    explained_variance   | -0.0715    |
+|    learning_rate        | 0.0003     |
+|    loss                 | -0.00771   |
+|    n_updates            | 10         |
+|    policy_gradient_loss | -0.0028    |
+|    value_loss           | 5.61       |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.95e+03   |
+| time/                   |             |
+|    fps                  | 84          |
+|    iterations           | 3           |
+|    time_elapsed         | 72          |
+|    total_timesteps      | 6144        |
+| train/                  |             |
+|    approx_kl            | 0.010808436 |
+|    clip_fraction        | 0.0399      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -1.08       |
+|    explained_variance   | 5.96e-06    |
+|    learning_rate        | 0.0003      |
+|    loss                 | 2.56        |
+|    n_updates            | 20          |
+|    policy_gradient_loss | -0.00411    |
+|    value_loss           | 17.8        |
+-----------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.1e+03      |
+|    ep_rew_mean          | -1.95e+03    |
+| time/                   |              |
+|    fps                  | 78           |
+|    iterations           | 4            |
+|    time_elapsed         | 104          |
+|    total_timesteps      | 8192         |
+| train/                  |              |
+|    approx_kl            | 0.0116863735 |
+|    clip_fraction        | 0.0731       |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -1.06        |
+|    explained_variance   | 1.07e-06     |
+|    learning_rate        | 0.0003       |
+|    loss                 | 4.33         |
+|    n_updates            | 30           |
+|    policy_gradient_loss | -0.00721     |
+|    value_loss           | 12.1         |
+------------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.79e+03   |
+| time/                   |             |
+|    fps                  | 74          |
+|    iterations           | 5           |
+|    time_elapsed         | 137         |
+|    total_timesteps      | 10240       |
+| train/                  |             |
+|    approx_kl            | 0.012433373 |
+|    clip_fraction        | 0.0537      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -1.01       |
+|    explained_variance   | 4.77e-07    |
+|    learning_rate        | 0.0003      |
+|    loss                 | 2.65        |
+|    n_updates            | 40          |
+|    policy_gradient_loss | -0.0054     |
+|    value_loss           | 15.7        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.79e+03   |
+| time/                   |             |
+|    fps                  | 71          |
+|    iterations           | 6           |
+|    time_elapsed         | 171         |
+|    total_timesteps      | 12288       |
+| train/                  |             |
+|    approx_kl            | 0.016103763 |
+|    clip_fraction        | 0.113       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.942      |
+|    explained_variance   | 0.573       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 2.17        |
+|    n_updates            | 50          |
+|    policy_gradient_loss | -0.0153     |
+|    value_loss           | 6.8         |
+-----------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 4.1e+03    |
+|    ep_rew_mean          | -1.57e+03  |
+| time/                   |            |
+|    fps                  | 71         |
+|    iterations           | 7          |
+|    time_elapsed         | 201        |
+|    total_timesteps      | 14336      |
+| train/                  |            |
+|    approx_kl            | 0.02167921 |
+|    clip_fraction        | 0.176      |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -0.821     |
+|    explained_variance   | 0.804      |
+|    learning_rate        | 0.0003     |
+|    loss                 | 1.59       |
+|    n_updates            | 60         |
+|    policy_gradient_loss | -0.0157    |
+|    value_loss           | 5.1        |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.57e+03   |
+| time/                   |             |
+|    fps                  | 70          |
+|    iterations           | 8           |
+|    time_elapsed         | 232         |
+|    total_timesteps      | 16384       |
+| train/                  |             |
+|    approx_kl            | 0.015916776 |
+|    clip_fraction        | 0.156       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.691      |
+|    explained_variance   | 0.853       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 1.71        |
+|    n_updates            | 70          |
+|    policy_gradient_loss | -0.0135     |
+|    value_loss           | 4.95        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.3e+03    |
+| time/                   |             |
+|    fps                  | 70          |
+|    iterations           | 9           |
+|    time_elapsed         | 261         |
+|    total_timesteps      | 18432       |
+| train/                  |             |
+|    approx_kl            | 0.010206485 |
+|    clip_fraction        | 0.08        |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.595      |
+|    explained_variance   | 0.884       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.915       |
+|    n_updates            | 80          |
+|    policy_gradient_loss | -0.00532    |
+|    value_loss           | 3.2         |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.3e+03    |
+| time/                   |             |
+|    fps                  | 70          |
+|    iterations           | 10          |
+|    time_elapsed         | 292         |
+|    total_timesteps      | 20480       |
+| train/                  |             |
+|    approx_kl            | 0.010049723 |
+|    clip_fraction        | 0.118       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.481      |
+|    explained_variance   | 0.868       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.551       |
+|    n_updates            | 90          |
+|    policy_gradient_loss | -0.0102     |
+|    value_loss           | 2.6         |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -1.08e+03   |
+| time/                   |             |
+|    fps                  | 69          |
+|    iterations           | 11          |
+|    time_elapsed         | 322         |
+|    total_timesteps      | 22528       |
+| train/                  |             |
+|    approx_kl            | 0.008564648 |
+|    clip_fraction        | 0.0769      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.385      |
+|    explained_variance   | 0.888       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.289       |
+|    n_updates            | 100         |
+|    policy_gradient_loss | -0.00835    |
+|    value_loss           | 1.48        |
+-----------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.1e+03      |
+|    ep_rew_mean          | -1.08e+03    |
+| time/                   |              |
+|    fps                  | 69           |
+|    iterations           | 12           |
+|    time_elapsed         | 352          |
+|    total_timesteps      | 24576        |
+| train/                  |              |
+|    approx_kl            | 0.0034387836 |
+|    clip_fraction        | 0.0425       |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -0.304       |
+|    explained_variance   | 0.912        |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.208        |
+|    n_updates            | 110          |
+|    policy_gradient_loss | -0.00464     |
+|    value_loss           | 1.31         |
+------------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.13e+03     |
+|    ep_rew_mean          | -907         |
+| time/                   |              |
+|    fps                  | 69           |
+|    iterations           | 13           |
+|    time_elapsed         | 381          |
+|    total_timesteps      | 26624        |
+| train/                  |              |
+|    approx_kl            | 0.0024118358 |
+|    clip_fraction        | 0.0295       |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -0.251       |
+|    explained_variance   | 0.932        |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.507        |
+|    n_updates            | 120          |
+|    policy_gradient_loss | -0.00347     |
+|    value_loss           | 1.51         |
+------------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.13e+03     |
+|    ep_rew_mean          | -907         |
+| time/                   |              |
+|    fps                  | 69           |
+|    iterations           | 14           |
+|    time_elapsed         | 413          |
+|    total_timesteps      | 28672        |
+| train/                  |              |
+|    approx_kl            | 0.0013988307 |
+|    clip_fraction        | 0.018        |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -0.203       |
+|    explained_variance   | 0.913        |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.168        |
+|    n_updates            | 130          |
+|    policy_gradient_loss | -0.00212     |
+|    value_loss           | 1.3          |
+------------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -765        |
+| time/                   |             |
+|    fps                  | 68          |
+|    iterations           | 15          |
+|    time_elapsed         | 445         |
+|    total_timesteps      | 30720       |
+| train/                  |             |
+|    approx_kl            | 0.008522009 |
+|    clip_fraction        | 0.0167      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.188      |
+|    explained_variance   | 0.942       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.164       |
+|    n_updates            | 140         |
+|    policy_gradient_loss | -0.00173    |
+|    value_loss           | 0.747       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -765        |
+| time/                   |             |
+|    fps                  | 68          |
+|    iterations           | 16          |
+|    time_elapsed         | 480         |
+|    total_timesteps      | 32768       |
+| train/                  |             |
+|    approx_kl            | 0.005810387 |
+|    clip_fraction        | 0.0454      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.182      |
+|    explained_variance   | 0.927       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0881      |
+|    n_updates            | 150         |
+|    policy_gradient_loss | -0.0133     |
+|    value_loss           | 0.9         |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -643        |
+| time/                   |             |
+|    fps                  | 68          |
+|    iterations           | 17          |
+|    time_elapsed         | 511         |
+|    total_timesteps      | 34816       |
+| train/                  |             |
+|    approx_kl            | 0.004052513 |
+|    clip_fraction        | 0.0226      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.137      |
+|    explained_variance   | 0.918       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.134       |
+|    n_updates            | 160         |
+|    policy_gradient_loss | -0.0021     |
+|    value_loss           | 0.933       |
+-----------------------------------------
+---------------------------------------
+| rollout/                |           |
+|    ep_len_mean          | 4.1e+03   |
+|    ep_rew_mean          | -643      |
+| time/                   |           |
+|    fps                  | 67        |
+|    iterations           | 18        |
+|    time_elapsed         | 543       |
+|    total_timesteps      | 36864     |
+| train/                  |           |
+|    approx_kl            | 0.0063252 |
+|    clip_fraction        | 0.0279    |
+|    clip_range           | 0.2       |
+|    entropy_loss         | -0.189    |
+|    explained_variance   | 0.919     |
+|    learning_rate        | 0.0003    |
+|    loss                 | 0.277     |
+|    n_updates            | 170       |
+|    policy_gradient_loss | -0.00622  |
+|    value_loss           | 1.11      |
+---------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.1e+03      |
+|    ep_rew_mean          | -555         |
+| time/                   |              |
+|    fps                  | 67           |
+|    iterations           | 19           |
+|    time_elapsed         | 575          |
+|    total_timesteps      | 38912        |
+| train/                  |              |
+|    approx_kl            | 0.0053299814 |
+|    clip_fraction        | 0.0256       |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -0.186       |
+|    explained_variance   | 0.926        |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.106        |
+|    n_updates            | 180          |
+|    policy_gradient_loss | -0.0086      |
+|    value_loss           | 0.88         |
+------------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -555        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 20          |
+|    time_elapsed         | 608         |
+|    total_timesteps      | 40960       |
+| train/                  |             |
+|    approx_kl            | 0.008749977 |
+|    clip_fraction        | 0.071       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.253      |
+|    explained_variance   | 0.941       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.102       |
+|    n_updates            | 190         |
+|    policy_gradient_loss | -0.00454    |
+|    value_loss           | 0.795       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -498        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 21          |
+|    time_elapsed         | 640         |
+|    total_timesteps      | 43008       |
+| train/                  |             |
+|    approx_kl            | 0.010460892 |
+|    clip_fraction        | 0.0602      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.285      |
+|    explained_variance   | 0.914       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.213       |
+|    n_updates            | 200         |
+|    policy_gradient_loss | -0.000966   |
+|    value_loss           | 1.37        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -498        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 22          |
+|    time_elapsed         | 672         |
+|    total_timesteps      | 45056       |
+| train/                  |             |
+|    approx_kl            | 0.012104099 |
+|    clip_fraction        | 0.0619      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.275      |
+|    explained_variance   | 0.925       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0792      |
+|    n_updates            | 210         |
+|    policy_gradient_loss | -0.0102     |
+|    value_loss           | 0.857       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -446        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 23          |
+|    time_elapsed         | 702         |
+|    total_timesteps      | 47104       |
+| train/                  |             |
+|    approx_kl            | 0.008722063 |
+|    clip_fraction        | 0.0686      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.227      |
+|    explained_variance   | 0.846       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.138       |
+|    n_updates            | 220         |
+|    policy_gradient_loss | -0.00499    |
+|    value_loss           | 0.917       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -446        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 24          |
+|    time_elapsed         | 733         |
+|    total_timesteps      | 49152       |
+| train/                  |             |
+|    approx_kl            | 0.009805991 |
+|    clip_fraction        | 0.0997      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.36       |
+|    explained_variance   | 0.949       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.157       |
+|    n_updates            | 230         |
+|    policy_gradient_loss | -0.0029     |
+|    value_loss           | 1.33        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -423        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 25          |
+|    time_elapsed         | 763         |
+|    total_timesteps      | 51200       |
+| train/                  |             |
+|    approx_kl            | 0.011816467 |
+|    clip_fraction        | 0.0849      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.432      |
+|    explained_variance   | 0.93        |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.102       |
+|    n_updates            | 240         |
+|    policy_gradient_loss | -0.003      |
+|    value_loss           | 1.18        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -423        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 26          |
+|    time_elapsed         | 791         |
+|    total_timesteps      | 53248       |
+| train/                  |             |
+|    approx_kl            | 0.020517293 |
+|    clip_fraction        | 0.0984      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.229      |
+|    explained_variance   | 0.8         |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.204       |
+|    n_updates            | 250         |
+|    policy_gradient_loss | -0.00958    |
+|    value_loss           | 1.1         |
+-----------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 4.15e+03   |
+|    ep_rew_mean          | -376       |
+| time/                   |            |
+|    fps                  | 67         |
+|    iterations           | 27         |
+|    time_elapsed         | 821        |
+|    total_timesteps      | 55296      |
+| train/                  |            |
+|    approx_kl            | 0.01430209 |
+|    clip_fraction        | 0.0913     |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -0.236     |
+|    explained_variance   | 0.897      |
+|    learning_rate        | 0.0003     |
+|    loss                 | 0.0576     |
+|    n_updates            | 260        |
+|    policy_gradient_loss | -0.0121    |
+|    value_loss           | 0.934      |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.15e+03    |
+|    ep_rew_mean          | -376        |
+| time/                   |             |
+|    fps                  | 66          |
+|    iterations           | 28          |
+|    time_elapsed         | 856         |
+|    total_timesteps      | 57344       |
+| train/                  |             |
+|    approx_kl            | 0.015262424 |
+|    clip_fraction        | 0.0777      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.247      |
+|    explained_variance   | 0.88        |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.152       |
+|    n_updates            | 270         |
+|    policy_gradient_loss | 0.00174     |
+|    value_loss           | 0.869       |
+-----------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.1e+03      |
+|    ep_rew_mean          | -351         |
+| time/                   |              |
+|    fps                  | 66           |
+|    iterations           | 29           |
+|    time_elapsed         | 886          |
+|    total_timesteps      | 59392        |
+| train/                  |              |
+|    approx_kl            | 0.0077135577 |
+|    clip_fraction        | 0.074        |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -0.303       |
+|    explained_variance   | 0.933        |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.0576       |
+|    n_updates            | 280          |
+|    policy_gradient_loss | -0.0138      |
+|    value_loss           | 0.804        |
+------------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -351        |
+| time/                   |             |
+|    fps                  | 66          |
+|    iterations           | 30          |
+|    time_elapsed         | 917         |
+|    total_timesteps      | 61440       |
+| train/                  |             |
+|    approx_kl            | 0.028804656 |
+|    clip_fraction        | 0.127       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.24       |
+|    explained_variance   | 0.883       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0936      |
+|    n_updates            | 290         |
+|    policy_gradient_loss | -0.018      |
+|    value_loss           | 0.721       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -320        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 31          |
+|    time_elapsed         | 946         |
+|    total_timesteps      | 63488       |
+| train/                  |             |
+|    approx_kl            | 0.013048139 |
+|    clip_fraction        | 0.0769      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.188      |
+|    explained_variance   | 0.909       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0804      |
+|    n_updates            | 300         |
+|    policy_gradient_loss | -0.00714    |
+|    value_loss           | 0.54        |
+-----------------------------------------
+------------------------------------------
+| rollout/                |              |
+|    ep_len_mean          | 4.1e+03      |
+|    ep_rew_mean          | -320         |
+| time/                   |              |
+|    fps                  | 67           |
+|    iterations           | 32           |
+|    time_elapsed         | 976          |
+|    total_timesteps      | 65536        |
+| train/                  |              |
+|    approx_kl            | 0.0151011115 |
+|    clip_fraction        | 0.0854       |
+|    clip_range           | 0.2          |
+|    entropy_loss         | -0.155       |
+|    explained_variance   | 0.907        |
+|    learning_rate        | 0.0003       |
+|    loss                 | 0.035        |
+|    n_updates            | 310          |
+|    policy_gradient_loss | -0.00491     |
+|    value_loss           | 0.627        |
+------------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 4.1e+03    |
+|    ep_rew_mean          | -288       |
+| time/                   |            |
+|    fps                  | 67         |
+|    iterations           | 33         |
+|    time_elapsed         | 1007       |
+|    total_timesteps      | 67584      |
+| train/                  |            |
+|    approx_kl            | 0.01052282 |
+|    clip_fraction        | 0.071      |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -0.238     |
+|    explained_variance   | 0.942      |
+|    learning_rate        | 0.0003     |
+|    loss                 | 0.0462     |
+|    n_updates            | 320        |
+|    policy_gradient_loss | -0.00768   |
+|    value_loss           | 0.536      |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -288        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 34          |
+|    time_elapsed         | 1036        |
+|    total_timesteps      | 69632       |
+| train/                  |             |
+|    approx_kl            | 0.014813322 |
+|    clip_fraction        | 0.0765      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.244      |
+|    explained_variance   | 0.92        |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.188       |
+|    n_updates            | 330         |
+|    policy_gradient_loss | -0.00946    |
+|    value_loss           | 0.546       |
+-----------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 4.11e+03   |
+|    ep_rew_mean          | -260       |
+| time/                   |            |
+|    fps                  | 67         |
+|    iterations           | 35         |
+|    time_elapsed         | 1066       |
+|    total_timesteps      | 71680      |
+| train/                  |            |
+|    approx_kl            | 0.01853648 |
+|    clip_fraction        | 0.088      |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -0.219     |
+|    explained_variance   | 0.946      |
+|    learning_rate        | 0.0003     |
+|    loss                 | 0.0349     |
+|    n_updates            | 340        |
+|    policy_gradient_loss | -0.0126    |
+|    value_loss           | 0.46       |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.11e+03    |
+|    ep_rew_mean          | -260        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 36          |
+|    time_elapsed         | 1095        |
+|    total_timesteps      | 73728       |
+| train/                  |             |
+|    approx_kl            | 0.015810236 |
+|    clip_fraction        | 0.111       |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.314      |
+|    explained_variance   | 0.941       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0763      |
+|    n_updates            | 350         |
+|    policy_gradient_loss | -0.0121     |
+|    value_loss           | 0.669       |
+-----------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 4.13e+03   |
+|    ep_rew_mean          | -246       |
+| time/                   |            |
+|    fps                  | 67         |
+|    iterations           | 37         |
+|    time_elapsed         | 1125       |
+|    total_timesteps      | 75776      |
+| train/                  |            |
+|    approx_kl            | 0.01458024 |
+|    clip_fraction        | 0.0681     |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -0.242     |
+|    explained_variance   | 0.927      |
+|    learning_rate        | 0.0003     |
+|    loss                 | 0.122      |
+|    n_updates            | 360        |
+|    policy_gradient_loss | -0.00593   |
+|    value_loss           | 0.725      |
+----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.13e+03    |
+|    ep_rew_mean          | -246        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 38          |
+|    time_elapsed         | 1154        |
+|    total_timesteps      | 77824       |
+| train/                  |             |
+|    approx_kl            | 0.012801578 |
+|    clip_fraction        | 0.0566      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.19       |
+|    explained_variance   | 0.908       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.049       |
+|    n_updates            | 370         |
+|    policy_gradient_loss | -0.00702    |
+|    value_loss           | 0.698       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.13e+03    |
+|    ep_rew_mean          | -221        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 39          |
+|    time_elapsed         | 1186        |
+|    total_timesteps      | 79872       |
+| train/                  |             |
+|    approx_kl            | 0.010558541 |
+|    clip_fraction        | 0.0709      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.218      |
+|    explained_variance   | 0.943       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0988      |
+|    n_updates            | 380         |
+|    policy_gradient_loss | -0.0029     |
+|    value_loss           | 0.662       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.13e+03    |
+|    ep_rew_mean          | -221        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 40          |
+|    time_elapsed         | 1217        |
+|    total_timesteps      | 81920       |
+| train/                  |             |
+|    approx_kl            | 0.009910416 |
+|    clip_fraction        | 0.0627      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.213      |
+|    explained_variance   | 0.918       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.655       |
+|    n_updates            | 390         |
+|    policy_gradient_loss | -0.00644    |
+|    value_loss           | 0.893       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -201        |
+| time/                   |             |
+|    fps                  | 66          |
+|    iterations           | 41          |
+|    time_elapsed         | 1253        |
+|    total_timesteps      | 83968       |
+| train/                  |             |
+|    approx_kl            | 0.012642046 |
+|    clip_fraction        | 0.0894      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.25       |
+|    explained_variance   | 0.928       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.112       |
+|    n_updates            | 400         |
+|    policy_gradient_loss | -0.004      |
+|    value_loss           | 0.737       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -201        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 42          |
+|    time_elapsed         | 1283        |
+|    total_timesteps      | 86016       |
+| train/                  |             |
+|    approx_kl            | 0.026916023 |
+|    clip_fraction        | 0.0913      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.223      |
+|    explained_variance   | 0.918       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.143       |
+|    n_updates            | 410         |
+|    policy_gradient_loss | -0.0112     |
+|    value_loss           | 0.866       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -184        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 43          |
+|    time_elapsed         | 1313        |
+|    total_timesteps      | 88064       |
+| train/                  |             |
+|    approx_kl            | 0.008245415 |
+|    clip_fraction        | 0.0564      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.235      |
+|    explained_variance   | 0.94        |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0854      |
+|    n_updates            | 420         |
+|    policy_gradient_loss | -0.00488    |
+|    value_loss           | 0.536       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -184        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 44          |
+|    time_elapsed         | 1343        |
+|    total_timesteps      | 90112       |
+| train/                  |             |
+|    approx_kl            | 0.018181363 |
+|    clip_fraction        | 0.0688      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.164      |
+|    explained_variance   | 0.914       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0529      |
+|    n_updates            | 430         |
+|    policy_gradient_loss | -0.00904    |
+|    value_loss           | 0.57        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -163        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 45          |
+|    time_elapsed         | 1373        |
+|    total_timesteps      | 92160       |
+| train/                  |             |
+|    approx_kl            | 0.019299295 |
+|    clip_fraction        | 0.0707      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.193      |
+|    explained_variance   | 0.907       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0402      |
+|    n_updates            | 440         |
+|    policy_gradient_loss | -0.0101     |
+|    value_loss           | 0.547       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.1e+03     |
+|    ep_rew_mean          | -163        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 46          |
+|    time_elapsed         | 1402        |
+|    total_timesteps      | 94208       |
+| train/                  |             |
+|    approx_kl            | 0.021187227 |
+|    clip_fraction        | 0.0954      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.218      |
+|    explained_variance   | 0.928       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.118       |
+|    n_updates            | 450         |
+|    policy_gradient_loss | -0.00576    |
+|    value_loss           | 0.542       |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.11e+03    |
+|    ep_rew_mean          | -147        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 47          |
+|    time_elapsed         | 1432        |
+|    total_timesteps      | 96256       |
+| train/                  |             |
+|    approx_kl            | 0.016175035 |
+|    clip_fraction        | 0.0838      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.173      |
+|    explained_variance   | 0.92        |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0279      |
+|    n_updates            | 460         |
+|    policy_gradient_loss | -0.0173     |
+|    value_loss           | 0.58        |
+-----------------------------------------
+-----------------------------------------
+| rollout/                |             |
+|    ep_len_mean          | 4.11e+03    |
+|    ep_rew_mean          | -147        |
+| time/                   |             |
+|    fps                  | 67          |
+|    iterations           | 48          |
+|    time_elapsed         | 1462        |
+|    total_timesteps      | 98304       |
+| train/                  |             |
+|    approx_kl            | 0.014078083 |
+|    clip_fraction        | 0.0762      |
+|    clip_range           | 0.2         |
+|    entropy_loss         | -0.188      |
+|    explained_variance   | 0.918       |
+|    learning_rate        | 0.0003      |
+|    loss                 | 0.0769      |
+|    n_updates            | 470         |
+|    policy_gradient_loss | -0.0217     |
+|    value_loss           | 0.618       |
+-----------------------------------------
+----------------------------------------
+| rollout/                |            |
+|    ep_len_mean          | 4.1e+03    |
+|    ep_rew_mean          | -139       |
+| time/                   |            |
+|    fps                  | 67         |
+|    iterations           | 49         |
+|    time_elapsed         | 1492       |
+|    total_timesteps      | 100352     |
+| train/                  |            |
+|    approx_kl            | 0.01797507 |
+|    clip_fraction        | 0.0812     |
+|    clip_range           | 0.2        |
+|    entropy_loss         | -0.234     |
+|    explained_variance   | 0.931      |
+|    learning_rate        | 0.0003     |
+|    loss                 | 0.0526     |
+|    n_updates            | 480        |
+|    policy_gradient_loss | -0.00898   |
+|    value_loss           | 0.511      |
+----------------------------------------
\ No newline at end of file
diff --git a/wandb/run-20240729_234616-8lal1ggc/files/requirements.txt b/wandb/run-20240729_234616-8lal1ggc/files/requirements.txt
new file mode 100644
index 0000000..717b9d3
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/files/requirements.txt
@@ -0,0 +1,83 @@
+AutoROM.accept-rom-license==0.6.1
+AutoROM==0.4.2
+Farama-Notifications==0.0.4
+GitPython==3.1.43
+Jinja2==3.1.4
+Markdown==3.6
+MarkupSafe==2.1.5
+PyYAML==6.0.1
+Shimmy==0.2.1
+Werkzeug==3.0.3
+absl-py==2.1.0
+aiohttp==3.9.5
+aiosignal==1.3.1
+ale-py==0.8.1
+async-timeout==4.0.3
+atari-py==0.2.5
+attrs==23.2.0
+certifi==2024.2.2
+charset-normalizer==3.3.2
+click==8.1.7
+cloudpickle==3.0.0
+contourpy==1.2.1
+cycler==0.12.1
+docker-pycreds==0.4.0
+filelock==3.14.0
+fonttools==4.52.4
+frozenlist==1.4.1
+fsspec==2024.5.0
+gitdb==4.0.11
+grpcio==1.64.0
+gymnasium==0.29.1
+idna==3.7
+imageio==2.34.1
+importlib_resources==6.4.0
+joblib==1.4.2
+kiwisolver==1.4.5
+lazy_loader==0.4
+lightning-utilities==0.11.2
+lightning==2.2.5
+matplotlib==3.9.0
+mpmath==1.3.0
+multidict==6.0.5
+networkx==3.3
+numpy==1.26.4
+opencv-python==4.10.0.84
+packaging==24.0
+pandas==2.2.2
+pillow==10.3.0
+pip==23.3.1
+platformdirs==4.2.2
+protobuf==4.25.3
+psutil==5.9.8
+pygame==2.5.2
+pyparsing==3.1.2
+python-dateutil==2.9.0.post0
+pytorch-lightning==2.2.5
+pytz==2024.1
+requests==2.32.2
+sb3_contrib==2.3.0
+scikit-image==0.23.2
+scikit-learn==1.5.0
+scipy==1.13.1
+sentry-sdk==2.3.1
+setproctitle==1.3.3
+setuptools==68.2.2
+six==1.16.0
+smmap==5.0.1
+stable_baselines3==2.3.2
+sympy==1.12
+tensorboard-data-server==0.7.2
+tensorboard==2.16.2
+threadpoolctl==3.5.0
+tifffile==2024.5.22
+torch==2.3.0
+torch_geometric==2.5.3
+torchmetrics==1.4.0.post0
+tqdm==4.66.4
+typing_extensions==4.12.0
+tzdata==2024.1
+urllib3==2.2.1
+wandb==0.17.0
+wheel==0.42.0
+yarl==1.9.4
\ No newline at end of file
diff --git a/wandb/run-20240729_234616-8lal1ggc/files/wandb-metadata.json b/wandb/run-20240729_234616-8lal1ggc/files/wandb-metadata.json
new file mode 100644
index 0000000..1362cc5
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/files/wandb-metadata.json
@@ -0,0 +1,48 @@
+{
+    "os": "macOS-14.0-arm64-arm-64bit",
+    "python": "3.10.14",
+    "heartbeatAt": "2024-07-29T21:46:17.876086",
+    "startedAt": "2024-07-29T21:46:16.960015",
+    "docker": null,
+    "cuda": null,
+    "args": [],
+    "state": "running",
+    "program": "-m games.freeway.run_supervised_gnn",
+    "codePathLocal": null,
+    "git": {
+        "remote": "https://github.com/rb248/Master-Thesis-GNN.git",
+        "commit": "658fe2953cac0367c1821fdd348158955a06af8a"
+    },
+    "email": "rishabhbhatia315@gmail.com",
+    "root": "/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN",
+    "host": "rishubs-MBP.fritz.box",
+    "username": "rishubbhatia",
+    "executable": "/Users/rishubbhatia/miniforge3/envs/games/bin/python",
+    "cpu_count": 8,
+    "cpu_count_logical": 8,
+    "cpu_freq": {
+        "current": 3204,
+        "min": 600,
+        "max": 3204
+    },
+    "cpu_freq_per_core": [
+        {
+            "current": 3204,
+            "min": 600,
+            "max": 3204
+        }
+    ],
+    "disk": {
+        "/": {
+            "total": 228.27386474609375,
+            "used": 13.797981262207031
+        }
+    },
+    "gpuapple": {
+        "type": "arm",
+        "vendor": "Apple"
+    },
+    "memory": {
+        "total": 8.0
+    }
+}
diff --git a/wandb/run-20240729_234616-8lal1ggc/logs/debug-internal.log b/wandb/run-20240729_234616-8lal1ggc/logs/debug-internal.log
new file mode 100644
index 0000000..746b98d
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/logs/debug-internal.log
@@ -0,0 +1,7153 @@
+2024-07-29 23:46:16,999 INFO    StreamThr :73359 [internal.py:wandb_internal():85] W&B internal server running at pid: 73359, started at: 2024-07-29 23:46:16.990359
+2024-07-29 23:46:17,004 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status
+2024-07-29 23:46:17,013 INFO    WriterThread:73359 [datastore.py:open_for_write():87] open: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/run-8lal1ggc.wandb
+2024-07-29 23:46:17,014 DEBUG   SenderThread:73359 [sender.py:send():378] send: header
+2024-07-29 23:46:17,059 DEBUG   SenderThread:73359 [sender.py:send():378] send: run
+2024-07-29 23:46:17,473 INFO    SenderThread:73359 [dir_watcher.py:__init__():211] watching files in: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files
+2024-07-29 23:46:17,473 INFO    SenderThread:73359 [sender.py:_start_run_threads():1123] run started: 8lal1ggc with start time 1722289577.001902
+2024-07-29 23:46:17,483 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: check_version
+2024-07-29 23:46:17,483 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: check_version
+2024-07-29 23:46:17,675 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: run_start
+2024-07-29 23:46:17,698 DEBUG   HandlerThread:73359 [system_info.py:__init__():26] System info init
+2024-07-29 23:46:17,699 DEBUG   HandlerThread:73359 [system_info.py:__init__():41] System info init done
+2024-07-29 23:46:17,699 INFO    HandlerThread:73359 [system_monitor.py:start():194] Starting system monitor
+2024-07-29 23:46:17,699 INFO    SystemMonitor:73359 [system_monitor.py:_start():158] Starting system asset monitoring threads
+2024-07-29 23:46:17,699 INFO    HandlerThread:73359 [system_monitor.py:probe():214] Collecting system info
+2024-07-29 23:46:17,701 INFO    SystemMonitor:73359 [interfaces.py:start():188] Started cpu monitoring
+2024-07-29 23:46:17,703 INFO    SystemMonitor:73359 [interfaces.py:start():188] Started disk monitoring
+2024-07-29 23:46:17,704 INFO    SystemMonitor:73359 [interfaces.py:start():188] Started gpuapple monitoring
+2024-07-29 23:46:17,706 INFO    SystemMonitor:73359 [interfaces.py:start():188] Started memory monitoring
+2024-07-29 23:46:17,707 INFO    SystemMonitor:73359 [interfaces.py:start():188] Started network monitoring
+2024-07-29 23:46:17,871 ERROR   HandlerThread:73359 [gpu_apple.py:probe():176] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 164, in probe
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:17,876 DEBUG   HandlerThread:73359 [system_info.py:probe():150] Probing system
+2024-07-29 23:46:17,883 DEBUG   HandlerThread:73359 [system_info.py:_probe_git():135] Probing git
+2024-07-29 23:46:17,937 DEBUG   HandlerThread:73359 [system_info.py:_probe_git():143] Probing git done
+2024-07-29 23:46:17,937 DEBUG   HandlerThread:73359 [system_info.py:probe():198] Probing system done
+2024-07-29 23:46:17,937 DEBUG   HandlerThread:73359 [system_monitor.py:probe():223] {'os': 'macOS-14.0-arm64-arm-64bit', 'python': '3.10.14', 'heartbeatAt': '2024-07-29T21:46:17.876086', 'startedAt': '2024-07-29T21:46:16.960015', 'docker': None, 'cuda': None, 'args': (), 'state': 'running', 'program': '-m games.freeway.run_supervised_gnn', 'codePathLocal': None, 'git': {'remote': 'https://github.com/rb248/Master-Thesis-GNN.git', 'commit': '658fe2953cac0367c1821fdd348158955a06af8a'}, 'email': 'rishabhbhatia315@gmail.com', 'root': '/Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN', 'host': 'rishubs-MBP.fritz.box', 'username': 'rishubbhatia', 'executable': '/Users/rishubbhatia/miniforge3/envs/games/bin/python', 'cpu_count': 8, 'cpu_count_logical': 8, 'cpu_freq': {'current': 3204, 'min': 600, 'max': 3204}, 'cpu_freq_per_core': [{'current': 3204, 'min': 600, 'max': 3204}], 'disk': {'/': {'total': 228.27386474609375, 'used': 13.797981262207031}}, 'gpuapple': {'type': 'arm', 'vendor': 'Apple'}, 'memory': {'total': 8.0}}
+2024-07-29 23:46:17,937 INFO    HandlerThread:73359 [system_monitor.py:probe():224] Finished collecting system info
+2024-07-29 23:46:17,937 INFO    HandlerThread:73359 [system_monitor.py:probe():227] Publishing system info
+2024-07-29 23:46:17,938 DEBUG   HandlerThread:73359 [system_info.py:_save_conda():207] Saving list of conda packages installed into the current environment
+2024-07-29 23:46:17,953 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:18,479 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml
+2024-07-29 23:46:20,069 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:21,470 DEBUG   HandlerThread:73359 [system_info.py:_save_conda():222] Saving conda packages done
+2024-07-29 23:46:21,471 DEBUG   HandlerThread:73359 [system_info.py:_save_code():44] Saving code
+2024-07-29 23:46:21,471 WARNING HandlerThread:73359 [system_info.py:_save_code():46] unable to save code -- program entry not found
+2024-07-29 23:46:21,471 DEBUG   HandlerThread:73359 [system_info.py:_save_patches():82] Saving git patches
+2024-07-29 23:46:21,497 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml
+2024-07-29 23:46:22,184 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:22,190 DEBUG   HandlerThread:73359 [system_info.py:_save_patches():124] Saving git patches done
+2024-07-29 23:46:22,192 INFO    HandlerThread:73359 [system_monitor.py:probe():229] Finished publishing system info
+2024-07-29 23:46:22,208 DEBUG   SenderThread:73359 [sender.py:send():378] send: files
+2024-07-29 23:46:22,208 INFO    SenderThread:73359 [sender.py:_save_file():1389] saving file wandb-metadata.json with policy now
+2024-07-29 23:46:22,208 INFO    SenderThread:73359 [sender.py:_save_file():1389] saving file diff.patch with policy now
+2024-07-29 23:46:22,209 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:22,417 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: python_packages
+2024-07-29 23:46:22,418 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: python_packages
+2024-07-29 23:46:22,418 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:46:22,418 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:46:22,500 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/wandb-metadata.json
+2024-07-29 23:46:22,500 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/diff.patch
+2024-07-29 23:46:22,500 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/requirements.txt
+2024-07-29 23:46:22,688 DEBUG   SenderThread:73359 [sender.py:send():378] send: telemetry
+2024-07-29 23:46:22,794 INFO    wandb-upload_0:73359 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpeun2zqetwandb/emdt5m7i-wandb-metadata.json
+2024-07-29 23:46:23,351 INFO    wandb-upload_1:73359 [upload_job.py:push():130] Uploaded file /var/folders/my/7z0rbf091qj03p882sd10h_00000gn/T/tmpeun2zqetwandb/lxb0ua1q-diff.patch
+2024-07-29 23:46:24,249 DEBUG   SenderThread:73359 [sender.py:send():378] send: telemetry
+2024-07-29 23:46:24,256 DEBUG   SenderThread:73359 [sender.py:send():378] send: config
+2024-07-29 23:46:24,308 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:24,506 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:46:26,518 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:46:26,572 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:27,267 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:28,712 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:30,864 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:32,483 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:32,540 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:46:33,002 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:35,294 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:37,429 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:46:37,435 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:46:37,701 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:37,716 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:39,923 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:42,133 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:42,739 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:44,311 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:46,455 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:47,757 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:48,619 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/config.yaml
+2024-07-29 23:46:48,647 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:50,933 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:52,422 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:46:52,423 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:46:53,094 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:53,674 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:55,243 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:57,374 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:46:58,695 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:46:59,500 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:01,821 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:04,108 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:04,349 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:04,918 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:47:06,322 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:07,455 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:47:07,481 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:47:08,517 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:09,716 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:10,985 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:13,160 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:14,736 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:15,905 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:17,712 DEBUG   SystemMonitor:73359 [system_monitor.py:_start():172] Starting system metrics aggregation loop
+2024-07-29 23:47:17,715 DEBUG   SenderThread:73359 [sender.py:send():378] send: telemetry
+2024-07-29 23:47:17,715 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:47:18,052 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:20,180 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:20,732 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:21,202 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/config.yaml
+2024-07-29 23:47:22,308 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:22,436 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:47:22,436 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:47:24,436 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:26,562 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:26,701 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:28,715 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:30,864 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:31,721 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:33,007 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:35,131 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:37,336 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:37,448 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:47:37,449 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:47:37,643 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:38,271 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:47:39,479 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:41,636 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:42,663 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:43,805 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:45,952 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:47,675 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:47,720 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:47:48,119 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:50,245 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:52,415 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:52,452 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:47:52,452 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:47:52,696 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:54,565 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:56,724 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:47:57,714 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:47:58,943 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:01,125 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:02,735 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:03,426 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:06,061 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:07,458 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:48:07,459 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:48:08,242 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:08,529 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:10,577 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:48:10,630 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:12,882 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:13,550 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:15,048 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:17,212 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:17,726 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:48:18,730 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:19,370 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:21,686 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:22,462 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:48:22,462 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:48:23,854 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:24,723 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:25,979 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:28,125 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:29,741 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:30,291 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:32,472 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:34,654 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:34,757 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:36,777 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:37,467 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:48:37,467 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:48:38,909 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:40,656 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:41,048 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:43,195 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:44,744 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:48:45,428 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:46,238 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:47,559 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:47,732 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:48:49,717 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:51,750 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:51,892 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:52,471 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:48:52,472 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:48:54,030 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:56,189 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:48:57,663 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:48:58,377 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:00,749 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:02,674 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:02,887 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:05,013 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:07,169 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:07,476 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:49:07,476 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:49:07,718 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:09,355 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:11,496 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:12,736 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:13,623 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:15,751 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:16,921 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:49:17,736 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:49:17,891 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:18,741 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:20,011 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:22,148 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:22,481 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:49:22,482 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:49:24,270 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:24,669 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:26,392 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:28,516 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:29,690 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:30,633 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:32,752 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:34,708 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:34,865 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:36,983 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:37,483 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:49:37,483 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:49:39,105 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:40,695 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:41,236 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:43,349 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:45,479 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:46,655 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:47,044 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:49:47,617 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:47,741 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:49:49,763 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:51,757 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:51,910 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:52,487 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:49:52,488 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:49:54,043 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:56,176 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:49:57,701 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:49:58,324 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:00,441 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:02,582 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:02,723 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:04,725 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:06,848 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:07,492 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:50:07,493 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:50:08,716 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:09,014 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:11,191 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:13,329 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:13,738 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:15,507 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:17,648 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:17,743 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:50:18,748 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:19,195 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:50:19,785 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:21,908 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:22,496 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:50:22,496 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:50:24,040 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:24,679 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:26,167 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:28,307 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:29,700 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:30,468 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:32,669 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:34,716 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:34,857 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:36,981 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:37,499 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:50:37,500 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:50:39,107 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:40,720 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:41,231 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:43,355 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:45,482 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:45,741 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:47,334 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:50:47,609 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:47,748 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:50:49,745 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:50,759 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:52,064 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:52,505 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:50:52,505 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:50:54,203 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:56,346 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:50:56,684 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:50:58,479 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:00,605 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:01,705 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:02,724 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:04,918 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:06,720 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:07,109 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:07,507 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:51:07,507 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:51:09,237 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:11,381 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:11,760 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:13,502 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:15,696 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:17,457 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:17,475 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:51:17,753 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:51:17,839 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:19,955 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:22,088 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:22,511 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:51:22,512 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:22,513 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:51:24,218 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:26,349 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:27,694 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:28,487 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:30,615 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:32,716 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:32,749 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:34,899 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:37,025 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:37,512 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:51:37,512 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:51:37,740 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:39,161 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:41,304 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:42,760 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:43,453 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:45,575 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:47,740 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:47,765 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:51:47,765 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:49,643 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:51:49,871 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:52,029 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:52,526 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:51:52,527 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:51:53,738 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:51:54,164 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:56,299 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:58,425 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:51:58,762 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:00,567 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:02,707 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:03,787 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:04,862 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:06,987 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:07,535 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:52:07,536 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:52:09,133 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:09,717 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:11,283 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:13,428 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:14,734 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:15,567 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:17,709 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:17,789 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:52:17,802 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:52:19,824 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:19,954 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:22,087 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:22,543 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:52:22,543 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:52:24,263 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:25,781 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:26,432 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:28,577 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:30,705 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:30,806 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:32,845 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:35,019 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:35,827 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:37,142 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:37,547 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:52:37,547 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:52:39,271 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:41,409 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:41,804 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:43,530 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:45,649 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:46,871 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:47,775 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:47,791 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:52:47,940 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:52:50,012 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:52,810 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:52:52,817 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:52,821 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:52:52,962 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:55,121 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:57,253 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:52:58,052 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:52:59,558 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:01,699 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:03,079 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:03,879 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:06,003 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:07,581 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:53:07,582 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:53:08,144 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:08,808 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:10,288 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:12,433 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:13,898 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:14,562 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:16,696 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:17,798 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:53:18,858 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:18,947 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:20,083 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:53:21,021 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:22,586 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:53:22,587 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:53:23,152 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:24,848 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:25,287 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:27,433 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:29,560 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:29,865 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:31,684 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:33,836 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:34,890 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:35,959 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:37,591 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:53:37,592 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:53:38,079 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:40,211 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:40,835 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:42,461 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:44,772 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:45,856 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:46,962 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:47,806 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:53:49,091 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:51,718 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:51,822 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:52,245 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:53:52,605 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:53:52,606 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:53:54,255 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:56,502 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:53:57,062 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:53:58,835 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:00,980 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:02,096 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:03,194 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:05,352 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:07,112 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:07,518 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:07,608 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:54:07,612 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:54:09,671 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:11,989 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:13,003 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:14,130 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:16,286 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:17,813 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:54:18,414 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:18,818 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:20,563 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:22,607 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:54:22,608 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:54:22,704 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:23,947 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:24,914 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:26,409 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:54:27,129 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:29,345 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:29,837 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:31,496 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:33,657 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:34,856 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:35,812 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:37,652 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:54:37,652 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:54:37,962 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:40,007 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:40,150 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:42,324 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:44,443 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:45,023 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:46,590 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:47,816 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:54:48,778 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:50,827 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:50,918 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:52,657 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:54:52,657 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:54:53,049 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:55,172 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:56,750 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:54:57,313 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:54:57,551 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:54:59,745 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:01,772 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:01,881 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:04,040 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:06,190 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:06,789 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:07,662 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:55:07,663 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:55:08,338 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:10,459 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:11,963 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:12,637 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:14,930 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:16,976 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:17,126 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:17,822 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:55:19,257 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:21,400 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:22,665 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:55:22,666 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:55:22,891 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:23,522 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:25,650 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:27,842 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:27,978 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:29,721 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:55:29,984 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:32,187 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:33,113 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:34,318 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:36,467 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:37,666 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:55:37,667 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:55:38,633 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:38,962 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:40,750 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:42,929 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:43,980 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:45,079 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:47,202 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:47,827 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:55:49,401 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:49,837 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:51,550 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:52,696 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:55:52,698 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:55:53,727 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:55,094 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:55:55,892 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:55:58,011 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:00,180 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:01,019 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:01,902 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:56:02,378 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:04,527 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:06,042 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:06,999 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:07,687 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:56:07,687 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:56:09,156 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:11,304 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:11,981 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:13,439 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:15,700 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:16,990 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:17,833 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:56:17,851 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:19,973 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:22,407 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:22,848 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:22,849 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:56:22,849 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:56:24,741 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:26,872 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:28,100 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:29,007 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:31,123 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:33,276 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:33,279 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:34,080 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:56:36,334 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:37,864 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:56:37,869 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:56:38,528 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:39,167 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:40,677 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:42,801 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:44,186 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:44,958 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:47,094 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:47,835 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:56:49,243 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:49,837 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:51,412 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:52,854 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:56:52,855 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:56:53,555 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:55,008 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:56:55,682 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:56:57,846 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:00,008 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:00,025 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:02,429 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:04,570 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:05,310 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:06,257 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:57:06,738 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:07,861 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:57:07,862 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:57:08,931 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:11,092 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:11,183 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:13,273 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:15,624 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:16,220 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:17,783 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:17,845 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:57:19,932 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:21,858 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:22,050 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:22,864 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:57:22,864 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:57:24,180 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:26,344 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:27,122 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:28,476 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:30,613 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:32,146 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:32,738 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:34,942 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:37,078 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:37,355 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:37,868 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:57:37,868 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:57:38,393 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:57:39,214 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:41,392 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:43,193 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:43,533 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:45,658 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:47,857 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:47,871 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:57:48,875 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:49,994 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:52,114 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:52,873 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:57:52,874 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:57:54,081 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:57:54,275 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:56,395 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:58,531 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:57:59,097 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:00,670 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:03,295 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:04,114 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:05,446 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:07,581 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:07,879 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:58:07,879 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:58:08,533 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:58:09,706 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:10,105 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:12,245 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:14,375 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:15,241 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:16,519 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:17,872 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:58:18,658 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:20,835 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:20,887 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:22,883 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:58:22,884 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:58:22,969 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:25,102 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:26,107 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:27,227 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:29,363 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:31,124 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:31,483 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:33,605 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:35,726 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:36,146 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:37,888 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:58:37,889 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:58:37,906 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:38,666 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:58:40,046 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:42,110 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:42,196 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:44,318 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:46,455 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:47,131 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:47,874 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:58:48,572 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:50,905 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:52,892 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:58:52,896 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:58:53,076 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:53,098 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:55,204 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:57,344 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:58:58,115 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:58:59,480 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:01,644 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:03,139 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:03,797 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:05,938 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:07,897 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:59:07,897 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:59:08,075 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:08,826 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:59:09,142 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:10,208 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:12,350 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:14,160 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:14,473 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:16,590 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:17,875 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:59:18,732 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:19,883 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:20,887 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:22,992 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:59:22,993 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:59:23,014 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:25,190 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:25,238 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:27,342 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:29,499 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:30,256 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:31,618 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:33,752 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:35,278 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:35,873 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:37,997 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:59:37,998 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:59:38,024 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:38,970 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-29 23:59:40,145 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:41,235 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:42,273 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:44,399 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:46,257 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:46,528 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:47,881 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-29 23:59:48,671 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:50,840 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:51,898 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:52,984 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:53,002 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-29 23:59:53,002 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-29 23:59:55,131 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:57,237 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-29 23:59:57,254 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-29 23:59:59,385 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:01,630 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:02,260 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:03,771 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:05,894 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:07,114 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:00:07,921 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:08,008 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:00:08,009 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:00:08,040 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:10,378 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:12,592 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:13,228 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:14,757 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:16,997 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:17,895 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:00:18,902 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:19,507 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:21,744 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:23,016 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:00:23,016 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:00:23,894 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:24,219 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:26,022 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:28,158 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:29,242 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:30,585 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:32,872 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:34,261 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:35,103 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:37,221 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:38,019 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:00:38,020 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:00:39,342 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:40,207 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:41,476 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:43,371 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:00:43,623 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:45,734 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:45,753 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:47,895 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:47,898 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:00:50,017 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:50,906 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:52,166 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:53,088 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:00:53,089 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:00:54,315 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:56,343 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:00:56,453 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:00:58,614 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:00,760 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:01,359 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:02,885 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:05,011 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:06,376 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:07,128 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:08,093 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:01:08,093 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:01:09,282 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:11,446 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:11,989 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:13,511 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:01:13,566 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:15,699 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:17,010 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:17,847 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:17,903 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:01:20,049 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:22,173 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:22,925 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:23,097 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:01:23,098 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:01:24,351 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:26,468 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:28,341 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:28,670 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:30,802 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:32,968 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:33,360 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:35,126 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:37,244 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:38,102 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:01:38,103 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:01:39,313 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:39,363 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:41,488 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:43,609 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:43,648 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:01:44,567 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:45,755 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:47,872 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:47,909 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:01:49,917 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:50,070 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:52,227 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:53,108 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:01:53,109 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:01:54,385 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:55,341 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:01:56,664 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:01:58,788 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:00,363 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:01,338 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:03,463 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:05,381 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:05,584 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:07,702 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:08,112 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:02:08,113 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:02:09,963 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:11,196 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:12,113 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:13,797 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:02:14,237 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:16,219 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:16,366 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:17,912 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:02:18,495 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:20,639 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:21,928 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:22,768 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:23,118 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:02:23,118 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:02:24,882 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:27,010 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:27,340 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:29,144 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:31,261 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:32,370 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:33,403 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:35,539 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:37,387 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:37,669 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:38,123 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:02:38,124 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:02:39,800 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:41,931 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:42,705 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:43,940 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:02:44,069 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:46,200 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:47,722 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:47,917 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:02:48,329 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:50,481 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:52,650 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:52,936 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:53,128 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:02:53,128 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:02:54,772 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:56,904 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:02:58,316 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:02:59,037 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:01,159 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:03,334 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:03,584 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:05,943 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:08,133 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:03:08,137 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:03:08,139 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:09,327 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:10,307 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:12,429 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:13,086 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:03:14,574 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:14,963 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:16,691 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:17,923 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:03:18,810 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:20,937 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:20,969 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:23,130 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:23,138 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:03:23,138 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:03:25,272 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:26,372 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:27,401 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:29,564 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:31,392 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:31,722 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:33,909 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:36,122 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:36,413 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:38,139 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:03:38,140 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:03:38,249 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:40,378 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:42,201 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:42,515 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:43,244 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:03:44,650 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:46,811 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:47,225 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:47,929 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:03:48,951 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:51,085 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:52,955 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:53,143 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:03:53,144 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:03:53,219 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:55,350 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:57,469 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:03:58,371 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:03:59,594 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:01,712 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:03,390 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:03,839 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:05,958 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:08,078 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:08,148 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:04:08,148 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:04:08,402 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:10,208 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:11,374 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:04:12,348 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:13,628 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:14,479 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:16,721 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:17,935 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:04:18,864 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:18,940 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:20,993 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:23,115 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:23,152 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:04:23,153 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:04:24,405 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:25,488 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:27,658 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:29,421 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:29,794 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:31,929 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:34,052 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:34,445 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:36,176 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:38,158 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:04:38,158 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:04:38,307 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:39,983 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:40,450 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:41,501 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:04:42,582 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:44,709 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:45,002 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:46,834 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:47,940 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:04:48,964 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:50,955 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:51,123 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:53,163 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:04:53,164 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:04:53,276 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:55,401 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:56,353 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:04:57,542 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:04:59,706 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:01,378 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:01,840 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:03,969 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:06,089 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:06,395 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:08,165 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:05:08,165 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:05:08,224 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:10,429 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:11,411 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:11,639 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:05:12,600 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:14,755 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:16,430 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:16,949 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:17,941 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:05:19,134 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:21,310 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:21,961 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:23,165 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:05:23,166 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:05:23,499 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:25,625 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:27,375 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:27,756 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:29,891 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:32,093 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:32,390 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:34,225 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:36,342 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:37,415 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:38,171 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:05:38,171 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:05:38,497 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:39,770 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:05:40,635 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:43,032 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:43,168 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:45,293 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:47,485 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:47,948 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:05:48,952 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:49,628 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:51,794 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:53,172 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:05:53,175 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:05:53,930 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:54,406 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:05:56,067 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:58,213 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:05:59,423 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:00,344 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:02,485 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:04,448 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:04,603 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:06,779 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:08,176 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:06:08,177 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:06:09,051 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:09,465 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:11,195 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:11,915 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:06:13,357 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:14,553 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:15,530 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:17,653 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:17,952 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:06:19,794 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:19,962 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:21,925 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:23,178 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:06:23,179 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:06:24,061 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:25,353 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:26,200 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:28,340 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:30,376 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:30,599 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:33,037 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:35,170 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:35,395 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:37,299 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:38,181 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:06:38,182 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:06:39,797 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:40,416 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:41,946 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:44,077 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:06:44,088 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:45,677 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:46,220 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:47,957 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:06:48,371 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:50,494 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:50,969 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:52,935 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:53,185 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:06:53,185 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:06:55,259 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:56,390 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:06:57,414 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:06:59,607 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:01,399 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:01,748 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:03,892 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:06,035 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:06,413 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:08,199 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:07:08,203 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:07:08,228 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:11,255 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:11,442 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:13,655 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:15,819 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:16,539 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:18,031 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:07:18,242 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:18,552 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:07:20,398 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:22,048 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:22,517 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:23,197 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:07:23,199 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:07:24,653 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:26,821 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:27,448 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:28,962 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:31,173 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:32,466 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:33,299 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:35,450 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:37,490 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:37,590 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:38,198 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:07:38,199 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:07:39,734 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:41,889 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:43,401 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:44,010 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:46,158 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:48,021 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:07:48,280 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:48,678 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:07:49,026 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:50,441 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:52,573 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:53,254 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:07:53,259 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:07:54,428 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:07:54,700 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:56,839 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:58,969 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:07:59,439 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:01,097 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:03,302 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:04,453 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:05,503 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:07,664 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:08,207 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:08:08,208 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:08:09,989 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:10,416 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:12,126 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:14,262 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:15,438 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:16,389 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:18,026 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:08:18,521 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:18,859 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:08:20,694 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:21,042 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:22,855 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:23,211 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:08:23,212 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:08:25,029 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:26,486 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:27,163 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:29,363 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:31,502 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:31,521 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:33,660 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:35,820 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:36,522 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:37,942 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:38,216 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:08:38,216 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:08:40,115 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:42,253 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:42,401 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:44,406 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:46,552 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:47,426 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:48,032 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:08:48,700 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:49,002 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:08:50,829 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:52,950 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:53,194 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:53,237 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:08:53,254 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:08:55,093 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:57,231 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:08:58,535 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:08:59,370 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:01,485 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:03,553 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:03,628 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:05,783 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:07,910 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:08,230 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:09:08,232 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:09:09,489 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:10,097 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:12,228 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:14,344 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:14,504 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:16,484 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:18,033 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:09:18,616 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:19,171 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:09:20,043 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:20,755 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:22,924 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:23,233 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:09:23,233 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:09:25,059 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:25,482 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:27,212 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:29,355 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:30,504 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:31,499 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:33,676 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:35,524 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:35,829 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:37,966 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:38,238 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:09:38,238 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:09:40,153 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:41,505 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:42,291 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:44,405 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:46,523 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:46,527 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:48,039 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:09:48,656 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:49,315 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:09:50,792 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:52,054 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:52,949 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:53,238 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:09:53,239 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:09:55,098 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:57,241 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:09:57,440 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:09:59,403 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:01,554 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:02,458 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:03,743 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:05,910 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:07,477 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:08,052 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:08,242 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:10:08,243 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:10:10,191 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:12,316 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:13,461 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:14,437 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:16,576 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:18,044 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:10:18,722 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:19,046 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:19,461 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:10:20,871 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:23,002 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:23,244 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:10:23,248 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:10:24,475 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:25,142 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:27,360 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:29,499 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:29,530 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:31,714 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:33,865 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:34,520 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:35,998 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:38,135 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:38,245 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:10:38,245 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:10:40,314 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:40,493 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:42,435 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:44,574 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:45,515 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:46,696 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:47,582 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:10:48,052 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:10:48,892 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:51,066 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:51,073 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:53,205 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:53,249 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:10:53,249 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:10:55,336 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:56,509 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:10:57,471 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:10:59,596 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:01,530 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:01,737 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:03,906 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:06,223 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:06,552 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:08,255 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:11:08,256 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:11:08,363 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:10,496 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:12,514 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:12,638 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:14,778 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:16,949 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:18,056 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:11:18,069 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:19,086 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:19,733 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:11:21,242 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:23,084 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:23,256 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:11:23,257 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:11:23,380 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:25,531 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:27,667 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:28,528 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:29,802 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:31,928 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:33,541 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:34,051 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:36,208 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:38,324 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: stop_status
+2024-07-30 00:11:38,325 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: stop_status
+2024-07-30 00:11:38,376 ERROR   gpuapple  :73359 [gpu_apple.py:sample():110] GPU stats error: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+Traceback (most recent call last):
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu_apple.py", line 64, in sample
+    subprocess.check_output(command, universal_newlines=True)
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 421, in check_output
+    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
+  File "/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/subprocess.py", line 526, in run
+    raise CalledProcessError(retcode, process.args,
+subprocess.CalledProcessError: Command '['/Users/rishubbhatia/miniforge3/envs/games/lib/python3.10/site-packages/wandb/bin/apple_gpu_stats', '--json']' died with <Signals.SIGTRAP: 5>.
+2024-07-30 00:11:39,526 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:40,239 DEBUG   SenderThread:73359 [sender.py:send():378] send: exit
+2024-07-30 00:11:40,239 INFO    SenderThread:73359 [sender.py:send_exit():585] handling exit code: 0
+2024-07-30 00:11:40,242 INFO    SenderThread:73359 [sender.py:send_exit():587] handling runtime: 1522
+2024-07-30 00:11:40,243 INFO    SenderThread:73359 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-30 00:11:40,245 INFO    SenderThread:73359 [sender.py:send_exit():593] send defer
+2024-07-30 00:11:40,245 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,245 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 0
+2024-07-30 00:11:40,245 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,245 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 0
+2024-07-30 00:11:40,246 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 1
+2024-07-30 00:11:40,246 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,246 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 1
+2024-07-30 00:11:40,246 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,246 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 1
+2024-07-30 00:11:40,246 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 2
+2024-07-30 00:11:40,246 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,246 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 2
+2024-07-30 00:11:40,246 INFO    HandlerThread:73359 [system_monitor.py:finish():203] Stopping system monitor
+2024-07-30 00:11:40,246 DEBUG   SystemMonitor:73359 [system_monitor.py:_start():179] Finished system metrics aggregation loop
+2024-07-30 00:11:40,246 INFO    HandlerThread:73359 [interfaces.py:finish():200] Joined cpu monitor
+2024-07-30 00:11:40,247 DEBUG   SystemMonitor:73359 [system_monitor.py:_start():183] Publishing last batch of metrics
+2024-07-30 00:11:40,247 INFO    HandlerThread:73359 [interfaces.py:finish():200] Joined disk monitor
+2024-07-30 00:11:40,247 INFO    HandlerThread:73359 [interfaces.py:finish():200] Joined gpuapple monitor
+2024-07-30 00:11:40,248 INFO    HandlerThread:73359 [interfaces.py:finish():200] Joined memory monitor
+2024-07-30 00:11:40,248 INFO    HandlerThread:73359 [interfaces.py:finish():200] Joined network monitor
+2024-07-30 00:11:40,248 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,248 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 2
+2024-07-30 00:11:40,248 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 3
+2024-07-30 00:11:40,248 DEBUG   SenderThread:73359 [sender.py:send():378] send: stats
+2024-07-30 00:11:40,248 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,248 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 3
+2024-07-30 00:11:40,248 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,248 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 3
+2024-07-30 00:11:40,248 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 4
+2024-07-30 00:11:40,248 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,248 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 4
+2024-07-30 00:11:40,248 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,248 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 4
+2024-07-30 00:11:40,248 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 5
+2024-07-30 00:11:40,248 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,248 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 5
+2024-07-30 00:11:40,249 DEBUG   SenderThread:73359 [sender.py:send():378] send: summary
+2024-07-30 00:11:40,252 INFO    SenderThread:73359 [sender.py:_save_file():1389] saving file wandb-summary.json with policy end
+2024-07-30 00:11:40,253 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,253 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 5
+2024-07-30 00:11:40,253 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 6
+2024-07-30 00:11:40,253 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,253 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 6
+2024-07-30 00:11:40,253 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,253 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 6
+2024-07-30 00:11:40,253 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 7
+2024-07-30 00:11:40,253 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:40,253 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:40,253 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 7
+2024-07-30 00:11:40,253 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:40,253 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 7
+2024-07-30 00:11:40,818 INFO    Thread-12 :73359 [dir_watcher.py:_on_file_created():271] file/dir created: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/wandb-summary.json
+2024-07-30 00:11:41,150 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 8
+2024-07-30 00:11:41,151 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:41,151 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 8
+2024-07-30 00:11:41,151 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:41,151 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 8
+2024-07-30 00:11:41,151 INFO    SenderThread:73359 [job_builder.py:build():432] Attempting to build job artifact
+2024-07-30 00:11:41,155 INFO    SenderThread:73359 [job_builder.py:_get_source_type():565] is repo sourced job
+2024-07-30 00:11:41,155 WARNING SenderThread:73359 [job_builder.py:_log_if_verbose():267] No program path found, not creating job artifact. See https://docs.wandb.ai/guides/launch/create-job
+2024-07-30 00:11:41,155 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 9
+2024-07-30 00:11:41,155 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:41,155 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 9
+2024-07-30 00:11:41,156 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:41,156 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 9
+2024-07-30 00:11:41,156 INFO    SenderThread:73359 [dir_watcher.py:finish():358] shutting down directory watcher
+2024-07-30 00:11:41,246 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:41,823 INFO    SenderThread:73359 [dir_watcher.py:_on_file_modified():288] file/dir modified: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:11:41,823 INFO    SenderThread:73359 [dir_watcher.py:finish():388] scan: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files
+2024-07-30 00:11:41,824 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/diff.patch diff.patch
+2024-07-30 00:11:41,824 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/requirements.txt requirements.txt
+2024-07-30 00:11:41,825 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log output.log
+2024-07-30 00:11:41,825 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/config.yaml config.yaml
+2024-07-30 00:11:41,831 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/wandb-summary.json wandb-summary.json
+2024-07-30 00:11:41,832 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml conda-environment.yaml
+2024-07-30 00:11:41,832 INFO    SenderThread:73359 [dir_watcher.py:finish():402] scan save: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/wandb-metadata.json wandb-metadata.json
+2024-07-30 00:11:41,833 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 10
+2024-07-30 00:11:41,834 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:41,838 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:11:41,839 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 10
+2024-07-30 00:11:41,843 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:11:41,845 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 10
+2024-07-30 00:11:41,845 INFO    SenderThread:73359 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-30 00:11:42,249 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:42,249 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:42,409 INFO    wandb-upload_0:73359 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/requirements.txt
+2024-07-30 00:11:42,589 INFO    wandb-upload_3:73359 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/wandb-summary.json
+2024-07-30 00:11:42,617 INFO    wandb-upload_4:73359 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/conda-environment.yaml
+2024-07-30 00:11:43,253 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:43,253 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:44,259 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:44,259 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:45,264 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:45,265 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:45,265 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:46,270 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:46,271 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:47,276 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:47,277 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:48,278 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:48,279 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:49,285 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:49,287 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:50,289 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:50,289 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:50,289 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:51,296 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:51,297 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:52,300 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:52,303 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:53,306 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:53,306 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:54,312 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:54,313 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:55,315 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:11:55,318 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:55,318 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:56,324 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:56,324 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:57,326 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:57,327 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:58,327 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:58,328 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:11:59,335 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:11:59,336 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:00,335 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:12:00,336 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:00,337 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: status_report
+2024-07-30 00:12:01,342 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:12:01,343 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:02,348 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:12:02,348 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:03,354 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:12:03,354 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:03,520 INFO    wandb-upload_2:73359 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/config.yaml
+2024-07-30 00:12:03,549 INFO    wandb-upload_1:73359 [upload_job.py:push():130] Uploaded file /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/files/output.log
+2024-07-30 00:12:03,750 INFO    Thread-11 (_thread_body):73359 [sender.py:transition_state():613] send defer: 11
+2024-07-30 00:12:03,751 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:12:03,751 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 11
+2024-07-30 00:12:03,752 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:12:03,752 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 11
+2024-07-30 00:12:03,752 INFO    SenderThread:73359 [file_pusher.py:join():175] waiting for file pusher
+2024-07-30 00:12:03,754 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 12
+2024-07-30 00:12:03,755 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:12:03,755 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 12
+2024-07-30 00:12:03,755 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:12:03,755 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 12
+2024-07-30 00:12:03,755 INFO    SenderThread:73359 [file_stream.py:finish():601] file stream finish called
+2024-07-30 00:12:04,030 INFO    SenderThread:73359 [file_stream.py:finish():605] file stream finish is done
+2024-07-30 00:12:04,030 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 13
+2024-07-30 00:12:04,030 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:12:04,031 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 13
+2024-07-30 00:12:04,031 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:12:04,031 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 13
+2024-07-30 00:12:04,031 INFO    SenderThread:73359 [sender.py:transition_state():613] send defer: 14
+2024-07-30 00:12:04,031 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: defer
+2024-07-30 00:12:04,031 INFO    HandlerThread:73359 [handler.py:handle_request_defer():184] handle defer: 14
+2024-07-30 00:12:04,032 DEBUG   SenderThread:73359 [sender.py:send():378] send: final
+2024-07-30 00:12:04,032 DEBUG   SenderThread:73359 [sender.py:send():378] send: footer
+2024-07-30 00:12:04,032 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: defer
+2024-07-30 00:12:04,032 INFO    SenderThread:73359 [sender.py:send_request_defer():609] handle sender defer: 14
+2024-07-30 00:12:04,032 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:12:04,034 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: poll_exit
+2024-07-30 00:12:04,035 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: server_info
+2024-07-30 00:12:04,035 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:04,035 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: get_summary
+2024-07-30 00:12:04,035 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: poll_exit
+2024-07-30 00:12:04,036 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: sampled_history
+2024-07-30 00:12:04,036 DEBUG   SenderThread:73359 [sender.py:send_request():405] send_request: server_info
+2024-07-30 00:12:04,036 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: internal_messages
+2024-07-30 00:12:04,210 INFO    MainThread:73359 [wandb_run.py:_footer_history_summary_info():3994] rendering history
+2024-07-30 00:12:04,211 INFO    MainThread:73359 [wandb_run.py:_footer_history_summary_info():4026] rendering summary
+2024-07-30 00:12:04,212 INFO    MainThread:73359 [wandb_run.py:_footer_sync_info():3953] logging synced files
+2024-07-30 00:12:04,216 DEBUG   HandlerThread:73359 [handler.py:handle_request():158] handle_request: shutdown
+2024-07-30 00:12:04,216 INFO    HandlerThread:73359 [handler.py:finish():882] shutting down handler
+2024-07-30 00:12:05,039 INFO    WriterThread:73359 [datastore.py:close():296] close: /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/run-8lal1ggc.wandb
+2024-07-30 00:12:05,211 INFO    SenderThread:73359 [sender.py:finish():1545] shutting down sender
+2024-07-30 00:12:05,212 INFO    SenderThread:73359 [file_pusher.py:finish():169] shutting down file pusher
+2024-07-30 00:12:05,212 INFO    SenderThread:73359 [file_pusher.py:join():175] waiting for file pusher
diff --git a/wandb/run-20240729_234616-8lal1ggc/logs/debug.log b/wandb/run-20240729_234616-8lal1ggc/logs/debug.log
new file mode 100644
index 0000000..646badb
--- /dev/null
+++ b/wandb/run-20240729_234616-8lal1ggc/logs/debug.log
@@ -0,0 +1,31 @@
+2024-07-29 23:46:16,984 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
+2024-07-29 23:46:16,984 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Configure stats pid to 73249
+2024-07-29 23:46:16,984 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/.config/wandb/settings
+2024-07-29 23:46:16,984 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Loading settings from /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/settings
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
+2024-07-29 23:46:16,985 WARNING MainThread:73249 [wandb_setup.py:_flush():76] Could not find program at -m games.freeway.run_supervised_gnn
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': None, 'program': '-m games.freeway.run_supervised_gnn'}
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_setup.py:_flush():76] Applying login settings: {}
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_init.py:_log_setup():520] Logging user logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/logs/debug.log
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_init.py:_log_setup():521] Logging internal logs to /Users/rishubbhatia/Documents/master thesis/Master-Thesis-GNN/wandb/run-20240729_234616-8lal1ggc/logs/debug-internal.log
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_init.py:init():560] calling init triggers
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
+config: {}
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_init.py:init():610] starting backend
+2024-07-29 23:46:16,985 INFO    MainThread:73249 [wandb_init.py:init():614] setting up manager
+2024-07-29 23:46:16,988 INFO    MainThread:73249 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=spawn,fork,forkserver, using: spawn
+2024-07-29 23:46:16,999 INFO    MainThread:73249 [wandb_init.py:init():622] backend started and connected
+2024-07-29 23:46:17,012 INFO    MainThread:73249 [wandb_init.py:init():711] updated telemetry
+2024-07-29 23:46:17,057 INFO    MainThread:73249 [wandb_init.py:init():744] communicating run to backend with 90.0 second timeout
+2024-07-29 23:46:17,483 INFO    MainThread:73249 [wandb_run.py:_on_init():2396] communicating current version
+2024-07-29 23:46:17,665 INFO    MainThread:73249 [wandb_run.py:_on_init():2405] got version response upgrade_message: "wandb version 0.17.5 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"
+
+2024-07-29 23:46:17,666 INFO    MainThread:73249 [wandb_init.py:init():795] starting run threads in backend
+2024-07-29 23:46:22,418 INFO    MainThread:73249 [wandb_run.py:_console_start():2374] atexit reg
+2024-07-29 23:46:22,418 INFO    MainThread:73249 [wandb_run.py:_redirect():2229] redirect: wrap_raw
+2024-07-29 23:46:22,419 INFO    MainThread:73249 [wandb_run.py:_redirect():2294] Wrapping output streams.
+2024-07-29 23:46:22,419 INFO    MainThread:73249 [wandb_run.py:_redirect():2319] Redirects installed.
+2024-07-29 23:46:22,422 INFO    MainThread:73249 [wandb_init.py:init():838] run started, returning control to user process
+2024-07-29 23:46:24,255 INFO    MainThread:73249 [wandb_run.py:_config_callback():1376] config_cb None None {'algo': 'PPO', 'policy_class': "<class 'stable_baselines3.common.policies.ActorCriticPolicy'>", 'device': 'cpu', 'verbose': 2, 'policy_kwargs': "{'features_extractor_class': <class 'games.model.policy.CustomHeteroGNN'>, 'features_extractor_kwargs': {'features_dim': 64, 'hidden_size': 64, 'num_layer': 2, 'obj_type_id': 'obj', 'arity_dict': {'ChickenOnLane': 2, 'CarOnLane': 2, 'LaneNextToLane': 2}, 'game': 'freeway'}}", 'num_timesteps': 0, '_total_timesteps': 100000, '_num_timesteps_at_start': 0, 'seed': 'None', 'action_noise': 'None', 'start_time': 1722289584248963000, 'learning_rate': 0.0003, 'tensorboard_log': 'None', '_last_obs': '[[[103. 145.   0.   0.   1.   0.   0.]\n  [105.  50.   0.   0.   0.   1.   0.]\n  [105. 100.   0.   0.   0.   1.   0.]\n  [ 77.  50.   2.   0.   0.   0.   1.]\n  [  1. 100.   2.   0.   0.   0.   1.]\n  [ 54.  50.   2.   0.   0.   0.   1.]\n  [103. 100.   1.   0.   0.   0.   1.]\n  [135.  50.   2.   0.   0.   0.   1.]]]', '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', 'env': '<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x17d25d840>', '_vec_normalize_env': 'None', 'observation_space': 'Box(-inf, inf, (8, 7), float32)', 'action_space': 'Discrete(3)', 'n_envs': 1, 'n_steps': 2048, 'gamma': 0.99, 'gae_lambda': 0.95, 'ent_coef': 0.0, 'vf_coef': 0.5, 'max_grad_norm': 0.5, 'rollout_buffer_class': "<class 'stable_baselines3.common.buffers.RolloutBuffer'>", 'rollout_buffer_kwargs': '{}', 'batch_size': 64, 'n_epochs': 10, 'clip_range': '<function get_schedule_fn.<locals>.<lambda> at 0x17d271bd0>', 'clip_range_vf': 'None', 'normalize_advantage': 'True', 'target_kl': 'None', 'lr_schedule': '<function get_schedule_fn.<locals>.<lambda> at 0x1220131c0>', 'rollout_buffer': '<stable_baselines3.common.buffers.RolloutBuffer object at 0x17d25d870>', 'policy': 'ActorCriticPolicy(\n  (features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (pi_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (vf_features_extractor): CustomHeteroGNN(\n    (model): HeteroGNN(\n      (encoding_mlps): ModuleDict(\n        (obj): MLP(7, 64, 64)\n        (ChickenOnLane): MLP(14, 128, 128)\n        (CarOnLane): MLP(14, 128, 128)\n        (LaneNextToLane): MLP(14, 128, 128)\n      )\n      (obj_to_atom): FanOutMP(\n        (update_mlp_by_dst): ModuleDict(\n          (ChickenOnLane): MLP(128, 128, 128)\n          (CarOnLane): MLP(128, 128, 128)\n          (LaneNextToLane): MLP(128, 128, 128)\n        )\n        (simple): SimpleConv()\n      )\n      (obj_update): MLP(128, 128, 64)\n      (atom_to_obj): FanInMP(\n        (select): SelectMP()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net): Linear(in_features=64, out_features=3, bias=True)\n  (value_net): Linear(in_features=64, out_features=1, bias=True)\n)', '_logger': '<stable_baselines3.common.logger.Logger object at 0x17d1a31f0>'}
+2024-07-30 00:12:05,222 WARNING MsgRouterThr:73249 [router.py:message_loop():77] message_loop has been closed
diff --git a/wandb/run-20240729_234616-8lal1ggc/run-8lal1ggc.wandb b/wandb/run-20240729_234616-8lal1ggc/run-8lal1ggc.wandb
new file mode 100644
index 0000000..4356f27
Binary files /dev/null and b/wandb/run-20240729_234616-8lal1ggc/run-8lal1ggc.wandb differ
